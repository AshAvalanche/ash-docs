{"searchDocs":[{"title":"One-Command Devnet (Local Network)","type":0,"sectionRef":"#","url":"/docs/console/guides/blueprint/","content":"One-Command Devnet (Local Network) caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. Similarly to the Avalanche Devnet guide, this guide will walk you through setting up a 5-node Avalanche devnet (local network) and a Subnet EVM blockchain with the Ash Console, but this time with a single command! (well actually 2 commands in this guide, but we could do it in one) We will leverage the blueprint feature of the Ash CLI. tip Devnets allow you to develop your Subnet out of sight in an environment where you have full control! info Devnets use the local network setup with hardcoded validator nodes and airdrop address.","keywords":"","version":"Next"},{"title":"0. Prerequisites","type":0,"sectionRef":"#","url":"/docs/console/guides/blueprint/prerequisites","content":"0. Prerequisites caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. info During the Console alpha, user accounts are created by the Ash team. If you want to get access to the Console alpha, please contact us! Register in advanceBook a callDM us on TwitterJoin our Discord To follow this guide, you will need: The Ash CLI installed in a version &gt;= 0.4.0. See Ash CLI - Installation.A user account in the Ash Console and an open session in the CLI. See Authentication.An account in one of the following cloud providers: AWSAzure (account = subscription)Google Cloud (account = project)","keywords":"","version":"Next"},{"title":"Ash Console","type":0,"sectionRef":"#","url":"/docs/console/","content":"Ash Console caution 🚧 Page under construction The Ash Console is the one-stop shop for Appchain development and operation on Avalanche.","keywords":"","version":"Next"},{"title":"1. Cloud Credentials Setup","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/cloud-credentials","content":"1. Cloud Credentials Setup caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. To deploy the Avalanche node resource into your cloud account/subscription/project, you need to provide the Console with appropriate credentials. Follow the instructions provided in the Cloud Credentials reference to create a cloud credentials secret in the Console. You can pick the cloud provider of your choice among: AWS, Azure, and Google Cloud (more coming soon). Save the secret ID for later use. You can always get it with the console secret list command: ash console secret list ","keywords":"","version":"Next"},{"title":"Avalanche Node on Fuji","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/","content":"Avalanche Node on Fuji caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. This guide will walk you through setting up an Avalanche node on the Fuji (testnet) network with the Ash Console.","keywords":"","version":"Next"},{"title":"Avalanche Devnet (Local Network)","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/","content":"Avalanche Devnet (Local Network) caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. This guide will walk you through setting up a 5-node Avalanche devnet (local network) with the Ash Console. tip Devnets allow you to develop your Subnet out of sight in an environment where you have full control! info Devnets use the local network setup with hardcoded validator nodes and airdrop address.","keywords":"","version":"Next"},{"title":"1. Cloud Credentials Setup","type":0,"sectionRef":"#","url":"/docs/console/guides/blueprint/cloud-credentials","content":"1. Cloud Credentials Setup caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. To deploy the Avalanche node resources into your cloud account/subscription/project, you need to provide the Console with appropriate credentials. Follow the instructions provided in the Cloud Credentials reference to create a cloud credentials secret in the Console. You can pick the cloud provider of your choice among: AWS, Azure, and Google Cloud (more coming soon).Save the secret ID for later use. You can always get it with the console secret list command: ash console secret list ","keywords":"","version":"Next"},{"title":"0. Prerequisites","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/prerequisites","content":"0. Prerequisites caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. info During the Console alpha, user accounts are created by the Ash team. If you want to get access to the Console alpha, please contact us! Register in advanceBook a callDM us on TwitterJoin our Discord To follow this guide, you will need: The Ash CLI installed in a version &gt;= 0.4.0. See Ash CLI - Installation.A user account in the Ash Console and an open session in the CLI. See Authentication.An account in one of the following cloud providers: AWSAzure (account = subscription)Google Cloud (account = project)","keywords":"","version":"Next"},{"title":"1. Cloud Credentials Setup","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/cloud-credentials","content":"1. Cloud Credentials Setup caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. To deploy the Avalanche node resources into your cloud account/subscription/project, you need to provide the Console with appropriate credentials. Follow the instructions provided in the Cloud Credentials reference to create a cloud credentials secret in the Console. You can pick the cloud provider of your choice among: AWS, Azure, and Google Cloud (more coming soon).Save the secret ID for later use. You can always get it with the console secret list command: ash console secret list ","keywords":"","version":"Next"},{"title":"Ash Console Features","type":0,"sectionRef":"#","url":"/docs/console/features","content":"","keywords":"","version":"Next"},{"title":"Validator management​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#validator-management","content":"Manage validator nodes seamlessly with the Ash Console. Edit configuration keys, install, upgrade, or restart AvalancheGo, etc. ","version":"Next","tagName":"h3"},{"title":"Subnets management​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#subnets-management","content":"Manage Subnets and blockchains. ","version":"Next","tagName":"h3"},{"title":"Networks​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#networks","content":"Ash supports running Avalanche validator nodes in a private devnet network, on the Fuji testnet, or on the mainnet (only for paid plans). ","version":"Next","tagName":"h3"},{"title":"Monitoring​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#monitoring","content":"Get a comprehensive view of your validators with our prebuilt dashboards presenting a complete suite of metrics (AvalancheGo metrics, machine metrics, Subnet centric metrics). ","version":"Next","tagName":"h3"},{"title":"Alerting​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#alerting","content":"Receive custom alerts in real time and never miss an important event going on in your Subnet. ","version":"Next","tagName":"h3"},{"title":"Support​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#support","content":"Get first class support from our expert team. ","version":"Next","tagName":"h3"},{"title":"Automatic upgrade​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#automatic-upgrade","content":"Ash will make sure your validators are always up to date with the latest release of AvalancheGo. ","version":"Next","tagName":"h3"},{"title":"Faucet​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#faucet","content":"Launch a fully configurable Faucet plugged on your Subnet for easy testing and user on-boarding. ","version":"Next","tagName":"h3"},{"title":"Block explorer​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#block-explorer","content":"Analyze blocks, transactions, addresses and more with your very own Blockscout instance to get full grasp of what’s going on in your Subnet. ","version":"Next","tagName":"h3"},{"title":"Load balanced RPC​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#load-balanced-rpc","content":"Never worry about your Subnet availability again with our automatic load balancer. Choose the nodes that should serve the request and your Subnet RPC is ready to go. ","version":"Next","tagName":"h3"},{"title":"Multi-cloud deployments​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#multi-cloud-deployments","content":"Our service is infrastructure agnostic, use bare metal machines or BYOC (Bring Your Own Cloud). ","version":"Next","tagName":"h3"},{"title":"Subnet benchmarking​","type":1,"pageTitle":"Ash Console Features","url":"/docs/console/features#subnet-benchmarking","content":"Stress test your Subnet with our customizable on-demand Subnet benchmarking tool. info Most of the features powering the Ash Console are open-source as part of the Ash toolkit. ","version":"Next","tagName":"h3"},{"title":"2. Node ID / BLS key Secret Generation","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/node-id","content":"","keywords":"","version":"Next"},{"title":"Generate a new node ID secret​","type":1,"pageTitle":"2. Node ID / BLS key Secret Generation","url":"/docs/console/guides/fuji-node/node-id#generate-a-new-node-id-secret","content":"If not already done, create a folder for this guide and navigate to it: mkdir -p ash-console-guides/fuji-node cd ash-console-guides/fuji-node Generate a new Node ID with the avalanche node generate-id command: Command ash avalanche node generate-id -o node-id Output Node ID: NodeID-Bdf7YwriWbpY15CPcXH5791uDTqtCYyjw Certificate and key files written to 'node-id/node.crt' and 'node-id/node.key' note Your node ID will be different. Make sure to keep a backup of the certificate and key files in a safe place. If an outage occurs, you will need them to recreate a node with the same ID. Save the Node ID for later use. You can also compute it from the node certificate with the avalanche node id command: Command ash avalanche node id-from-cert -f node-id/node.crt Output Node ID: NodeID-Bdf7YwriWbpY15CPcXH5791uDTqtCYyjw  ","version":"Next","tagName":"h2"},{"title":"Generate a BLS key​","type":1,"pageTitle":"2. Node ID / BLS key Secret Generation","url":"/docs/console/guides/fuji-node/node-id#generate-a-bls-key","content":"Generate a new BLS key with the avalanche node generate-bls-key command: Command ash avalanche node generate-bls-key -o node-id Output BLS public key: 0x94a8ee6943e043b2b523f9b507fca27cad3d96fd443d5a7b1e4496f6ed7bb4eb934f03bc36a4fd9719c06b7d36931523 BLS proof of possession: 0x97fd003ae1719d7d8bdac4a703909a169101f0d27d73077a3241c8fc01861a82603f45582f34266a5602b3ff3b28ee5910bb01f10a418cad08c2de0b0debbfd035f9900d8ffa78c3769476e599ae028b256cd08acadfa69974ae27f26f6c17e7 BLS private key file written to 'node-id/bls.key' note Your BLS key will be different. ","version":"Next","tagName":"h2"},{"title":"Create the node ID secret​","type":1,"pageTitle":"2. Node ID / BLS key Secret Generation","url":"/docs/console/guides/fuji-node/node-id#create-the-node-id-secret","content":"tip The Ash Console subcommands support both JSON and YAML. Use the certificate, key and BLS key files to create a nodeId secret with the console secret create command. Don't forget to replace the Node ID with yours: Command ash console secret create '{ name: fuji-node-id-01, secretType: nodeId, nodeId: NodeID-Bdf7YwriWbpY15CPcXH5791uDTqtCYyjw, nodeCert: node-id/node.crt, nodeKey: node-id/node.key, nodeBlsKey: node-id/bls.key }'  Output Secret created successfully! +-----------------+-------------+--------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +=================+=============+========+==================+=========+ | fuji-node-id-01 | 41ea...c755 | NodeId | 2023-12-21T11:05 | 0 | +-----------------+-------------+--------+------------------+---------+  note See the reference for more information about secrets lifecycle management. ","version":"Next","tagName":"h2"},{"title":"0. Prerequisites","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/prerequisites","content":"0. Prerequisites caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. info During the Console alpha, user accounts are created by the Ash team. If you want to get access to the Console alpha, please contact us! Register in advanceBook a callDM us on TwitterJoin our Discord To follow this guide, you will need: The Ash CLI installed in a version &gt;= 0.4.0. See Ash CLI - Installation.A user account in the Ash Console and an open session in the CLI. See Authentication.An account in one of the following cloud providers: AWSAzure (account = subscription)Google Cloud (account = project)","keywords":"","version":"Next"},{"title":"3. Project and Cloud Region Creation","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/project-region","content":"","keywords":"","version":"Next"},{"title":"Create a project​","type":1,"pageTitle":"3. Project and Cloud Region Creation","url":"/docs/console/guides/fuji-node/project-region#create-a-project","content":"tip The Ash Console subcommands support both JSON and YAML. Create a project on the testnet network for this guide with the console project create command: Command ash console project create '{name: fuji-node-guide, network: testnet}'  Output Project created successfully! +-----------------+-------------+---------+---------------+------------------+ | Project name | Project ID | Network | Cloud regions | Created at | +=================+=============+=========+===============+==================+ | fuji-node-guide | 5a5a...6351 | Testnet | | 2023-12-21T11:07 | +-----------------+-------------+---------+---------------+------------------+ Switched to project 'fuji-node-guide' (5a5a0bcf-ec93-4ddc-b6f4-1253e07f6351)!  note See the reference for more information about projects lifecycle management. ","version":"Next","tagName":"h2"},{"title":"Add a cloud region to the project​","type":1,"pageTitle":"3. Project and Cloud Region Creation","url":"/docs/console/guides/fuji-node/project-region#add-a-cloud-region-to-the-project","content":"Add a cloud region of your choice to the project with the console region add (list of supported regions) tip You need the name of the cloud credentials secret created in step 1. Command ash console region add '{ cloudProvider: azure, region: francecentral, cloudCredentialsSecretId: my-az-creds }'  Output Cloud region successfully added to project 'fuji-node-guide'! +---------------------+-------------+-----------------------+------------------+-----------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +=====================+=============+=======================+==================+===========+ | azure/francecentral | 3975...8ab1 | f4f4...c596 | 2023-12-21T11:18 | Available | +---------------------+-------------+-----------------------+------------------+-----------+  note See the reference for more information about cloud regions lifecycle management. ","version":"Next","tagName":"h2"},{"title":"5. Teardown","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/teardown","content":"","keywords":"","version":"Next"},{"title":"Delete the resource​","type":1,"pageTitle":"5. Teardown","url":"/docs/console/guides/fuji-node/teardown#delete-the-resource","content":"Command ash console resource delete -y avalanche-node-01  Wait for the resource to be deleted (removed from the list): Command ash console resource list  Output Resources of project 'fuji-node-guide': +---------------+-------------+------+-----------------+------+------------+--------+-------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===============+=============+======+=================+======+============+========+===================+ +---------------+-------------+------+-----------------+------+------------+--------+-------------------+  ","version":"Next","tagName":"h2"},{"title":"Delete the cloud region​","type":1,"pageTitle":"5. Teardown","url":"/docs/console/guides/fuji-node/teardown#delete-the-cloud-region","content":"Command ash console region remove -y azure/francecentral  Wait for the cloud region to be removed (removed from the list): Command ash console region list  Output Cloud regions of project 'fuji-node-guide': +--------------+-----------+-----------------------+------------+--------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +==============+===========+=======================+============+========+ +--------------+-----------+-----------------------+------------+--------+  ","version":"Next","tagName":"h2"},{"title":"Delete the nodeId secret​","type":1,"pageTitle":"5. Teardown","url":"/docs/console/guides/fuji-node/teardown#delete-the-nodeid-secret","content":"Command ash console secret delete -y fuji-node-id-01  ","version":"Next","tagName":"h2"},{"title":"3. Project and Cloud Region Creation","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/project-region","content":"","keywords":"","version":"Next"},{"title":"Create a project​","type":1,"pageTitle":"3. Project and Cloud Region Creation","url":"/docs/console/guides/local-network/project-region#create-a-project","content":"Create a project on the local network for this guide with the console project create command: Command ash console project create '{name: devnet-guide, network: local}'  Output Project created successfully! +--------------+-------------+---------+---------------+------------------+ | Project name | Project ID | Network | Cloud regions | Created at | +==============+=============+=========+===============+==================+ | devnet-guide | ac00...6673 | Local | | 2023-12-21T15:55 | +--------------+-------------+---------+---------------+------------------+ Switched to project 'devnet-guide' (ac00583b-7b98-4a3a-9a43-2402f8796673)!  note See the reference for more information about projects lifecycle management. ","version":"Next","tagName":"h2"},{"title":"Add a cloud region to the project​","type":1,"pageTitle":"3. Project and Cloud Region Creation","url":"/docs/console/guides/local-network/project-region#add-a-cloud-region-to-the-project","content":"Add a cloud region of your choice to the project with the console region add (list of supported regions) Note: You need the name of the cloud credentials secret created in step 1. Command ash console region add '{ cloudProvider: aws, region: us-east-1, cloudCredentialsSecretId: my-aws-creds }'  Output Cloud region successfully added to project 'devnet-guide'! +---------------+-------------+-----------------------+------------------+-----------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +===============+=============+=======================+==================+===========+ | aws/us-east-1 | 634d...c9d9 | 2a29...fde2 | 2023-12-21T15:56 | Available | +---------------+-------------+-----------------------+------------------+-----------+  note See the reference for more information about cloud regions lifecycle management. ","version":"Next","tagName":"h2"},{"title":"The Ash Protocol","type":0,"sectionRef":"#","url":"/docs/protocol/","content":"The Ash Protocol Ash is a decentralized VaaS (Validator as a Service) protocol for Avalanche. Ash lowers the financial and technical entry costs to the Subnets ecosystem for all the participants: Subnet owners that can benefit from Ash's decentralized network of node operatorsRetail users that can get involved whatever their capital or technical skillsNode operators that can rely on enterprise-grade tooling and leverage Ash's capital The protocol is open and transparent: governance and operations are tracked on-chain. Thanks to Ash, Avalanche Subnets can reach a higher degree of decentralization. info Ash is taking a smooth path towards decentralization. See the protocol roadmap for more information.","keywords":"","version":"Next"},{"title":"Glossary","type":0,"sectionRef":"#","url":"/docs/console/glossary","content":"","keywords":"","version":"Next"},{"title":"User​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#user","content":"A User who interacts with the Ash Console, either through the Console Website, the Ash CLI, or the Console REST API. Every Console entity is owned by a single User. User properties id: UUID4 username: str firstname: str lastname: str email: str  ","version":"Next","tagName":"h2"},{"title":"Organization​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#organization","content":"note Not implemented in alpha A group of Users that collaborate on the same Projects. The owner of the Organization can add other Users and give them Roles. ","version":"Next","tagName":"h2"},{"title":"Role​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#role","content":"note Not implemented in alpha A set of permissions granted to Users that have this role. ","version":"Next","tagName":"h2"},{"title":"Operation​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#operation","content":"Any User query made on the Console triggers an Operation that is logged. Examples of operation types: ProjectAPI.create_project, SecretAPI.get_all_secrets An Operation can result in success or failure. Operation properties id: UUID4 owner_id: UUID4 # The user who performed the operation logged: datetime target_type: str target_id: UUID4 | None # Can be None if the operation is not related to a specific item target_value: str | None operation_type: str args: List[str] kwargs: Dict[str, str] result: OperationResult error_msg: str | None  ","version":"Next","tagName":"h2"},{"title":"Secret​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#secret","content":"A Secret is an encrypted piece of information which can be used in: Resources configuration keysCloudRegions creationA Secret can be one of: generic: contains any arbitrary valuewallet: contains a wallet's private key, used to sign transactionsnodeId: contains a NodeID with its related TLS certificate and key, used to spin up an Avalanche nodeawsCredentials: contains AWS credentials, used to manage resources in an AWS cloud regionazureCredentials: contains Azure credentials, used to manage resources in an Azure cloud regiongoogleCredentials: contains GCP credentials, used to manage resources in a Google cloud regionlxdCredentials (Not implemented in alpha) A Secret can be used across Projects by multiple Resources, and CloudRegions. Secret properties id: UUID4 owner_id: UUID4 name: str secret_type: SecretType created: datetime used_by: Dict[UUID4, str] # (UUID =&gt; EntityType) ... # extra properties based on type  ","version":"Next","tagName":"h2"},{"title":"Project​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#project","content":"A Project managed by a User (later an Organization). It is a logical set of Resources that are deployed in CloudRegions. A User can have access to multiple projects. A Project is linked to a (blockchain) Network: local, testnet, or mainnet. All the Resources created in the project will automatically be configured to belong to this Network. Project properties id: UUID4 owner_id: UUID4 name: str network: Network created: datetime cloud_regions_ids: Dict[str, UUID4] resources_ids: Dict[str, UUID4] ...  ","version":"Next","tagName":"h2"},{"title":"Cloud Region​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#cloud-region","content":"A CloudRegion is managed by a User (later an Organization) inside a Project. A CloudRegion is created from a AwsCredentials, AzureCredentials orGcpCredentials A CloudRegion's format is always cloudprovider/region. A region can be one of: azure/* azure/australiacentralazure/australiacentral2azure/australiaeastazure/australiasoutheastazure/brazilsouthazure/canadacentralazure/canadaeastazure/centralindiaazure/centralusazure/eastasiaazure/eastusazure/eastus2azure/francecentralazure/francesouthazure/germanynorthazure/germanywestcentralazure/japaneastazure/japanwestazure/koreacentralazure/koreasouthazure/northcentralusazure/northeuropeazure/norwayeastazure/norwaywestazure/southafricanorthazure/southafricawestazure/southcentralusazure/southeastasiaazure/southindiaazure/swedencentralazure/switzerlandnorthazure/switzerlandwestazure/uaecentralazure/uaenorthazure/uksouthazure/ukwestazure/westcentralusazure/westeuropeazure/westindiaazure/westus aws/* aws/af-south-1aws/ap-east-1aws/ap-northeast-1aws/ap-northeast-2aws/ap-northeast-3aws/ap-south-1aws/ap-south-2aws/ap-southeast-1aws/ap-southeast-2aws/ap-southeast-3aws/ap-southeast-4aws/ca-central-1aws/eu-central-1aws/eu-central-2aws/eu-north-1aws/eu-south-1aws/eu-south-2aws/eu-west-1aws/eu-west-2aws/eu-west-3aws/me-central-1aws/me-south-1aws/sa-east-1aws/us-east-1aws/us-east-2aws/us-west-1aws/us-west-2 google/* google/asia-east1google/asia-east2google/asia-northeast1google/asia-northeast2google/asia-northeast3google/asia-south1google/asia-southeast1google/asia-southeast2google/australia-southeast1google/europe-central2google/europe-north1google/europe-west1google/europe-west2google/europe-west3google/europe-west4google/europe-west6google/northamerica-northeast1google/southamerica-east1google/us-central1google/us-east1google/us-east4google/us-west1google/us-west2google/us-west3google/us-west4 A CloudRegion belongs to only one project. CloudRegion properties id: UUID4 owner_id: UUID4 project_id: UUID4 created: datetime cloud_provider: CloudProvider region: Region cloud_credentials_secret_id: UUID4 status: CloudRegionStatus  ","version":"Next","tagName":"h2"},{"title":"Resource​","type":1,"pageTitle":"Glossary","url":"/docs/console/glossary#resource","content":"A Resource is managed by a User (later an Organization) inside a Project and in a CloudRegion. A Resource can be: An avalancheNodeAn avalancheSubnetAn avalancheFaucet (Not implemented in alpha)A blockExplorer (Not implemented in alpha)A monitoringStack (Not implemented in alpha) A Resource belongs to only one Project and one CloudRegion. Resource properties id: UUID4 owner_id: UUID4 project_id: UUID4 created: datetime resource_type: ResourceType cloud_region_id: UUID4 ... # extra properties based on type  ","version":"Next","tagName":"h2"},{"title":"Ash for Node Operators - Overview","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-node-operators/overview","content":"","keywords":"","version":"Next"},{"title":"Application for the Ash Subnet​","type":1,"pageTitle":"Ash for Node Operators - Overview","url":"/docs/protocol/ash-for-node-operators/overview#application-for-the-ash-subnet","content":"info This feature will be available in Ash V3. ","version":"Next","tagName":"h2"},{"title":"Ash node operating​","type":1,"pageTitle":"Ash for Node Operators - Overview","url":"/docs/protocol/ash-for-node-operators/overview#ash-node-operating","content":"info This feature will be available in Ash V3. ","version":"Next","tagName":"h2"},{"title":"6. Teardown","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/teardown","content":"","keywords":"","version":"Next"},{"title":"Delete the resources​","type":1,"pageTitle":"6. Teardown","url":"/docs/console/guides/local-network/teardown#delete-the-resources","content":"Command for i in {1..5}; do ash console resource delete -y local-node-0$i done # If you created a Subnet ash console resource delete -y ash-subnet  Wait for the resources to be deleted (removed from the list): Command ash console resource list  Output Resources of project 'devnet-guide': +---------------+-------------+------+-----------------+------+------------+--------+-------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===============+=============+======+=================+======+============+========+===================+ +---------------+-------------+------+-----------------+------+------------+--------+-------------------+  ","version":"Next","tagName":"h2"},{"title":"Delete the cloud region​","type":1,"pageTitle":"6. Teardown","url":"/docs/console/guides/local-network/teardown#delete-the-cloud-region","content":"Command ash console region remove -y aws/us-east-1  Wait for the cloud region to be removed (removed from the list): Command ash console region list  Output Cloud regions of project 'devnet-guide': +--------------+-----------+-----------------------+------------+--------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +==============+===========+=======================+============+========+ +--------------+-----------+-----------------------+------------+--------+  ","version":"Next","tagName":"h2"},{"title":"Delete the nodeId secrets​","type":1,"pageTitle":"6. Teardown","url":"/docs/console/guides/local-network/teardown#delete-the-nodeid-secrets","content":"Command for i in {1..5}; do ash console secret delete -y local-node-id-0$i done # If you created a Subnet ash console secret delete -y ewoq-key  note You can also keep the nodeId secrets for later use as they will be used for all devnet (local) networks. ","version":"Next","tagName":"h2"},{"title":"Delete the project​","type":1,"pageTitle":"6. Teardown","url":"/docs/console/guides/local-network/teardown#delete-the-project","content":"Command ash console project delete -y devnet-guide  ","version":"Next","tagName":"h2"},{"title":"Ash for Retail Users - Overview","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-retail-users/overview","content":"","keywords":"","version":"Next"},{"title":"Liquid staking​","type":1,"pageTitle":"Ash for Retail Users - Overview","url":"/docs/protocol/ash-for-retail-users/overview#liquid-staking","content":"info This feature will be available in Ash V2. ","version":"Next","tagName":"h2"},{"title":"Gauge weight voting​","type":1,"pageTitle":"Ash for Retail Users - Overview","url":"/docs/protocol/ash-for-retail-users/overview#gauge-weight-voting","content":"info This feature will be available in Ash V2. ","version":"Next","tagName":"h2"},{"title":"Delet the project​","type":1,"pageTitle":"5. Teardown","url":"/docs/console/guides/fuji-node/teardown#delet-the-project","content":"Command ash console project delete -y fuji-node-guide  ","version":"Next","tagName":"h2"},{"title":"Professional Services","type":0,"sectionRef":"#","url":"/docs/professional-services/","content":"","keywords":"","version":"Next"},{"title":"Our team expertise​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#our-team-expertise","content":"Why you can trust our team: ","version":"Next","tagName":"h2"},{"title":"Distributed systems architecture​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#distributed-systems-architecture","content":"Gauthier and Léo, our technical founders, have years of experience operating France's biggest data clusters based on open-source technologies. They have deep knowledge of distributed systems architecture challenges and are experts in setting up highly available and scalable infrastructures. ","version":"Next","tagName":"h3"},{"title":"Avalanche knowledge​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#avalanche-knowledge","content":"Open-source contributions​ Our team maintains multiple open-source tools tailored for Avalanche and is actively contributing to other projects in the Avalanche ecosystem. See examples of the team contributions: Ava Labs repositories Node operating​ Ash is operating multiple Avalanche nodes (on the mainnet and Fuji testnet), and taking part in decentralized RPC networks such as Lava. ","version":"Next","tagName":"h3"},{"title":"Education​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#education","content":"Gauthier has been a distributed systems teacher at some of the top French engineering schools (CentraleSupélec, ECE Paris, DSTI) for more than 3 years. ","version":"Next","tagName":"h3"},{"title":"How we can help you​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#how-we-can-help-you","content":"Our team can offer you the following services: ","version":"Next","tagName":"h2"},{"title":"Avalanche nodes setup and maintenance​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#avalanche-nodes-setup-and-maintenance","content":"Ash open-source tools and premium Console plans can significantly reduce the setup and maintenance cost of your Avalanche nodes. Our team can help you with the initial setup and provide you with a maintenance plan tailored to your needs. ","version":"Next","tagName":"h3"},{"title":"Additional features for the Ash tools​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#additional-features-for-the-ash-tools","content":"As the maintainers of the Ash open-source tools and Console, we can develop additional features for any need that is not already covered. This could be: Better support for your cloud providerSupport for a new blockchain runtime (VM)Integration with your monitoring systemEtc. ","version":"Next","tagName":"h3"},{"title":"Subnet (Appchain) design and development​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#subnet-appchain-design-and-development","content":"Avalanche Subnets allow any project to create its dedicated blockchain (or &quot;Appchain&quot;) with their own set of rules and validators. Subnets can run custom software while benefiting from the Avalanche consensus layer. Our team can help you take the best decisions regarding your Subnet design and follow you through the development process, from devnet to mainnet. ","version":"Next","tagName":"h3"},{"title":"Private blockchain network design and setup​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#private-blockchain-network-design-and-setup","content":"The flexibility of Avalanche makes it the perfect tool to set up private blockchain networks with your partners. Each use case can be run on its own Subnet, with its own set of rules and runtime. Our team can help you design and setup your private blockchain network, and train your team to operate it. ","version":"Next","tagName":"h3"},{"title":"Training and education​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#training-and-education","content":"We can organize training sessions for your team to get them up to speed with Avalanche and its ecosystem. ","version":"Next","tagName":"h3"},{"title":"Get in touch​","type":1,"pageTitle":"Professional Services","url":"/docs/professional-services/#get-in-touch","content":"Book a call to discuss your needs and how we can help you. DM us on Twitter or send us an email if you have any question. ","version":"Next","tagName":"h2"},{"title":"Possible Architectures for Subnets","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-subnet-owners/possible-architectures","content":"Possible Architectures for Subnets info 🚧 Page under construction","keywords":"","version":"Next"},{"title":"2. Node ID / BLS keys Secrets Generation","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/node-ids","content":"","keywords":"","version":"Next"},{"title":"Fetch the node IDs blueprint​","type":1,"pageTitle":"2. Node ID / BLS keys Secrets Generation","url":"/docs/console/guides/local-network/node-ids#fetch-the-node-ids-blueprint","content":"info Learn more about blueprints in the Console Blueprints reference. We will use the local-node-ids.yml blueprint to create the node ID secrets for the 5 nodes of our Avalanche devnet. If not already done, create a folder for this guide and navigate to it: mkdir -p ash-console-guides/devnet-network cd ash-console-guides/devnet-network Fetch the blueprint from the ash-rs repository: curl -sSL https://raw.githubusercontent.com/AshAvalanche/ash-rs/ash-console-alpha/crates/ash_cli/examples/console/blueprint/local-node-ids.yml -o local-node-ids.yml Take a look at the blueprint. You will see that it defines 5 secrets of type nodeId with their TLS keys and certificates: Command cat local-node-ids.yml Output secrets: - name: local-node-id-01 secretType: nodeId nodeId: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg nodeCert: LS0tLS... nodeKey: LS0tLS... nodeBlsKey: U2fcxy... # ...  ","version":"Next","tagName":"h2"},{"title":"Create the node ID secrets​","type":1,"pageTitle":"2. Node ID / BLS keys Secrets Generation","url":"/docs/console/guides/local-network/node-ids#create-the-node-id-secrets","content":"Apply the blueprint with the console blueprint apply command to create the node ID secrets: Command ash console blueprint apply ./local-node-ids.yml  Confirmation prompt Blueprint summary Secrets 5 to create: local-node-id-01, local-node-id-02, local-node-id-03, local-node-id-04, local-node-id-05 0 to update: Projects 0 to create: 0 to update: ? Are you sure you want to apply this blueprint? (y/N) [This action is irreversible!]  After the blueprint is done applying, we can then confirm that the secrets have been created with the console secret list command: Command ash console secret list  Output +------------------+-------------+----------------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +==================+=============+================+==================+=========+ | local-node-id-01 | 7738...a900 | NodeId | 2023-12-21T15:53 | 0 | +------------------+-------------+----------------+------------------+---------+ | local-node-id-02 | d577...a0bd | NodeId | 2023-12-21T15:54 | 0 | +------------------+-------------+----------------+------------------+---------+ | local-node-id-03 | 6cf7...db9d | NodeId | 2023-12-21T15:54 | 0 | +------------------+-------------+----------------+------------------+---------+ | local-node-id-04 | 7221...fa0c | NodeId | 2023-12-21T15:54 | 0 | +------------------+-------------+----------------+------------------+---------+ | local-node-id-05 | 36a1...59b8 | NodeId | 2023-12-21T15:54 | 0 | +------------------+-------------+----------------+------------------+---------+ | my-aws-creds | 2a29...fde2 | AwsCredentials | 2023-12-21T15:55 | 0 | +------------------+-------------+----------------+------------------+---------+  note See the reference for more information about secrets lifecycle management. ","version":"Next","tagName":"h2"},{"title":"The Ash Subnet - Overview","type":0,"sectionRef":"#","url":"/docs/protocol/ash-subnet/overview","content":"The Ash Subnet - Overview info This feature will be available in Ash V3.","keywords":"","version":"Next"},{"title":"4. Avalanche Nodes Deployment","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/avalanche-nodes","content":"","keywords":"","version":"Next"},{"title":"Set shared configuration at the project level​","type":1,"pageTitle":"4. Avalanche Nodes Deployment","url":"/docs/console/guides/local-network/avalanche-nodes#set-shared-configuration-at-the-project-level","content":"It is common that resources of the same project share some configuration. For example, all the Avalanche nodes of our devnet will have the same AvalancheGo version. We will use the sharedResourceConfig field of the project to set this shared configuration: Command ash console project update devnet-guide '{ sharedResourceConfig: { avalancheNodeConfig: { avalanchego_version: 1.10.17 } } }'  info To see the sharedResourceConfig of a project, use the console project info command with the --json flag: Command ash console project info devnet-guide --json | jq Output { &quot;cloudRegionsIds&quot;: { &quot;aws/us-east-1&quot;: &quot;634d78b0-c8ba-44ac-a08b-5b27300ac9d9&quot; }, &quot;created&quot;: &quot;2023-12-21T15:55:06.285003&quot;, &quot;id&quot;: &quot;ac00583b-7b98-4a3a-9a43-2402f8796673&quot;, &quot;name&quot;: &quot;devnet-guide&quot;, &quot;network&quot;: &quot;local&quot;, &quot;ownerId&quot;: &quot;287090ee-7fae-4bd7-9263-d690959edc26&quot;, &quot;resourcesIds&quot;: {}, &quot;sharedResourceConfig&quot;: { &quot;avalancheNodeConfig&quot;: { &quot;avalanchego_version&quot;: &quot;1.10.17&quot; } } }  ","version":"Next","tagName":"h2"},{"title":"Bootstrap node creation​","type":1,"pageTitle":"4. Avalanche Nodes Deployment","url":"/docs/console/guides/local-network/avalanche-nodes#bootstrap-node-creation","content":"Gather the cloud region secret ID from the previous steps. Create the avalancheNode &quot;local-node-01&quot; resource with the console resource create command: Command ash console resource create '{ name: local-node-01, resourceType: avalancheNode, cloudRegionId: aws/us-east-1, nodeIdSecretId: local-node-id-01, size: medium, nodeConfig: { isBootstrapNode: true } }' Output Resource successfully created in project 'devnet-guide'! +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===================+=============+===============+=================+========+==================+=========+==========================+ | local-node-01 | 9419...6722 | AvalancheNode | 634d...c9d9 | Medium | 2023-12-21T16:01 | Pending | IP address | None | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------+ Note: See Resource sizes for available resource sizes. tip local-node-01 is the &quot;bootstrap&quot; node. It has a different configuration than the other nodes of the local Avalanche network. See the Create a resource for more information. ","version":"Next","tagName":"h2"},{"title":"Other nodes creation​","type":1,"pageTitle":"4. Avalanche Nodes Deployment","url":"/docs/console/guides/local-network/avalanche-nodes#other-nodes-creation","content":"Create the 4 other avalancheNode resources with the console resource create command: Command for i in {2..5}; do ash console resource create &quot;{ name: local-node-0$i, resourceType: avalancheNode, cloudRegionId: aws/us-east-1, nodeIdSecretId: local-node-id-0$i, size: medium, nodeConfig: { isBootstrapNode: false }, nodeBootstrapResourceId: local-node-01 }&quot; done  caution The above command takes about 1 minute to complete.Providing a nodeBootstrapResourceId is only supported for resources created in the same cloud region as the bootstrap node. ","version":"Next","tagName":"h2"},{"title":"Health​","type":1,"pageTitle":"4. Avalanche Nodes Deployment","url":"/docs/console/guides/local-network/avalanche-nodes#health","content":"It will take a few minutes before the local network is Bootstrapped and Healthy. You can get its updated status with the console resource info command: Command ash console resource info local-node-01 Output Resource 'local-node-01' of project 'devnet-guide': +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===================+=============+===============+=================+========+==================+=========+================================+ | local-node-01 | 9419...6722 | AvalancheNode | 634d...c9d9 | Medium | 2023-12-21T16:01 | Running | IP address | 3.210.183.166 | | | | | | | | | Running | true | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------------+ Once a node is Running, you can also query the node info endpoint with the avalanche node info command: Command ash avalanche node info -n 3.210.183.166 Output Node '3.210.183.166:9650': ID: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg Network: local Public IP: 3.210.183.166 Staking port: 9651 Versions: AvalancheGo: avalanche/1.10.17 Database: v1.4.5 RPC Protocol: 28 Git commit: 145dfb0dc179d688f45ad44067ef6f9821148b36 VMs: AvalancheVM: v1.10.17 Coreth: v0.12.5 PlatformVM: v1.10.17 Subnet VMs: [] Uptime: Rewarding stake: 100% Weighted average: 100% note Your node IP address will be different. Your local Avalanche network is now up and running! note See the reference for more information about resources lifecycle management. ","version":"Next","tagName":"h2"},{"title":"Authentication","type":0,"sectionRef":"#","url":"/docs/console/reference/authentication","content":"Authentication caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. Before interacting with the Ash Console, you need to authenticate yourself. The authentication flow depends on the tool you are using (Ash Console Web UI, Ash CLI, Ash Console API). info During the Console alpha, user accounts are created by the Ash team. If you want to get access to the Console alpha, please contact us! Register in advanceBook a callDM us on TwitterJoin our Discord Authenticate using the Ash CLIAuthenticate using the Ash Console API To authenticate, run: Command ash console auth login The CLI will prompt you an URL and a code to enter in the browser: Prompt Logging in to the Ash Console at https://api.console.ash.center Please open the following URL in your browser: https://auth.console.ash.center/realms/jeeo/device and enter the code: CGAX-GSVT Once you have provided the code and authenticated yourself, the CLI will display the following message: Login successful! The credentials have been stored in your device keyring. note The Console session lasts at most 24 hours (and 10 hours in case of inactivity). After that, you will need to login again. When trying to use the Console after the session has expired, you will get the following error: Console OAuth2 error: failed to request OAuth2 token: Server returned error response ","keywords":"","version":"Next"},{"title":"Incentivized Testnet","type":0,"sectionRef":"#","url":"/docs/protocol/testnet","content":"Incentivized Testnet info More informations to come soon. Stay tuned by following @ash_avax 🐦!","keywords":"","version":"Next"},{"title":"Ash Governance - Overview","type":0,"sectionRef":"#","url":"/docs/protocol/governance/overview","content":"Ash Governance - Overview info 🚧 Page under construction","keywords":"","version":"Next"},{"title":"Ash for Subnet Owners - Overview","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-subnet-owners/overview","content":"","keywords":"","version":"Next"},{"title":"Validation renting​","type":1,"pageTitle":"Ash for Subnet Owners - Overview","url":"/docs/protocol/ash-for-subnet-owners/overview#validation-renting","content":"Subnet owners can rent validation from Ash nodes for a fraction of the price needed to bootstrap a validator. Instead of operating validator nodes themselves, Subnet owners benefit from the expertise of the Ash team (and the Ash network of node operators in V3). The rent is paid monthly in AVAX, native tokens, or a combination of both. The protocol guarantees that Subnets are validated by a robust, up-to-date set of nodes. Subnet owners are freed from the burden of running their own infrastructure and can instead focus on building their projects' core. Start using the service ","version":"Next","tagName":"h2"},{"title":"Voted validation​","type":1,"pageTitle":"Ash for Subnet Owners - Overview","url":"/docs/protocol/ash-for-subnet-owners/overview#voted-validation","content":"In Ash V2, liquid stakers will be able to participate in the protocol's governance. The main governance component is the allocation of the protocol's validating power between Subnets. Node operator rewards are redistributed to liquid-stakers. With attractive incentives, a Subnet will naturally get more decentralized because it will appeal to more users. Discover how to maximize voted validation ","version":"Next","tagName":"h2"},{"title":"Roadmap","type":0,"sectionRef":"#","url":"/docs/protocol/roadmap","content":"Roadmap info 🚧 Page under construction","keywords":"","version":"Next"},{"title":"Validation Renting","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-subnet-owners/validator-node-renting","content":"Validation Renting note A Subnet should not rely 100% on Ash nodes for validation. The Ash team proposes a list of possible architectures for Subnets. info 🚧 Page under construction","keywords":"","version":"Next"},{"title":"Voted Validation","type":0,"sectionRef":"#","url":"/docs/protocol/ash-for-subnet-owners/voted-validation","content":"Voted Validation info This feature will be available in Ash V2.","keywords":"","version":"Next"},{"title":"Ash Toolkit","type":0,"sectionRef":"#","url":"/docs/toolkit/","content":"","keywords":"","version":"Next"},{"title":"Ansible Avalanche Collection​","type":1,"pageTitle":"Ash Toolkit","url":"/docs/toolkit/#ansible-avalanche-collection","content":"An Ansible collection to manage Avalanche nodes, Subnets, blockchains and more! 🤓 Introduction\t🚀 Get started\t🐙 GitHub repository ","version":"Next","tagName":"h2"},{"title":"Ash CLI​","type":1,"pageTitle":"Ash Toolkit","url":"/docs/toolkit/#ash-cli","content":"A CLI to empower any Avalanche enthusiast, from retail users to node operators and Subnet developers! 🤓 Introduction\t📦 Installation\t🚀 Get started\t🐙 GitHub repository ","version":"Next","tagName":"h2"},{"title":"Ash Rust SDK​","type":1,"pageTitle":"Ash Toolkit","url":"/docs/toolkit/#ash-rust-sdk","content":"The Rust SDK used under the hood by the Ash CLI. You can use it to build your own tools! ⚙️ Documentation on docs.rs\t🐙 GitHub repository ","version":"Next","tagName":"h2"},{"title":"Cloud Region Management","type":0,"sectionRef":"#","url":"/docs/console/reference/cloud-region-management","content":"","keywords":"","version":"Next"},{"title":"List a project's cloud regions​","type":1,"pageTitle":"Cloud Region Management","url":"/docs/console/reference/cloud-region-management#list-a-projects-cloud-regions","content":"Using the Ash CLIUsing the Ash Console API tip The Ash CLI displays information in a table format by default. To get a more detailed output (or for scripting), use the --json flag. To list secrets you have access to, run: Command ash console region list Output Cloud regions of project 'f3cbcada-8ba7-4ce8-b0ef-e4874b24da2b': +-----------+----------------+--------------+-----------------------+------------+ | Region ID | Cloud provider | Cloud region | Cloud creds secret ID | Created at | +===========+================+==============+=======================+============+ +-----------+----------------+--------------+-----------------------+------------+  ","version":"Next","tagName":"h2"},{"title":"Add a cloud region to a project​","type":1,"pageTitle":"Cloud Region Management","url":"/docs/console/reference/cloud-region-management#add-a-cloud-region-to-a-project","content":"note Prior to adding a cloud region, you need to create a cloud credentials secret. See Cloud Credentials for how to create appropriate credentials for each cloud provider. tip You can also provide the cloud credentials secret name instead of its ID in the cloudCredentialsSecretId field. Using the Ash CLIUsing the Ash Console API To add a cloud region to the current project, use the region add command and provide the required secret properties as JSON: Command ash console region add '{cloudProvider: aws, region: us-east-1, cloudCredentialsSecretId: 4447cba1-e43c-45a4-8a9d-dbebef81bac1}' Output Cloud region successfully added to project 'f3cbcada-8ba7-4ce8-b0ef-e4874b24da2b'! +--------------------------------------+----------------+--------------+-----------------------+------------------+ | Region ID | Cloud provider | Cloud region | Cloud creds secret ID | Created at | +======================================+================+==============+=======================+==================+ | 0c102d85-4e75-414d-abfe-b0679ab0adc7 | aws | us-east-1 | 4447...bac1 | 2023-11-07T16:52 | +--------------------------------------+----------------+--------------+-----------------------+------------------+ tip Use ash console region available to get the list of regions available for each cloud provider. ","version":"Next","tagName":"h2"},{"title":"Remove a cloud region from a project​","type":1,"pageTitle":"Cloud Region Management","url":"/docs/console/reference/cloud-region-management#remove-a-cloud-region-from-a-project","content":"caution Removing a region from a project will recursively delete all the resources that belong to it! info Removing a cloud region is not instantaneous. The cloud region will be in status destroying for a few seconds/minutes before it is completely removed. Using the Ash CLIUsing the Ash Console API The CLI will ask for confirmation before deleting the secret. To skip the confirmation, use the --yes flag. Command ash console region remove aws/us-east-1 Output &gt; Are you sure you want to remove this region? Yes Cloud region removed successfully!  ","version":"Next","tagName":"h2"},{"title":"Ash Litepaper","type":0,"sectionRef":"#","url":"/docs/litepaper/","content":"","keywords":"","version":"Next"},{"title":"Abstract​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#abstract","content":"Ash is a decentralized Validator as a Service (VaaS) protocol that makes Avalanche Subnets 1 more accessible and decentralized. The Ash protocol operates Avalanche nodes 3, validates Avalanche Subnets, and gives retail users easy access to the Subnets ecosystem.Ash is built on top of existing liquid staking protocols to provide optimal capital efficiency. ","version":"Next","tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#context","content":"Avalanche allows any user to launch and operate its own blockchain network, with a customizable set of rules, through its scaling solution called “Subnets” 1. Each Subnet is independent and can scale infinitely as it is not constrained by network resources and competition with other apps. Use cases for Subnets range from Web3 gaming (Crabada, DeFi Kingdoms) to institutions (Deloitte, Intain). We believe that Subnets currently have some obstacles preventing wide adoption. Ash aims at reducing those. ","version":"Next","tagName":"h2"},{"title":"Problematic​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#problematic","content":"The entry costs (financial and technical) to the Subnet ecosystem are very high for all the participants: Subnet owners 2, retail users that want to get involved, and node operators. ","version":"Next","tagName":"h2"},{"title":"Financial entry cost​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#financial-entry-cost","content":"Running a validator node 4 on the Avalanche Mainnet requires staking 2,000 AVAX. This issue is partially solved by liquid staking protocols such as BENQI Ignite and GoGoPool which offer to match a portion of the stake amount. For Subnet owners​ For stability reasons our recommendation is to have at least 5 full validators on your Subnet. - Avalanche documentation At $30 per AVAX, a Subnet owner needs to stake 10,000 AVAX, for a total cost $300,000, to be able run blockchains on a 5-nodes Subnet. Note: This calculation does not include the hosting price for the validator nodes’ 4 servers on cloud or on-premise infrastructure. For node operators​ In addition to the 2,000 AVAX required by the Mainnet, Subnet owners can require staking extra tokens to participate in their Subnets' validation. That financially limits potential node operators to companies and a few privileged individuals. ","version":"Next","tagName":"h3"},{"title":"Technical entry cost​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#technical-entry-cost","content":"For Subnet owners and node operators​ Deploying and maintaining a Subnet and Avalanche nodes 3 is technically challenging and requires time and skills that a team may not have. The Ash team experienced it first-hand at the Avalanche Summit Hackathon where most of the technical discussions with other teams were about node/Subnet operating issues. ","version":"Next","tagName":"h3"},{"title":"Subnet ecosystem accessibility​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#subnet-ecosystem-accessibility","content":"For retail users​ To participate in Subnets validation, a user has to operate Avalanche node(s) 3, therefore becoming a node operator and facing the same challenges. ","version":"Next","tagName":"h3"},{"title":"Goals​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#goals","content":"The Ash protocol aims at making Avalanche Subnets more accessible and decentralized by providing a decentralized VaaS 5 for Avalanche. Fig.1 - Ash overview Ash allows retail users to get involved in the Avalanche Subnets ecosystem without having to operate a node. Stakers crowdfund new validator nodes and vote to allocate the protocol validation power between Subnets. Ash gives Avalanche projects affordable access to a robust decentralized infrastructure to validate their Subnets. The protocol operates the validator nodes 4, and developers can focus on the heart of their product. Established liquid staking protocols are used to fund new Ash validator nodes. These protocols benefit from Ash success. The Ash protocol relies on third-party node operators to ensure the Subnets' decentralization, providing enteprise-grade software to ease node maintenance. ","version":"Next","tagName":"h2"},{"title":"Ash Demographics​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ash-demographics","content":"Fig.2 - Ash demographics The Ash protocol targets 3 user groups: Retail usersNode operatorsSubnet owners ","version":"Next","tagName":"h2"},{"title":"Ash for retail users​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ash-for-retail-users","content":"Node crowdfunding through staking​ Ash will feature multiple community pools in which retail users can stake 11 their AVAX. These pools are used to crowdfund new validator nodes 4 for the Ash protocol which will in turn increase the number of Subnets that can be validated. The Ash protocol takes care of swapping AVAX against Subnet native tokens to be used for staking. The Ash pools feature multiple types of rewards for stakers: AVAXASH tokenNative tokens from the validated SubnetsTokens from the underlying liquid staking protocol(s) AVAX​ Stakers receive AVAX from node validation rewards as they would by delegating their AVAX, but in a much more flexible way. ASH token​ Stakers receive ASH tokens emitted by the Ash protocol proportionally to the amount of AVAX they stake in the community pools. The ASH token can be staked to earn veASH and vote in the Ash DAO 7. Votes will determine which Subnets are validated by the Ash protocol and which node operators get AVAX delegation to spin up new validators. Note: See Tokenomics for more details on the ASH token. Native Subnets tokens​ Subnet owners can incentivize the validation of their Subnets by providing native token rewards to Avalanche nodes (leveraging features of the Banff upgrade). These tokens are redistributed to the Ash community pool stakers. Liquid Staking protocols tokens​ Ash will leverage existing liquid staking protocols like BENQI Ignite and GoGoPool (+ more to come!) to spin up the new validator nodes at a lower cost while benefiting from these protocols' native rewards. These rewards are redistributed to the pool stakers. ","version":"Next","tagName":"h3"},{"title":"Ash for node operators​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ash-for-node-operators","content":"Node operators can apply to operate Ash nodes and validate Subnets for the protocol. If a node operator is elected by the DAO 7, its nodes will be allowed to join the Ash Subnet. The revenues generated are redistributed to the Ash community, and node operators are rewarded. This key feature of the protocol provides true decentralization of Subnet validation. Node operators can also benefit from the Ash team’s DevOps expertise by leveraging open-source tools provided by the Ash team. ","version":"Next","tagName":"h3"},{"title":"Ash for Subnet owners​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ash-for-subnet-owners","content":"Ash offers 2 validation services to Subnet owners: Validation rentingVoted validation by the protocol Validation renting​ Subnet owners can rent validation from Ash nodes for a fraction of the price needed to bootstrap a validator. Instead of operating validator nodes 4 themselves, Subnet owners benefit from the expertise of the Ash team. The rent is paid monthly in AVAX or stablecoins. The protocol guarantees that Subnets are validated by a robust, up-to-date set of nodes. Subnet owners are freed from the burden of running their own infrastructure and can instead focus on building their projects' core. Moreover, paying rent in stablecoins helps to forecast the validation costs upfront. Voted validation​ Ash stakers 6 can participate in the protocol's governance. The main governance component is the allocation of the protocol's validating power between Subnets. Node operator rewards are redistributed to stakers. With attractive incentives, a Subnet will naturally get more decentralized because it will appeal to more users. ","version":"Next","tagName":"h3"},{"title":"Technical Details​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#technical-details","content":"","version":"Next","tagName":"h2"},{"title":"Overall Architecture​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#overall-architecture","content":"The following schema represents the target protocol architecture. All features will not be available in the first release (see Protocol evolution towards decentralization). Fig.3 - Ash protocol architecture Ash validator nodes​ Each Ash validator node 4 offers “Subnet slots” for renting. The number of slots available on a node is determined by its hardware characteristics. A rented slot corresponds to a blockchain VM 8 running on the node. The Ash team will conduct large-scale benchmarking of blockchain VMs performances to determine the resources comprised within a Subnet slot. Validator nodes are operated by the Ash team and third-party node operators (elected by the DAO 7). Ash Subnet​ The Ash Subnet will serve as a backbone for the protocol. DAO-voted node operators will have to validate the Ash Subnet. Its VM will push various metrics to public contracts to ensure Ash nodes' have proper resources (RAM and CPU), validated Subnets are well-distributed, etc. Ash smart contracts​ All transactions related to Subnet slots renting, staking, and DAO votes are tracked on-chain. The Ash protocol leverages the popularity and robustness of the Avalanche C-Chain 9 to host its smart contracts. It relies on trusted smart contract standards for its different building blocks: Subnet slots rentals are represented by ERC-721 NFTsThe staking contracts will take inspiration from industry standardsThe DAO will follow an established framework (most likely Aragon) Ash API​ The Ash API tracks all on-chain activity on both Avalanche C-Chain (renting contracts) and P-Chain 10 (Subnets/blockchains operations). It exposes the current state of the protocol: Validator nodes and Subnets statusSubnet slots rentalsLiquid staking pool size and DAO 7 votes The API will rely on secured open-source software that can generate ZK proofs of the data being served (most likely Apibara). The Ash web app and Ash validator nodes rely on the API. Ash web app​ Fig.4 - Web app PoC staking dashboard The Ash web app is the main entry point to interact with the protocol. Subnet owners use it to create, configure, validate, and monitor their Subnets/blockchains. Retail users use it to stake AVAX, participate in DAO votes, and claim rewards. Node operators use it to manage their validator nodes. ","version":"Next","tagName":"h3"},{"title":"Ansible Avalanche Collection​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ansible-avalanche-collection","content":"Ava Labs provides tools to bring up validator nodes 4 and create/manage Subnets (Avalanche Network Runner, Avalanche CLI, Avalanche Ops). Yet, at the time of writing, none of those are production-ready (according to their documentation). Relying on years of experience in DevOps best practices, the Ash team developed the Ansible Avalanche Collection. Using Ansible, the industry standard for IT automation, the collection allows developers to deploy and configure nodes, Subnets, and blockchains to their own infrastructure, whether on bare-metal machines or virtual machine instances from any cloud provider. There are multiple perks to using the Ansible Avalanche Collection, including: Reduce errors related to manual configurationsScale to hundreds of nodes seamlesslyUpdate or rollback the AvalancheGo version in a transparent fashionThe benefit of a production-ready configuration of AvalancheGo following the Filesystem Hierarchy Standard The Ansible Avalanche Collection is open-source and available on GitHub under the BSD-3 license. The Ash team is committed to open-source all the tools that will benefit Avalanche users and developers. The Avalanche Ansible Collection is part of our solution to reduce the technical cost related to deploying validator nodes 4, Subnets, and blockchains. ","version":"Next","tagName":"h3"},{"title":"Extra services​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#extra-services","content":"Ash provides additional tools to empower Subnet owners with a ready-to-use Subnet experience, including monitoring and other services. Node monitoring​ Fig.5 - Node monitoring with Grafana All the validating nodes of the Ash protocols are monitored using Grafana and Prometheus. Subnet owners have access to comprehensive dashboards with all the metrics they need to keep track of the nodes validating their Subnets. Ash can also provide additional blockchain-related metrics to Subnet owners. DNS / Load Balancers​ Ash will provide a unique DNS entry for Subnet owners (e.g.: mysubnet.ash.center). This entry will be served by multiple validators in a Load Balancing fashion. Subnet owners can focus on the heart of their project while Ash takes care of the accessibility of the Subnet. ","version":"Next","tagName":"h3"},{"title":"Protocol Evolution Towards Decentralization​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#protocol-evolution-towards-decentralization","content":"Building a truly decentralized protocol cannot be done overnight and we believe that it is more important to start with a rather centralized but robust protocol than to rush onto a broken “decentralized” protocol. The first Ash release will focus on building a reliable software layer for validator node 4 operating and offering the best possible experience to Subnet owners. The following features will be available in the subsequent releases of the protocol: Node crowdfunding through staking (V2)​ Users will be able to stake AVAX into the Ash community pools and be eligible for multiple rewards: AVAX staking rewards, Subnets rewards, ASH tokens and liquid staking tokens. DAO (V2)​ The Ash DAO 7 (Decentralized Autonomous Organization) will give ASH token owners the power to choose what Subnets are validated by the Ash protocol and how many nodes are validating each Subnet. Third-party node operators (V3)​ The Ash protocol will fund third-party node operators to spin-up new validator nodes. The Ash node operators will be elected by the DAO, following a model that will take strong inspiration from the Lido protocol on Ethereum. ","version":"Next","tagName":"h3"},{"title":"Tokenomics​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#tokenomics","content":"","version":"Next","tagName":"h2"},{"title":"ashAVAX Token​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ashavax-token","content":"ashAVAX is an ERC-20 token that represents AVAX staked within the Ash protocol. To receive rewards, a user has to lock its ashAVAX tokens for a minimum of 2 weeks. The longer the lock, the higher the rewards. ashAVAX tokens are minted upon AVAX deposited in the community pool at a 1:1 ratio. When AVAX are withdrawn from the community pool, ashAVAX are burned following the same 1:1 ratio. ","version":"Next","tagName":"h3"},{"title":"ASH Token​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#ash-token-1","content":"All users that are staking AVAX in the Ash community pool will receive ASH tokens as rewards. ASH is an ERC-20 token that can be staked to receive veASH tokens. veASH is used to vote in the DAO for: Choosing the allocation of the protocol validation power: which Subnets validated by the Ash validator nodes 4 and the number of nodes 3 allocated to each of themElecting the node operators that will spin up new validators using AVAX from the community pool A public sale will occur after the launch of the protocol. ","version":"Next","tagName":"h3"},{"title":"Glossary​","type":1,"pageTitle":"Ash Litepaper","url":"/docs/litepaper/#glossary","content":"Subnet: An independent network with a customizable set of rules running on Avalanche. A Subnet hosts one or more blockchains, serving as a backend for the business logic. See Subnets Overview.Subnet owner: An organization, whether public or private, that uses a dedicated Avalanche Subnet. The Subnet hosts one or more blockchains, serving as a backend for the business logic.Avalanche node: A server, whether a virtual machine or a physical host, running the AvalancheGo program.Validator node: An Avalanche node validates one or multiple Subnets. A minimum amount of staked tokens is required for a node to become validator of a Subnet.VaaS (Validator as a Service): A product that offers to operate blockchain validator nodes on behalf of users, while they keep the ownership of their assets.Liquid Staking: Liquid staking protocols allow users to get staking rewards without locking tokens or maintaining staking infrastructure. Users of these protocols can deposit staking tokens and receive tradable liquid tokens in return. (from Lido FAQ)DAO: Decentralized Autonomous Organization. There is not a single entity controlling the organization, individuals from the community have their own decision-making power regarding their voting power.VM (Virtual Machine): A Virtual Machine (VM) defines the application-level logic of a blockchain. In technical terms, it specifies the blockchain’s state, state transition function, transactions, and the API through which users can interact with the blockchain. (from Avalanche Subnets docs)Avalanche C-Chain: The C-Chain is an implementation of the Ethereum Virtual Machine (EVM) that is part of Avalanche Primary Network. (from Avalanche docs)Avalanche P-Chain: The P-Chain is responsible for all validator and Subnet-level operations. The P-Chain API supports the creation of new blockchains and Subnets, the addition of validators to Subnets, staking operations, and other platform-level operations. (from Avalanche docs)Staking Staking is the process of locking up tokens to support a network while receiving a reward in return (rewards can be increased network utility, monetary compensation, etc.). (from Avalanche knowledge base) ","version":"Next","tagName":"h3"},{"title":"General Conditions of Use","type":0,"sectionRef":"#","url":"/docs/terms-and-conditions/general-conditions-of-use","content":"","keywords":"","version":"Next"},{"title":"1. Purpose​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#1-purpose","content":"The websites ash.center and console.ash.center (hereinafter the &quot;Websites&quot;) and the REST APIs api.console.ash.center and auth.console.ash.center (hereinafter the &quot;APIs&quot;), published by the company E36 Knots (hereinafter &quot;E36 Knots&quot;), are E36 Knots’s corporate website presenting in particular its solutions and services. The Websites and APIs provided under this agreement is classified as alpha software (hereinafter &quot;Alpha Software&quot;), meaning they are in the early stages of development and may contain bugs, errors, or other defects. They are not intended for general use, and its functionality may be incomplete or subject to change. Access, consultation, browsing and/or use of the Websites and APIs implies full acceptance of this document (hereinafter &quot;General Conditions of Use&quot;), which defines the terms of use of the Websites and APIs by any person accessing, consulting, browsing or using all or part of the Websites and APIs (hereinafter &quot;User&quot;). Therefore, before any use of the Websites and APIs, the User is invited to read these General Conditions of Use. If the User refuses all or part of any of the provisions of these General Conditions of Use, he/she is requested not to use the Websites and APIs and the services offered therein. These General Conditions of Use are accessible at any time on the Websites. Should you have any questions, you may directly contact E36 Knots by sending an email to contact@e36knots.com. ","version":"Next","tagName":"h2"},{"title":"2. Intellectual property rights​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#2-intellectual-property-rights","content":"The Websites and APIs and all their elements or which are made available to Users, in particular trademarks, logos, photographs, programs, source codes, data, databases, animated or non-animated images, sounds, drawings, graphics, videos or texts, downloadable resources from the Websites and APIs, layout, appearance, structure, as well as any other element not related to links towards third party websites, are the property of E36 Knots or are subject to a license granted in its favor by any owner of intellectual property rights. All these elements are subject to the provisions of French and international regulations applicable to intellectual property and, consequently, are protected against any use not authorized by the law or these General Conditions of Use under penalty – in the event of failure to do so – of legal proceedings. E36 Knots grants to each User a personal, non-exclusive and royalty-free license to use the Websites and APIs, for its own use and in the sole purpose of the operations authorized herein. Subject to these rights of use granted to the User by E36 Knots, use of the Websites and APIs does not imply any license or transfer of rights relating to the elements of the Websites and APIs to the User. In particular, any copy, reproduction, representation, adaptation, modification, distribution of all or part of the Websites and APIs as well as all or part of its content, by any process whatsoever and on any medium whatsoever is illegal, unless prior, express and written authorization of E36 Knots or the holder of intellectual property rights. Failure to comply with these stipulations, in particular for the purposes of commercial exploitation, may be subject to prosecution on the basis of an infringement action and/or an action for unfair competition and/or parasitism on the part of the holders of the rights in question. This is without prejudice to E36 Knots’s other rights, in particular the right to obtain compensation for damages. ","version":"Next","tagName":"h2"},{"title":"3. Websites, APIs and services access​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#3-websites-apis-and-services-access","content":"Access to the Websites and APIs is technically possible twenty-four (24) hours a day and seven (7) days per week, unless in case of force majeure, possible breakdowns or any operation of maintenance necessary for the good running of the Websites and APIs. The User acknowledges having the skills and means necessary to access and use the Websites and APIs and the services offered therein. In this respect, the User must have a computer or any other device with an Internet connection, the settings of which enable the proper functioning of the Websites and APIs and the services offered on them. In general, the User declares that he or she is aware of the risks associated with browsing websites and using online services and accepts them. In particular, the User acknowledges that the information that passes through or is stored there may be intercepted or altered independently of the will of E36 Knots. As such, it is strongly recommended that the User take all necessary precautions to protect himself/herself against the effects of hacking, in particular by adopting a secure and appropriate computer configuration of his/her computer, cell phone or any other device, for example by installing regularly updated virus detection software. ","version":"Next","tagName":"h2"},{"title":"4. Services offered on the Websites and APIs​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#4-services-offered-on-the-websites-and-apis","content":"","version":"Next","tagName":"h2"},{"title":"4.1. Conditions of access to the Websites and APIs's services​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#41-conditions-of-access-to-the-websites-and-apiss-services","content":"To benefit from all the services offered on the Websites and APIs, the User must: to be of legal age; to have the required capacity to benefit from the services; to use the Websites and APIs and the services offered on them in accordance with these General Conditions of Use. To access the Websites and APIs’s services, the User also must fill in the mandatory fields of the form attached to the request service. The User guarantees the truthfulness and accuracy of the information provided in the Websites’s forms. To learn more about the use of his/her personal information by E36 Knots, the User is invited to consult the Websites and APIs’s Privacy Policy. ","version":"Next","tagName":"h3"},{"title":"4.2. Alpha software​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#42-alpha-software","content":"The Alpha Software is provided on an &quot;as-is&quot; basis. E36 Knots makes no representations or warranties of any kind, whether expressed or implied, regarding the performance, functionality, or fitness for a particular purpose of the alpha software. The User acknowledges that he/she uses the software at his/her own risk. E36 Knots is under no obligation to provide support, maintenance, updates, or enhancements to the Alpha Software. E36 Knots reserves the right to modify or discontinue the Alpha Software at any time without notice. ","version":"Next","tagName":"h3"},{"title":"5. General obligations of the User​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#5-general-obligations-of-the-user","content":"The User agrees not to: behave likely to undermine the integrity, functioning or security of the information system on which the Websites and APIs and the services offered on it are based;intrude or attempt to intrude into E36 Knots’s information systems;attack or attempt to attack on the authentication and other security measures of the Websites and APIs;collect, extract or use, in any way whatsoever, information on the Websites and APIs;and more generally, to act in a manner likely to infringe the rights and interests of E36 Knots. In the event of any breach or fraudulent use of the Websites and APIs observed by E36 Knots, the latter reserves the right to terminate this contractual relationship, ipso jure, without notice or compensation, as well as to block the User’s account, as well as any future access by the User to all or part of the Websites and APIs and the services offered therein. ","version":"Next","tagName":"h2"},{"title":"6. Disclaimer of liability​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#6-disclaimer-of-liability","content":"The Websites and APIs and the services offered therein are provided to the User free of charge. Despite the care taken in its design and the analysis of its content, the Websites and APIs cannot be free of errors, periods of unavailability, faults or defects and E36 Knots does not guarantee the accuracy, quality, legality or suitability for a particular purpose of the Websites and APIs, the services offered and the content published therein. The User is solely liable for the use he/she intends to make of the Websites and APIs and the preservation of the security and integrity of its data, hardware and software when he/she accesses the Websites and APIs or services. Thus, E36 Knots cannot be held liable for: any dysfunction or bad condition of IT’s User equipment during or after User browsing on the Websites and APIs, as well as in case of impossibility of access, poor User conditions on the Websites and APIs attributable to these devices, the provider of Internet access, Internet network congestion, or any other reason external to E36 Knots;electronic or phone communications expenses induced by the use of User’s equipment which shall be exclusively borne by the User and will not be borne by E36 Knots;any temporary, partial or total unavailability of the Websites and APIs, in particular in the event of maintenance, technical incident and, more generally, in case of an event beyond the control of E36 Knots;any consequences that may arise from the contents of the websites referred by external links that may be displayed on the Websites and APIs;any indirect damage that may be suffered by the User;any damage suffered by the User or a third party resulting from the use of the Websites and APIs or the services offered on it that does not comply with these General Conditions of Use;any breach of the obligations provided by these General Conditions of Use which would arise or would originate from a fortuitous event or a case of force majeure (act of god) as defined by article 1218 of the French Civil Code. In the event that E36 Knots is held liable for damage not provided for in this article, its liability will be limited to certain, real and direct damage. Consequently, under no circumstances shall E36 Knots, its managers, employees and, in general, its representatives and partners, be held liable for any indirect damage resulting from the use of the Websites and APIs and the services offered therein, as well as the content published therein, and in particular for loss of profit, loss of opportunity or damage resulting from loss of data caused by the impossibility of using the Websites and APIs and the services offered therein. ","version":"Next","tagName":"h2"},{"title":"7. Modification​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#7-modification","content":"These General Conditions of Use are dated accurately and may be modified and updated by E36 Knots at any time, particularly in the event of changes to the services offered on the Websites and APIs or to applicable regulations. Consequently, the User is invited to consult the General Conditions of Use each time he/she accesses the Websites and APIs. ","version":"Next","tagName":"h2"},{"title":"8. Termination of the Websites and APIs or services​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#8-termination-of-the-websites-and-apis-or-services","content":"E36 Knots reserves the right to temporarily or permanently suspend access to all or part of the Websites and APIs or the services offered on it, in particular in the event of cessation of activity related to the provision of the Websites and APIs or in the event of insolvency proceedings. ","version":"Next","tagName":"h2"},{"title":"9. Contract assignment​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#9-contract-assignment","content":"Subject to the applicable law, the User agrees that these General Conditions of Use binding him/her to E36 Knots, may be assigned, transferred or provided, in any way, to a third party. As part of the transfer of the company to a third party, these General Conditions of Use binding the User to E36 Knots, will be automatically transferred to the assignee. ","version":"Next","tagName":"h2"},{"title":"10. Hyperlinks​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#10-hyperlinks","content":"The Websites and APIs are likely to contain a certain number of hypertext links to third party websites, other than those published by E36 Knots, set up with the latter’s authorization. However, E36 Knots is not in a position to verify the content of third party websites visited in this way and therefore assumes no liability for this fact. ","version":"Next","tagName":"h2"},{"title":"11. Governing law / jurisdiction​","type":1,"pageTitle":"General Conditions of Use","url":"/docs/terms-and-conditions/general-conditions-of-use#11-governing-law--jurisdiction","content":"These General Conditions of Use are governed by, interpreted and enforced in accordance with French law. In the event of a dispute relating to their interpretation or execution, E36 Knots and the User shall seek, before any litigation, an amicable agreement and shall provide each other with all necessary information to this effect. In the absence of an amicable agreement between E36 Knots and the User within a period of two (2) months from the notification of the dispute to the other party, express jurisdiction is given to the Courts of Paris (France). ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.eth_call","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/eth_call","content":"","keywords":"","version":"Next"},{"title":"Module arguments​","type":1,"pageTitle":"ash.avalanche.eth_call","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/eth_call#module-arguments","content":"Argument\tRequired\tType\tDefault value\tCommentrpc_url\tYes\tstr\tNone\tRPC endpoint to call contract_addr\tYes\tstr\tNone\tAddress of the smart contract to query (in 0x... format) abi\tYes\tstr\tNone\tJSON ABI of the smart contract. Can be retrieved from Snowtrace function_sig\tYes\tstr\tNone\tSignature of the function to call. Looks like foo(uint32,bool) parameters\tYes\traw\tNone\tList of parameters of the functions. ","version":"Next","tagName":"h2"},{"title":"Example playbook​","type":1,"pageTitle":"ash.avalanche.eth_call","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/eth_call#example-playbook","content":"The playbook ash.avalanche.node/ash-node makes use of this plugin to enrich the node configuration with on-chain data. ","version":"Next","tagName":"h2"},{"title":"Installation and upgrade","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/installation","content":"","keywords":"","version":"Next"},{"title":"Using ansible-galaxy​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#using-ansible-galaxy","content":"","version":"Next","tagName":"h2"},{"title":"Installing the collection​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#installing-the-collection","content":"ansible-galaxy collection install git+https://github.com/AshAvalanche/ansible-avalanche-collection.git  ","version":"Next","tagName":"h3"},{"title":"Upgrading the collection​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#upgrading-the-collection","content":"Simply run the same command as above to upgrade the collection! ","version":"Next","tagName":"h3"},{"title":"Using Git​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#using-git","content":"","version":"Next","tagName":"h2"},{"title":"Installing the collection​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#installing-the-collection-1","content":"You have to clone the collection to the Ansible COLLECTIONS_PATHS. To find the COLLECTIONS_PATHS: ansible-config dump | grep COLLECTIONS_PATHS # Example output: # COLLECTIONS_PATHS(/home/gauthier/Projects/ash/ansible-avalanche-getting-started/ansible.cfg) = ['/home/gauthier/Projects/ash/ansible-avalanche-getting-started']  cd $COLLECTIONS_PATHS git clone https://github.com/AshAvalanche/ansible-avalanche-collection.git  ","version":"Next","tagName":"h3"},{"title":"Upgrading the collection​","type":1,"pageTitle":"Installation and upgrade","url":"/docs/toolkit/ansible-avalanche-collection/installation#upgrading-the-collection-1","content":"cd $COLLECTIONS_PATHS/ansible-avalanche-collection git pull  ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/introduction","content":"","keywords":"","version":"Next"},{"title":"What is Ansible? And why do we use it?​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#what-is-ansible-and-why-do-we-use-it","content":"Ansible is an open-source IT automation tool developed by RedHat. It has become the de facto tool used to automate systems configuration, software deployment and zero downtime rolling updates. This makes it the perfect tool to operate large-scale Avalanche node clusters. The Ash team has years of experience operating large-scale distributed systems with Ansible. Learn more: Ansible homepageAnsible documentationAnsible GitHub (56k ⭐) ","version":"Next","tagName":"h2"},{"title":"Why an Ansible collection for Avalanche?​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#why-an-ansible-collection-for-avalanche","content":"Ava Labs provides avalanche-network-runner to easily run a local test network (either locally or in Kubernetes). This collection takes a different approach and provides tools for production environments. Those can also be used to bootstrap realistic test networks. It aims at: Provisioning Avalanche nodes on Fuji or Mainnet with flawless upgrade capabilities. Ansible also brings easy node configuration persistence and idempotent deployments.Bootstrapping local test networks that really mimic production environmentsAutomating Subnet and blockchain operations (subnet whitelisting, plugin deployment) for node operatorsAnd more ","version":"Next","tagName":"h2"},{"title":"Getting started​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#getting-started","content":"Follow the tutorials to get started! ","version":"Next","tagName":"h2"},{"title":"Collection resources​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#collection-resources","content":"","version":"Next","tagName":"h2"},{"title":"Roles​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#roles","content":"ash.avalanche.node: install, configure and upgrade Avalanche nodesash.avalanche.subnet: create Avalanche Subnets and blockchainsash.avalanche.faucet: create Avalanche Faucet instancesash.avalanche.evm.blockscout: create Blockscout instancesash.avalanche.ash_cli: install and configure the Ash CLI ","version":"Next","tagName":"h3"},{"title":"Modules​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#modules","content":"ash.avalanche.eth_call: eth_call a smart contract's function on an EVM Avalanche networkash.avalanche.ash_cmd: run an Ash CLI command ","version":"Next","tagName":"h3"},{"title":"Filters​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#filters","content":"ash.avalanche.convert: convert an amount between AVAX unitsash.avalanche.XXX_to_XXX: convert a string between encodings ","version":"Next","tagName":"h3"},{"title":"Playbooks​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ansible-avalanche-collection/introduction#playbooks","content":"ash.avalanche.bootstrap_local_network: bootstrap a local test network (avalanchego_network_id: local)ash.avalanche.provision_nodes: provision nodes for Fuji or Mainnet (avalanchego_network_id: fuji|mainnet)ash.avalanche.create_subnet: create a Subnet and its blockchains, and add validators to it (avalanchego_network_id: local|fuji)ash.avalanche.create_blockchains: create a blockchain in an existing Subnet (avalanchego_network_id: local|fuji)ash.avalanche.add_network_validator: starts a validation cycle on the Primary Network (avalanchego_network_id: local|fuji)ash.avalanche.install_blockscout_docker: installs a Blockscout instance over a Subnet EVM blockchain using Dockerash.avalanche.install_faucet_docker: installs an Avalache Faucet instance over a Subnet EVM blockchain using Dockerash.avalanche.install_monitoring_stack: installs and configures Grafana, Prometheus and Node Exporter to monitor Avalanche nodes ","version":"Next","tagName":"h3"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/docs/console/reference/project-management","content":"","keywords":"","version":"Next"},{"title":"List projects​","type":1,"pageTitle":"Project Management","url":"/docs/console/reference/project-management#list-projects","content":"Using the Ash CLIUsing the Ash Console API tip The Ash CLI displays information in a table format by default. To get a more detailed output (or for scripting), use the --json flag. To list projects you have access to, run: Command ash console project list Output +------------+----------+------+---------+---------------+------------+ | Project ID | Owner ID | Name | Network | Cloud regions | Created at | +============+==========+======+=========+===============+============+ +------------+----------+------+---------+---------------+------------+  ","version":"Next","tagName":"h2"},{"title":"Create a project​","type":1,"pageTitle":"Project Management","url":"/docs/console/reference/project-management#create-a-project","content":"Using the Ash CLIUsing the Ash Console API To create a new project, use the create project command and provide the required project properties as JSON: Command ash console project create '{name: my-devnet-project, network: local}' Output Project created successfully! +--------------------------------------+-------------+-------------------+---------+---------------+------------------+ | Project ID | Owner ID | Name | Network | Cloud regions | Created at | +======================================+=============+===================+=========+===============+==================+ | 1c464e44-1e2c-46de-a08c-79ac58f6e632 | 2870...dc26 | my-devnet-project | Local | | 2023-10-26T10:36 | +--------------------------------------+-------------+-------------------+---------+---------------+------------------+ Switched to project 'my-devnet-project' (1c464e44-1e2c-46de-a08c-79ac58f6e632)!  ","version":"Next","tagName":"h2"},{"title":"Select the current project (CLI only)​","type":1,"pageTitle":"Project Management","url":"/docs/console/reference/project-management#select-the-current-project-cli-only","content":"Using the Ash CLIUsing the Ash Console API The Ash CLI stores the current project in a configuration file. This project will be used by default for all the commands that require a project (e.g. console region ...). To show the current project, run: Command ash console project show Output Current project: 'my-devnet-project' (1c464e44-1e2c-46de-a08c-79ac58f6e632) You can switch between projects: Command ash console project select my-devnet-project Output Switched to project 'my-devnet-project' (1c464e44-1e2c-46de-a08c-79ac58f6e632)!  ","version":"Next","tagName":"h2"},{"title":"Update a project​","type":1,"pageTitle":"Project Management","url":"/docs/console/reference/project-management#update-a-project","content":"tip You can also provide the project name instead of its ID. Using the Ash CLIUsing the Ash Console API The only propery that can be updated is the project name: Command ash console project update 1c464e44-1e2c-46de-a08c-79ac58f6e632 '{name: my-devnet-project-updated}' Output Project updated successfully! +--------------------------------------+-------------+---------------------------+---------+---------------+------------------+ | Project ID | Owner ID | Name | Network | Cloud regions | Created at | +======================================+=============+===========================+=========+===============+==================+ | 1c464e44-1e2c-46de-a08c-79ac58f6e632 | 2870...dc26 | my-devnet-project-updated | Local | | 2023-10-26T10:36 | +--------------------------------------+-------------+---------------------------+---------+---------------+------------------+  ","version":"Next","tagName":"h2"},{"title":"Delete a project​","type":1,"pageTitle":"Project Management","url":"/docs/console/reference/project-management#delete-a-project","content":"caution Deleting a project will recursively delete all the cloud regions and resources that belong to it! Using the Ash CLIUsing the Ash Console API The CLI will ask for confirmation before deleting the project. To skip the confirmation, use the --yes flag. Command ash console project delete my-devnet-project-updated Output &gt; Are you sure you want to delete this project? Yes Project deleted successfully!  ","version":"Next","tagName":"h2"},{"title":"Secret Management","type":0,"sectionRef":"#","url":"/docs/console/reference/secret-management","content":"","keywords":"","version":"Next"},{"title":"Types of secrets​","type":1,"pageTitle":"Secret Management","url":"/docs/console/reference/secret-management#types-of-secrets","content":"There are several types of secrets, each with a different purpose. See Secret for more information. ","version":"Next","tagName":"h2"},{"title":"List secrets​","type":1,"pageTitle":"Secret Management","url":"/docs/console/reference/secret-management#list-secrets","content":"Using the Ash CLIUsing the Ash Console API tip The Ash CLI displays information in a table format by default. To get a more detailed output (or for scripting), use the --json flag. To list secrets you have access to, run: Command ash console secret list Output +-----------+----------+------+------+------------+---------+ | Secret ID | Owner ID | Name | Type | Created at | Used by | +===========+==========+======+======+============+=========+ +-----------+----------+------+------+------------+---------+  ","version":"Next","tagName":"h2"},{"title":"Create a secret​","type":1,"pageTitle":"Secret Management","url":"/docs/console/reference/secret-management#create-a-secret","content":"caution A secret sensitive values can never be retrieved from the Ash Console! Make sure to keep a copy in a safe place. Using the Ash CLIUsing the Ash Console API To create a new secret, use the create secret command and provide the required secret properties as JSON: Command ash console secret create '{name: my-secret, secretType: generic, content: &quot;***&quot;}' Output Secret created successfully! +--------------------------------------+-------------+-----------+---------+------------------+---------+ | Secret ID | Owner ID | Name | Type | Created at | Used by | +======================================+=============+===========+=========+==================+=========+ | ed8a3653-b6cc-4cd4-899f-ceee4159f545 | 2870...dc26 | my-secret | Generic | 2023-10-30T21:58 | 0 | +--------------------------------------+-------------+-----------+---------+------------------+---------+  ","version":"Next","tagName":"h2"},{"title":"Update a secret​","type":1,"pageTitle":"Secret Management","url":"/docs/console/reference/secret-management#update-a-secret","content":"tip You can also provide the secret name instead of its ID. Using the Ash CLIUsing the Ash Console API The properties that can be updated depend on the secret type. For example, you can update a generic secret's name and content: Command ash console secret update ed8a3653-b6cc-4cd4-899f-ceee4159f545 '{name: my-secret-updated, content: &quot;****&quot;}' Output Secret updated successfully! +--------------------------------------+-------------+-------------------+---------+------------------+---------+ | Secret ID | Owner ID | Name | Type | Created at | Used by | +======================================+=============+===================+=========+==================+=========+ | ed8a3653-b6cc-4cd4-899f-ceee4159f545 | 2870...dc26 | my-secret-updated | Generic | 2023-10-30T21:58 | 0 | +--------------------------------------+-------------+-------------------+---------+------------------+---------+  ","version":"Next","tagName":"h2"},{"title":"Delete a secret​","type":1,"pageTitle":"Secret Management","url":"/docs/console/reference/secret-management#delete-a-secret","content":"caution Deleting a secret is not allowed if it used by another entity. Using the Ash CLIUsing the Ash Console API The CLI will ask for confirmation before deleting the secret. To skip the confirmation, use the --yes flag. Command ash console secret delete my-secret-updated Output &gt; Are you sure you want to delete this secret? Yes Secret deleted successfully!  ","version":"Next","tagName":"h2"},{"title":"Knowledge Base","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/knowledge-base","content":"","keywords":"","version":"Next"},{"title":"Issues​","type":1,"pageTitle":"Knowledge Base","url":"/docs/toolkit/ansible-avalanche-collection/knowledge-base#issues","content":"","version":"Next","tagName":"h2"},{"title":"Multipass instance already exists​","type":1,"pageTitle":"Knowledge Base","url":"/docs/toolkit/ansible-avalanche-collection/knowledge-base#multipass-instance-already-exists","content":"│ Error: Error from multipass │ │ with multipass_instance.frontend, │ on main.tf line 39, in resource &quot;multipass_instance&quot; &quot;frontend&quot;: │ 39: resource &quot;multipass_instance&quot; &quot;frontend&quot; { │ launch failed: instance &quot;frontend&quot; already exists exit status 2  In that case you need to run this command to delete the instance: multipass delete --purge frontend  And then you can run the command to create instances once again. note Note that you could have this error with multiple instances. In that case delete each instances before trying to create other instances. ","version":"Next","tagName":"h3"},{"title":"ash.avalanche.convert","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/convert","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"ash.avalanche.convert","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/convert#usage","content":"This filter is useful to submit transactions without errors in the number of zeros: ash.avalanche.tx: [...] params: [...] amount: &quot;{{ 25 | ash.avalanche.convert('AVAX', 'nAVAX') | int }}&quot;  ","version":"Next","tagName":"h2"},{"title":"Supported units​","type":1,"pageTitle":"ash.avalanche.convert","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/convert#supported-units","content":"Unit\tAmount in weiwei\t1 gwei or navax\t1e9 (1000000000) avax or eth\t1e18 (1000000000000000000) note The filter is not case sensitive: ash.avalanche.convert('AVAX', 'nAVAX') is the same as ash.avalanche.convert('avax', 'navax') ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.XXX_to_XXX","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/xxx_to_xxx","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"ash.avalanche.XXX_to_XXX","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/xxx_to_xxx#usage","content":"This is useful to convert string between different encodings, e.g. from hexadecimal to CB58. # Example of cb58_to_hex conversion - name: Convert NodeID to hexadecimal set_fact: node_id_hex: |- {{ (get_node_id_res.json.result.nodeID | split('-'))[1] | ash.avalanche.cb58_to_hex }}  ","version":"Next","tagName":"h2"},{"title":"Supported conversions​","type":1,"pageTitle":"ash.avalanche.XXX_to_XXX","url":"/docs/toolkit/ansible-avalanche-collection/reference/filters/xxx_to_xxx#supported-conversions","content":"cb58_to_hexcb58_to_byteshex_to_cb58hex_to_bytes ","version":"Next","tagName":"h2"},{"title":"3. Teardown","type":0,"sectionRef":"#","url":"/docs/console/guides/blueprint/teardown","content":"","keywords":"","version":"Next"},{"title":"Delete the resources​","type":1,"pageTitle":"3. Teardown","url":"/docs/console/guides/blueprint/teardown#delete-the-resources","content":"Command for i in {1..5}; do ash console resource delete -y local-node-0$i done # If you created a Subnet ash console resource delete -y ash-subnet  Wait for the resources to be deleted (removed from the list): Command ash console resource list  Output Resources of project 'ash-devnet': +---------------+-------------+------+-----------------+------+------------+--------+-------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===============+=============+======+=================+======+============+========+===================+ +---------------+-------------+------+-----------------+------+------------+--------+-------------------+  ","version":"Next","tagName":"h2"},{"title":"Delete the cloud region​","type":1,"pageTitle":"3. Teardown","url":"/docs/console/guides/blueprint/teardown#delete-the-cloud-region","content":"Command ash console region remove -y &quot;$CLOUD_PROVIDER/$CLOUD_REGION&quot;  Wait for the cloud region to be removed (removed from the list): Command ash console region list  Output Cloud regions of project 'ash-devnet': +--------------+-----------+-----------------------+------------+--------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +==============+===========+=======================+============+========+ +--------------+-----------+-----------------------+------------+--------+  ","version":"Next","tagName":"h2"},{"title":"Delete the nodeId secrets​","type":1,"pageTitle":"3. Teardown","url":"/docs/console/guides/blueprint/teardown#delete-the-nodeid-secrets","content":"Command for i in {1..5}; do ash console secret delete -y local-node-id-0$i done # If you created a Subnet ash console secret delete -y ewoq-key  note You can also keep the nodeId secrets for later use as they will be used for all devnet (local) networks. ","version":"Next","tagName":"h2"},{"title":"Delete the project​","type":1,"pageTitle":"3. Teardown","url":"/docs/console/guides/blueprint/teardown#delete-the-project","content":"Command ash console project delete -y ash-devnet  ","version":"Next","tagName":"h2"},{"title":"5. Subnet Creation","type":0,"sectionRef":"#","url":"/docs/console/guides/local-network/subnet","content":"","keywords":"","version":"Next"},{"title":"Control key creation​","type":1,"pageTitle":"5. Subnet Creation","url":"/docs/console/guides/local-network/subnet#control-key-creation","content":"Before creating a Subnet, we need to create a wallet secret. This wallet will be use to sign the Subnet transactions (creation, validator management, etc.) and the P-Chain address will be used as the control key of the Subnet. To make things easier, we will use the ewoq address which is pre-funded on the local network. Command ash console secret create '{ name: ewoq-key, secretType: wallet, pChainAddress: P-fuji18jma8ppw3nhx5r4ap8clazz0dps7rv5u6wmu4t, privateKey: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN, privateKeyFormat: cb58 }'  Output Secret created successfully! +-------------+-------------+--------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +=============+=============+========+==================+=========+ | ewoq-key | 657b...949e | Wallet | 2024-01-30T13:40 | 0 | +-------------+-------------+--------+------------------+---------+  danger Do not use this wallet as control key in production! ","version":"Next","tagName":"h2"},{"title":"Subnet creation​","type":1,"pageTitle":"5. Subnet Creation","url":"/docs/console/guides/local-network/subnet#subnet-creation","content":"The following command will create a Subnet EVM blockchain with a standard genesis configuration. Command ash console resource create '{ name: ash-subnet, resourceType: avalancheSubnet, cloudRegionId: aws/us-east-1, subnetControlKeySecretId: ewoq-key, subnetNodesResourceIds: [ local-node-01, local-node-02, local-node-03, local-node-04, local-node-05, ], subnetConfig: { avalancheSubnetConfig: { subnet_blockchains_list: [ { name: AshLocalEVM, vm: subnet-evm, genesis_data: { &quot;config&quot;: { &quot;chainId&quot;: 66666, &quot;homesteadBlock&quot;: 0, &quot;eip150Block&quot;: 0, &quot;eip150Hash&quot;: &quot;0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0&quot;, &quot;eip155Block&quot;: 0, &quot;eip158Block&quot;: 0, &quot;byzantiumBlock&quot;: 0, &quot;constantinopleBlock&quot;: 0, &quot;petersburgBlock&quot;: 0, &quot;istanbulBlock&quot;: 0, &quot;muirGlacierBlock&quot;: 0, &quot;subnetEVMTimestamp&quot;: 0, &quot;feeConfig&quot;: { &quot;gasLimit&quot;: 8000000, &quot;minBaseFee&quot;: 25000000000, &quot;targetGas&quot;: 15000000, &quot;baseFeeChangeDenominator&quot;: 36, &quot;minBlockGasCost&quot;: 0, &quot;maxBlockGasCost&quot;: 1000000, &quot;targetBlockRate&quot;: 2, &quot;blockGasCostStep&quot;: 200000 } }, &quot;alloc&quot;: { &quot;8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC&quot;: { &quot;balance&quot;: &quot;0x295BE96E64066972000000&quot; } }, &quot;nonce&quot;: &quot;0x0&quot;, &quot;timestamp&quot;: &quot;0x0&quot;, &quot;extraData&quot;: &quot;0x00&quot;, &quot;gasLimit&quot;: &quot;0x7A1200&quot;, &quot;difficulty&quot;: &quot;0x0&quot;, &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;, &quot;number&quot;: &quot;0x0&quot;, &quot;gasUsed&quot;: &quot;0x0&quot;, &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot; } } ] } }, }'  tip The avalancheSubnetConfig field is following the same structure as the Ansible Avalanche Collection's ash.avalanche_subnet role. See Blockchain configuration for more information on how to generate a custom genesis configuration. Output Resource successfully created in project 'ash-devnet'! +---------------+-------------+-----------------+---------------+-------+------------------+---------+-------------------+ | Resource name | Resource ID | Type | Cloud region | Size | Created at | Status | Resource specific | +===============+=============+=================+===============+=======+==================+=========+===================+ | ash-subnet | 542c...f94e | AvalancheSubnet | aws/us-east-1 | Small | 2024-01-30T13:58 | Pending | ID | | | | | | | | | | Validators | 0 | +---------------+-------------+-----------------+---------------+-------+------------------+---------+-------------------+  info Unlike the avalancheNode resource, there is no concept of size for the avalancheSubnet resource. The Ash Console will create a small instance (e.g.: t2.micro) that will serve as the Subnet control plane. ","version":"Next","tagName":"h2"},{"title":"Subnet information​","type":1,"pageTitle":"5. Subnet Creation","url":"/docs/console/guides/local-network/subnet#subnet-information","content":"After a few minutes, we can get the Subnet ID, control keys, blockchains, and validator nodes information from the subnetStatus field returned by the console resource info command: Command ash console resource info ash-subnet --json | jq '.subnetStatus'  tip We use the --json flag to get the extended information about the Subnet. All those information cannot be displayed in a table format. Output { &quot;blockchains&quot;: [ { &quot;id&quot;: &quot;RfX8YRUHePxFENBZFwaNt1tP6CR6RQ4hJJ5AqYv49LRoSKniK&quot;, &quot;name&quot;: &quot;AshLocalEVM&quot;, &quot;vm_id&quot;: &quot;srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy&quot;, &quot;vm_type&quot;: &quot;SubnetEVM&quot; } ], &quot;controlKeys&quot;: [ &quot;P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u&quot; ], &quot;id&quot;: &quot;29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL&quot;, &quot;pendingValidators&quot;: [], &quot;subnetType&quot;: &quot;Permissioned&quot;, &quot;threshold&quot;: 1, &quot;validators&quot;: [ { &quot;connected&quot;: true, &quot;end_time&quot;: 1707486609, &quot;node_id&quot;: &quot;NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ&quot;, &quot;stake_amount&quot;: 100, &quot;start_time&quot;: 1706881809, &quot;tx_id&quot;: &quot;DhEgYijBur6QDUDgUMpmDAyF5XGyq6JwG919B8bkryDLijvua&quot;, &quot;uptime&quot;: 100, &quot;weight&quot;: 100 }, # ... ] }  ","version":"Next","tagName":"h2"},{"title":"Blockchain RPC endpoint​","type":1,"pageTitle":"5. Subnet Creation","url":"/docs/console/guides/local-network/subnet#blockchain-rpc-endpoint","content":"The CLI provides a powerful helper to get the RPC endpoint that can be used to query the Subnet EVM blockchain (e.g. to connect a Web3 wallet). Provide the avalancheNode resource name to be used as RPC and the avalancheSubnet resource name: Command ash console helper rpc local-node-01 ash-subnet  Output AshLocalEVM RCP endpoint: http://44.223.28.33:9650/ext/bc/RfX8YRUHePxFENBZFwaNt1tP6CR6RQ4hJJ5AqYv49LRoSKniK/rpc  note See the reference for more information about resources lifecycle management. ","version":"Next","tagName":"h2"},{"title":"4. Avalanche Node Deployment","type":0,"sectionRef":"#","url":"/docs/console/guides/fuji-node/avalanche-node","content":"4. Avalanche Node Deployment caution The Ash Console is currently in alpha and not production-ready. It is under active development and subject to breaking changes. We can finally deploy our Avalanche node resource! tip The Ash Console subcommands support both JSON and YAML. Gather the node ID secret ID and cloud region ID from the previous steps. Create the avalancheNode resource with the console resource create command: Command ash console resource create '{ name: avalanche-node-01, resourceType: avalancheNode, cloudRegionId: azure/francecentral, nodeIdSecretId: fuji-node-id-01, size: medium, nodeConfig: { avalancheNodeConfig: { avalanchego_version: 1.10.17 } } }' Output Resource successfully created in project 'fuji-node-guide'! +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===================+=============+===============+=================+========+==================+=========+==========================+ | avalanche-node-01 | 1dda...b457 | AvalancheNode | 3975...8ab1 | Medium | 2023-12-21T11:21 | Pending | IP address | None | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +-------------------+-------------+---------------+-----------------+--------+------------------+---------+--------------------------+ Note: By default, state sync is enabled on the C-Chain. Note: See Resource sizes for available resource sizes. It will take some time before the node is Bootstrapped and Healthy. You can get its updated status with the console resource info command: Command ash console resource info avalanche-node-01 Output Resource 'avalanche-node-01' of project 'fuji-node-guide': +-------------------+-------------+---------------+-----------------+--------+------------------+-------------+--------------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===================+=============+===============+=================+========+==================+=============+================================+ | avalanche-node-01 | 1dda...b457 | AvalancheNode | 3975...8ab1 | Medium | 2023-12-21T11:21 | Configuring | IP address | 20.199.59.152 | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +-------------------+-------------+---------------+-----------------+--------+------------------+-------------+--------------------------------+ Once the node is Running, can already query the node info endpoint with the avalanche node info command: Command ash avalanche node info -n 20.199.59.152 note Your node IP address will be different. Output Node '20.199.59.152:9650': ID: NodeID-6BbSeHZcmHzN2MAXvQu83FHostsxVGvHC Network: fuji Public IP: 20.199.59.152 Staking port: 9651 Versions: AvalancheGo: avalanche/1.10.17 Database: v1.4.5 RPC Protocol: 28 Git commit: 145dfb0dc179d688f45ad44067ef6f9821148b36 VMs: AvalancheVM: v1.10.17 Coreth: v0.12.5 PlatformVM: v1.10.17 Subnet VMs: [] Uptime: Rewarding stake: 0% Weighted average: 0% note See the reference for more information about resources lifecycle management.","keywords":"","version":"Next"},{"title":"ash.avalanche.ash_cli","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-ash-cli","content":"","keywords":"","version":"Next"},{"title":"Role variables​","type":1,"pageTitle":"ash.avalanche.ash_cli","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-ash-cli#role-variables","content":"Variable\tComment\tDefault valueash_cli_version\tCLI version\t0.1.1 ash_cli_install_dir\tBase directory to install CLI\t/opt/avalanche/ash-cli ash_cli_conf_dir\tWhere to store the default CLI configuration\t/etc/avalanche/ash-cli/conf ash_cli_owner\tThe user of the Ash Cli dirs and binary\troot ash_cli_group\tThe group of the Ash Cli dirs and binary\troot avalanche_network_id\tThe default network of the CLI. Can be fuji, mainnet or local.\tfuji avalanche_pchain_local_url\tIf avalanche_network_id is local, this URL will be used as rpcUrl for the P-Chain in the CLI default configuration.\thttp://127.0.0.1:9650/ext/bc/P ash_cli_custom_networks\tCustom networks to add to the CLI configuration. See Custom networks.\tNA ","version":"Next","tagName":"h2"},{"title":"Custom networks​","type":1,"pageTitle":"ash.avalanche.ash_cli","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-ash-cli#custom-networks","content":"This role allows to add custom networks to the CLI configuration. You can see an example in the avalanche/node/tasks/main.yml playbook where the local network is added to the CLI configuration. Each network is defined by a name and the endpoints to use for the P-Chain, C-Chain and X-Chain APIs: local network definition ash_cli_custom_networks: local: pchain_rpc_url: &quot;http://127.0.0.1:9650/ext/bc/P&quot; cchain_rpc_url: &quot;http://127.0.0.1:9650/ext/bc/C/rpc&quot; xchain_rpc_url: &quot;http://127.0.0.1:9650/ext/bc/X&quot;  ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.ash_cmd","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/ash_cmd","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"ash.avalanche.ash_cmd","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/ash_cmd#usage","content":"- name: Get node info with Ash CLI ash.avalanche.ash_cmd: command: [&quot;avalanche&quot;, &quot;node&quot;, &quot;info&quot;] options: http-host: 192.168.60.11 http-port: 9650 register: ash_cli_command - name: Print node Id from Ash CLI output debug: msg: &quot;{{ ash_cli_command.output.id }}&quot; - name: Get list of Subnets on Fuji with Ash CLI ash.avalanche.ash_cmd: command: avalanche subnet list options: network: fuji register: ash_cli_command - name: Print number of Subnets on Fuji from Ash CLI output debug: msg: &quot;There are {{ ash_cli_command.output | length }} Subnets on Fuji&quot;  ","version":"Next","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"ash.avalanche.ash_cmd","url":"/docs/toolkit/ansible-avalanche-collection/reference/modules/ash_cmd#parameters","content":"Parameter\tRequired\tType\tDefault\tDescriptioncommand\tYes\tlist\tNA\tThe command to run as a string (e.g. avalanche node info) or a list of strings (e.g.: [&quot;avalanche&quot;, &quot;node&quot;, &quot;info&quot;]) options\tNo\tdict\t{}\tThe options to pass to the command. See Ash CLI for more details. ash_path\tNo\tstr\t/opt/avalanche/ash-cli/bin/ash\tThe path to the Ash CLI binary ash_config\tNo\tstr\t/etc/avalanche/ash-cli/conf/default.yml\tThe path to the Ash CLI configuration file json\tNo\tbool\tTrue\tIf True, output will be rendered in JSON ","version":"Next","tagName":"h2"},{"title":"Changelog","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/changelog","content":"","keywords":"","version":"Next"},{"title":"Unreleased​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#unreleased","content":"Full Changelog Merged pull requests: feat: upgrade blockscout to 6.1.0 #124 (Al3xGROS) ","version":"Next","tagName":"h2"},{"title":"v0.12.3 (2024-02-21)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0123-2024-02-21","content":"Full Changelog Implemented enhancements: Allow to secure the endpoints with the auth API #25 Closed issues: Allow avalanchego_vms_list to define a path variable to fetch the archive locally #125 Merged pull requests: feat: allow a path variable for local VM archive fetching #126 (leopaul36)fix: modif of install_monitoring_stack.yml to fit new update of grafana #122 (Al3xGROS) ","version":"Next","tagName":"h2"},{"title":"v0.12.2 (2024-02-13)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0122-2024-02-13","content":"Full Changelog Implemented enhancements: Provide the node BLS PoP when adding a validator to the Primary Network #120 Merged pull requests: feat: provide node signer when adding as validator #123 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.12.1 (2024-02-09)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0121-2024-02-09","content":"Full Changelog Merged pull requests: fix: allow the removing of outdated links when emptying avalanchego_p… #121 (Al3xGROS) ","version":"Next","tagName":"h2"},{"title":"v0.12.0 (2024-01-24)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0120-2024-01-24","content":"Full Changelog Breaking changes: feat(node): support BLS staking key + custom network genesis #118 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.11.1 (2024-01-18)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0111-2024-01-18","content":"Full Changelog Closed issues: Allow to specify different network_ids for AvalancheGo and the Ash CLI #115 Merged pull requests: added optional parameters to customize the avalanchego.service file #117 (ngurmen)fix to allow different network ids between ash_cli and avalanchego #116 (ngurmen) ","version":"Next","tagName":"h2"},{"title":"v0.11.0 (2023-12-21)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0110-2023-12-21","content":"Full Changelog Breaking changes: feat(node): use a dict for avalanchego_vms_install #114 (Nuttymoon) Implemented enhancements: Use a dictionary instead of a list for avalanchego_vms_install #113 Closed issues: Comment out subnet_blockchains_list in Subnet role's defaults #111 Merged pull requests: feat: comment subnet_blockchains_list #112 (leopaul36)mng/vm aliases and chain upgrades #110 (ngurmen) ","version":"Next","tagName":"h2"},{"title":"v0.10.0 (2023-12-15)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0100-2023-12-15","content":"Full Changelog Implemented enhancements: Support for multiple subnets with same subnet binary with different VM IDs #106 Merged pull requests: feat(node): use VM ID for symlinks to VM binary #109 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.9.2 (2023-12-14)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v092-2023-12-14","content":"Full Changelog Closed issues: Ash CLI configuration fails on Fuji nodes #104 Merged pull requests: parametrized the owner and group for ash_cli #108 (ngurmen)fix(node): default value for ash_cli_networks #105 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.9.1 (2023-11-22)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v091-2023-11-22","content":"Full Changelog Merged pull requests: fix(node): add 'testnet' as a public networks #103 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.9.0 (2023-11-21)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v090-2023-11-21","content":"Full Changelog Closed issues: Rename node staking TLS cert + key to a generic name #100Select the VM arch based on the Ansible architecture value #98 Merged pull requests: feat(node): create a parent directory in /var/lib #102 (Nuttymoon)fix: VM binary arch #101 (Nuttymoon)feat(node): support Docker image build #99 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.8.10 (2023-10-16)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v0810-2023-10-16","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.8.9 (2023-10-10)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v089-2023-10-10","content":"Full Changelog Closed issues: Multipass simulates a Ubuntu ARM on a Mac M1 #96 ","version":"Next","tagName":"h2"},{"title":"v0.8.8 (2023-08-31)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v088-2023-08-31","content":"Full Changelog Implemented enhancements: Add retries to the downloads tasks #90Implement rolling restart mechanism #78 Fixed bugs: The validation start/end times generation is broken on other OSs than Linux #92 Merged pull requests: Nodes rolling restart #95 (Nuttymoon)fix: register ansible's localhost for date command #94 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.8.7 (2023-08-28)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v087-2023-08-28","content":"Full Changelog Breaking changes: feat(playbooks): add add_subnet_validators #93 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.8.6 (2023-08-23)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v086-2023-08-23","content":"Full Changelog Implemented enhancements: The ash_cmd module should be in status changed if modifications were made #81 Security fixes: Use an argument to pass the private key in ash_cmd module #79 Merged pull requests: feat(ash_cmd): improve mod security + output #91 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.8.5 (2023-08-07)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v085-2023-08-07","content":"Full Changelog Breaking changes: Chain aliases and public ip config #89 (Nuttymoon) Implemented enhancements: Allow to specify the validation parameters for each validator #87Allow to configure the public-ip with a role variable instead of ansible_host #56Use chain-aliases-file property to create chain aliases #39 Closed issues: ash.avalanche.ash_cli fails when ash_cli_custom_networks = {} #85 Merged pull requests: Subnet validators params #88 (Nuttymoon)feat: verify ash_cli_custom_networks is defined #86 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.8.4 (2023-07-26)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v084-2023-07-26","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.8.3 (2023-07-24)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v083-2023-07-24","content":"Full Changelog Breaking changes: Add Ansible tags + allow multiple bootstrap nodes #84 (Nuttymoon) Implemented enhancements: Allow to provide multiple bootstrap nodes #83 Closed issues: Document the admin and validate features #9 ","version":"Next","tagName":"h2"},{"title":"v0.8.2 (2023-07-06)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v082-2023-07-06","content":"Full Changelog Breaking changes: Fix add-validator vars propagation #82 (Nuttymoon) Implemented enhancements: Let users override computed avalanchego_node_json values #76 Fixed bugs: Validator variables are not propagated properly in avalanche.node.add-validator #80Validation period start/end time generation doesn't work on MacOS #73 Closed issues: Implement v1.10.3 configurations changes #72 Merged pull requests: feat: avalanchego_node_json precedence in combine #77 (leopaul36)73 date command per dist #75 (leopaul36)feat: adapt config to v1.10.3 #74 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.8.1 (2023-06-14)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v081-2023-06-14","content":"Full Changelog Merged pull requests: feat(ash_cli): unpack Ash CLI archive #71 (Nuttymoon)feat: sync dashboards with avalanche-monitoring #70 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.8.0 (2023-06-09)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v080-2023-06-09","content":"Full Changelog Breaking changes: Use Ash CLI for API calls and transactions #69 (Nuttymoon) Implemented enhancements: Use Ash CLI to perform API calls and issue transactions #68 ","version":"Next","tagName":"h2"},{"title":"v0.7.6 (2023-06-02)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v076-2023-06-02","content":"Full Changelog Breaking changes: 44 rename blockscout role #67 (Nuttymoon) Closed issues: Rename avalanche_faucet_chains to avalanche_faucet_evmchains #44 ","version":"Next","tagName":"h2"},{"title":"v0.7.5 (2023-05-30)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v075-2023-05-30","content":"Full Changelog Implemented enhancements: Add Subnets dashboard to install_monitoring_stack #64 Merged pull requests: feat: add subnets dashboard and logic #65 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.7.4 (2023-05-23)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v074-2023-05-23","content":"Full Changelog Implemented enhancements: Implement an Ash CLI module #62 Closed issues: Deprecated roles' README #60 Merged pull requests: feat: ash_cli module #63 (leopaul36)docs: link README to ash.center #61 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.7.3 (2023-05-15)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v073-2023-05-15","content":"Full Changelog Implemented enhancements: Certificate upload should be optional #58 Fixed bugs: Missing variables for http-tls-* #57 Merged pull requests: fix: make http-tls certs upload optional #59 (leopaul36)feat: bump avalanchego_vms_list #55 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.7.2 (2023-04-27)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v072-2023-04-27","content":"Full Changelog Implemented enhancements: Configure Ash CLI depending on the current network #53Add a monitoring stack playbook #51 Merged pull requests: feat(ash_cli): add config playbook #54 (Nuttymoon)feat: monitoring stack #52 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.7.1 (2023-04-26)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v071-2023-04-26","content":"Full Changelog Implemented enhancements: feat: add ash_cli role #50 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.7.0 (2023-04-26)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v070-2023-04-26","content":"Full Changelog Implemented enhancements: Add Blockscout role #48 Merged pull requests: feat: add blockscout role #49 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.6.1 (2023-03-30)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v061-2023-03-30","content":"Full Changelog Breaking changes: feat: remove ash node logic from node role #45 (Nuttymoon) Implemented enhancements: feat: add faucet role #42 (leopaul36) Closed issues: Remove Ash node logic from this collection #40Avalanche Subnet faucet role #36 Merged pull requests: docs: add changelog #43 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.6.0 (2023-03-23)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v060-2023-03-23","content":"Full Changelog Breaking changes: Rename avalanche_tracked_subnets variable to avalanchego_track_subnets #34 Implemented enhancements: Verify AvalancheGo binary integrity before installation #37Use Ava Labs releases of Subnet EVM #32Try to use apt to install AvalancheGo #31Support TLS for the HTTP API endpoints #26 Merged pull requests: Add TLS support for HTTP API endpoints #41 (Nuttymoon)AvalancheGo binary verification #38 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.5.1 (2023-03-20)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v051-2023-03-20","content":"Full Changelog Breaking changes: Use Ava Labs VM releases #33 (Nuttymoon) Deprecated: Drop support for blobvm, spacesvm and timestampvm #29 ","version":"Next","tagName":"h2"},{"title":"v0.5.0 (2023-03-17)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v050-2023-03-17","content":"Full Changelog Breaking changes: feat: drop support for vms other than subnet-evm #30 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.4.1 (2023-03-14)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v041-2023-03-14","content":"Full Changelog Closed issues: Clean the plugins dir if avalanchego_vms_install is empty #27Uniformize license headers #17 Merged pull requests: fix: clean plugins dir if avalanchego_vms_install is empty #28 (leopaul36)chore: uniformize license headers #24 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.4.0 (2023-02-27)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v040-2023-02-27","content":"Full Changelog Implemented enhancements: Adapt to the changes of v1.9.6 #18Support subnet configs #8 Fixed bugs: Bootstrapping a node without additional VMs currently fails #20Adding validator to primary network should not be triggered if the validator is pending #6 Closed issues: Bump VMs compatibility list #22 Merged pull requests: fix: remove duplicate plugins dir creation #21 (leopaul36)feat: adapt to 1.9.6 #19 (leopaul36)fix: update subnetevm compatibility matrix #16 (leopaul36)Ash node playbook #15 (Nuttymoon)fix: check pending validators before addvalidator #14 (Nuttymoon)feat: add subnets configs support #12 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.3.1 (2022-10-28)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v031-2022-10-28","content":"Full Changelog Implemented enhancements: Switch default network to fuji to avoid having to overwrite critical config in testnet/mainnet #3 Closed issues: Document all playbooks #10 Merged pull requests: feat: add convert ansible filter #13 (Nuttymoon)docs: add playbooks desc to readme #11 (Nuttymoon)feat: set fuji as default network #7 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.3.0 (2022-10-15)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v030-2022-10-15","content":"Full Changelog Merged pull requests: feat: update vms supported versions #5 (Nuttymoon)docs: enable statistics for yaml #4 (Nuttymoon)feat: add user and add validator tasks #2 (leopaul36) ","version":"Next","tagName":"h2"},{"title":"v0.2.0 (2022-07-21)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v020-2022-07-21","content":"Full Changelog Merged pull requests: Migrate collection to ash org #1 (Nuttymoon) ","version":"Next","tagName":"h2"},{"title":"v0.1.6 (2022-07-21)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v016-2022-07-21","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.5 (2022-06-22)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v015-2022-06-22","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.4 (2022-03-25)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v014-2022-03-25","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.3 (2022-03-25)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v013-2022-03-25","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.2 (2022-03-20)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v012-2022-03-20","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.1 (2022-03-17)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v011-2022-03-17","content":"Full Changelog ","version":"Next","tagName":"h2"},{"title":"v0.1.0 (2022-02-19)​","type":1,"pageTitle":"Changelog","url":"/docs/toolkit/ansible-avalanche-collection/changelog#v010-2022-02-19","content":"Full Changelog * This Changelog was automatically generated by github_changelog_generator ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.evm.blockscout","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-evm-blockscout","content":"","keywords":"","version":"Next"},{"title":"Role variables​","type":1,"pageTitle":"ash.avalanche.evm.blockscout","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-evm-blockscout#role-variables","content":"Variable\tComment\tDefault valueblockscout_image\tBase image of Blockscout\tblockscout/blockscout blockscout_image_version\tTag to be used\t5.1.0 blockscout_conf_dir\tWhere to store the Blockscout config files\t/etc/blockscout/conf blockscout_custom_dir\tDir used to upload custom assets\t&quot;{{ blockscout_conf_dir }}/custom&quot; blockscout_log_dir\tWhere to store the Blockscout logs\t/var/log/blockscout blockscout_data_dir\tWhere to store the Postgres data\t/var/lib/postgres blockscout_user\tUser that will run Blockscout\troot blockscout_rpc\tRPC of the blockchain to index\thttp://192.168.60.11:9650/ext/bc/27Lga51x8AQnBDJTnE6sUSiFmdrDSqCYhbkiTQD8oBd1EqotZ1/rpc blockscout_header_logo_file\tBlockscout header logo file\tash-logo-circle-30.svg blockscout_env_vars\tSee Blockscout docs\tNA ","version":"Next","tagName":"h2"},{"title":"Inventory requirements​","type":1,"pageTitle":"ash.avalanche.evm.blockscout","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-evm-blockscout#inventory-requirements","content":"The host on which to install Blockscout have to be in the blockscout group. ","version":"Next","tagName":"h2"},{"title":"How to?​","type":1,"pageTitle":"ash.avalanche.evm.blockscout","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-evm-blockscout#how-to","content":"See the Subnet Blockchain Explorer tutorial to learn how to deploy Blockscout. ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.faucet","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-faucet","content":"","keywords":"","version":"Next"},{"title":"Role variables​","type":1,"pageTitle":"ash.avalanche.faucet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-faucet#role-variables","content":"Variable\tComment\tDefault valueavalanche_faucet_image\tBase image of the Avalanche faucet\tghcr.io/ashavalanche/faucet-image avalanche_faucet_image_version\tTag to be used\tdisable-captcha-variable avalanche_faucet_conf_dir\tWhere to store the faucet config files\t/etc/avalanche/faucet/conf avalanche_faucet_log_dir\tWhere to store the faucet logs\t/var/log/avalanche/faucet avalanche_faucet_user\tUser that will run the faucet\tfaucet avalanche_faucet_group\tGroup of the user running the faucet\tfaucet avalanche_faucet_docker_group\tDocker group of the target host\tdocker avalanche_faucet_port\tPort on which the faucet will attach on the target host\t8000 avalanche_faucet_evmchains\tConfig file for the faucet (see docs)\tNA avalanche_faucet_env\tEnv file for the faucet (see docs)\tNA ","version":"Next","tagName":"h2"},{"title":"Inventory requirements​","type":1,"pageTitle":"ash.avalanche.faucet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-faucet#inventory-requirements","content":"The host on which to install the faucet have to be in the faucet group. ","version":"Next","tagName":"h2"},{"title":"How to?​","type":1,"pageTitle":"ash.avalanche.faucet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-faucet#how-to","content":"See the Subnet faucet tutorial to learn how to deploy the Avalanche Faucet. ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.node","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node","content":"","keywords":"","version":"Next"},{"title":"Role variables​","type":1,"pageTitle":"ash.avalanche.node","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node#role-variables","content":"Variable\tComment\tDefault valueavalanchego_version\tSee AvalancheGo releases\t1.10.0 avalanchego_install_dir\tBase directory to store all AvalancheGo software\t/opt/avalanche/avalanchego avalanchego_vms_dir\tWhere to unpack VMs releases\t/opt/avalanche/vms avalanchego_db_dir\t--db-dir argument\t/var/lib/avalanche/avalanchego/db avalanchego_conf_dir\tWhere to store AvalancheGo config files\t/etc/avalanche/avalanchego/conf avalanchego_staking_dir\tWhere to store the node's TLS certificates and BLS key used to communicate with peers on the Avalanche network\t/etc/avalanche/avalanchego/staking avalanchego_https_certs_dir\tWhere to store the node's TLS certificates used to secure HTTP API endpoints\t/etc/ssl/certs/avalanche/avalanchego avalanchego_gpg_dir\tWhere to store Ava Labs GPG public key (used to verify AvalancheGo binary)\t/etc/avalanche/avalanchego/gnupg avalanchego_log_dir\tWhere to write logs\t/var/log/avalanche/avalanchego avalanchego_user\tThe user that will run the AvalancheGo Linux service\tavalanche avalanchego_group\tThe group of the user that will run the AvalancheGo Linux service\tavalanche avalanchego_auto_restart\tWhether to automatically restart AvalancheGo upon version or configuration changes\ttrue avalanchego_http_host\t--http-host argument\t127.0.0.1 avalanchego_http_port\t--http-port argument\t9650 avalanchego_http_allowed_hosts\t--http-allowed-hosts argument\tlocalhost avalanchego_https_enabled\tWhether to secure the HTTP API endpoints using TLS. See --http-tls-enabled argument. If true will upload TLS certificates from avalanchego_https_local_certs_dir.\tfalse avalanchego_https_local_certs_dir\tWhere to find the TLS certificates on the Ansible host, will not lookup for files if value is &quot;&quot;\t&quot;{{ playbook_dir }}/files/https&quot; avalanchego_https_cert_file\tPath to TLS certificate for the HTTPS server. See --http-tls-cert-file argument.\t&quot;{{ avalanchego_https_certs_dir }}/{{ inventory_hostname }}.crt&quot; avalanchego_https_key_file\tPath to TLS private key for the HTTPS server. See --http-tls-key-file argument.\t&quot;{{ avalanchego_https_certs_dir }}/{{ inventory_hostname }}.key&quot; avalanchego_public_ip\tThe node's public IP. Set to &quot;&quot; to resolve the public IP automatically using NAT traversal.\t&quot;{{ ansible_host }}&quot; avalanchego_staking_port\t--staking-port argument\t9651 avalanchego_staking_use_local_certs\tIf true will upload TLS certificates from avalanchego_staking_local_certs_dir. If false AvalancheGo will automatically create new certs.\tfalse avalanchego_staking_local_certs_dir\tWhere to find the existing certificates on the Ansible host. Should be named {{ inventory_hostname }}.(crt\\| key).\t&quot;{{ playbook_dir }}/files/staking&quot; avalanchego_staking_use_local_bls_keys\tIf set to true, will use existing BLS keys found in avalanchego_staking_local_bls_keys_dir. If false, AvalancheGo will automatically create a new key.\tfalse avalanchego_staking_local_bls_keys_dir\tWhere to find the existing BLS key on the Ansible host. Should be named {{ inventory_hostname }}.bls.key.\t&quot;{{ playbook_dir }}/files/staking&quot; avalanchego_custom_genesis\tIf set to true, will use existing genesis file at avalanchego_custom_genesis_local_file\tfalse avalanchego_custom_genesis_local_file\tSee Genesis\t&quot;{{ playbook_dir }}/files/genesis.json&quot; avalanchego_network_id\tSee Network ID\tfuji avalanchego_bootstrap_node_ids\tNode IDs of the bootstrap nodes on networks other than mainnet and fuji\t['NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg'] avalanchego_bootstrap_db\tThe local path to a snapshot of Avalanche database\t&quot;&quot; avalanchego_track_subnets\tThe list of tracked subnets that the node can validate. See Subnet Tracking\t[] avalanchego_vms_install\tA dictionary of VMs to install on the node with their versions. The key is the VM name and the value its version. See VMs install.\t{} avalanchego_node_json\tThe AvalancheGo node configuration that will be templated to node.json addresses\tNA avalanchego_subnets_configs\tThe configuration of each subnet. See Subnet Configs.\t{} avalanchego_chain_aliases\tThe aliases of each chain. See chain-aliases-file.\t{} avalanchego_chain_configs\tThe configuration of each chain. See Chain Configs.\t{ C: { state-sync-enabled: true }} avalanchego_chain_upgrades\tThe list of upgrades of each chain. See Network Upgrades.\t{} validator_txs_private_key\tThe private key used to sign the addValidator transactions\tPrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN validator_txs_key_encoding\tEncoding of the private key. Can be cb58 or hex.\tcb58 validator_start_time_command\tCommand used to dynamically compute start_time_command_output\t2 minutes from now using date validator_end_time_command\tCommand used to dynamically compute end_time_command_output\t1 week and 2 minutes from now using date validator_start_time\tStart time of the validation either in RFC 3339 format (YYYY-MM-DDTHH:MM:SSZ) or start_time_command_output that will be resolved by executing validator_start_time_command\tstart_time_command_output validator_end_time\tEnd time of the validation either in RFC 3339 format (YYYY-MM-DDTHH:MM:SSZ) or end_time_command_output that will be resoved by executing validator_end_time_command\tend_time_command_output validator_stake_or_weight\tStake (for elastic Subnets) or weight (for permissioned Subnets) of validators\t1 validator_delegation_fee\tDelegation fee in percentage\t2 avalanchego_service_options\tAdditional systemd avalanchego.service options. Only modify this variable if you are absolutely sure about what you are doing.\t# ExecStartPost=/bin/echo &quot;Example ExecStartPost option&quot; ash_cli_install\tWhether to install and configure Ash CLI on the node\ttrue ash_cli_network_id\tThe Avalanche network to be used in the Ash CLI (sets the RPC endpoints to use)\t&quot;{{ avalanchego_network_id }}&quot; Ash CLI configuration note All config arguments are passed to AvalancheGo through a JSON config file stored at avalanchego_config_dir. ","version":"Next","tagName":"h2"},{"title":"Inventory requirements​","type":1,"pageTitle":"ash.avalanche.node","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node#inventory-requirements","content":"All the nodes on which to install avalanchego have to be in the avalanche_nodes group.For local networks, at least one of the nodes has to be in the bootstrap_nodes group. This nodes have to be started first to serve as bootstrap nodes for the others. For an example of how to do that, see the bootstrap_local_network.yml playbook. ","version":"Next","tagName":"h2"},{"title":"Installation folders​","type":1,"pageTitle":"ash.avalanche.node","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node#installation-folders","content":"The default installation follows Linux Filesystem Hierarchy Standard by creating 3 main directories: /opt/avalanche to store Avalanche softwares └── avalanchego contains the different versions of AvalancheGo └──current contains symlinks to the currently used avalanchego binary and plugins /etc/avalanche to store Avalanche related configuration files ├── conf contains AvalancheGo configs├── staking contains the Avalanche node's TLS certificates and BLS key└── gnupg contains the AvalancheGo GPG keys used to sign the AvalancheGo binaries /var/lib/avalanche/avalanchego to store AvalancheGo data └── db contains AvalancheGo's database /var/log/avalanche/avalanchego to store AvalancheGo logs/etc/ssl/certs/avalanche/avalanchego to store AvalancheGo TLS certificates used to secure the node's HTTP API endpoints caution This differs from AvalancheGo default setup that stores the database and configuration files under $HOME/.avalanchego. ","version":"Next","tagName":"h2"},{"title":"VMs installation​","type":1,"pageTitle":"ash.avalanche.node","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node#vms-installation","content":"To install a VM on the node, add it to avalanchego_vms_install following VM_NAME: VM_VERSION format (e.g. timestampvm: 1.2.0). ","version":"Next","tagName":"h2"},{"title":"Supported VMs and AvalancheGo compatibility​","type":1,"pageTitle":"ash.avalanche.node","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node#supported-vms-and-avalanchego-compatibility","content":"List of VMs supported by the collection: subnet-evm: Provider: Ava LabsGitHub repository: ava-labs/subnet-evmVersions: 0.4.8 or later Here is the compatibility matrix with AvalancheGo versions: RPC protocol\tAvalancheGo\tsubnet-evm22\t1.9.6-1.9.8\t0.4.8 23\t1.9.9\t0.4.9-0.4.10 24\t1.9.10-1.9.16\t0.4.11-0.4.12 25\t1.10.0\t0.5.0 26\t1.10.1-1.10.4\t0.5.1-0.5.2 27\t1.10.5-1.10.8\t0.5.3 28\t1.10.9-1.10.12\t0.5.5-0.5.6 29\t1.10.13-1.10.14\t0.5.7-0.5.8 30\t1.10.15-1.10.17\t0.5.9-0.5.10 tip If a versions incompatibility is detected, an error message will be prompted and the role execution will stop. ","version":"Next","tagName":"h3"},{"title":"Console Blueprints","type":0,"sectionRef":"#","url":"/docs/console/reference/blueprints","content":"","keywords":"","version":"Next"},{"title":"Blueprints structure​","type":1,"pageTitle":"Console Blueprints","url":"/docs/console/reference/blueprints#blueprints-structure","content":"A blueprint is a YAML or JSON file with the following structure: --- # The list of secrets to create or update secrets: - name: aws-credentials secretType: awsCredentials # ... - name: local-node-id-01 secretType: nodeId # ... # The list of projects to create or update projects: # The project properties - project: name: ash-devnet network: local # The list of cloud regions to add to the project regions: - cloudProvider: aws region: us-east-1 cloudCredentialsSecretId: aws-credentials # The list of resources to create or update in the project resources: - name: local-node-01 resourceType: avalancheNode cloudRegionId: aws/us-east-1 nodeIdSecretId: local-node-id-01 # ...  ","version":"Next","tagName":"h2"},{"title":"Blueprint features​","type":1,"pageTitle":"Console Blueprints","url":"/docs/console/reference/blueprints#blueprint-features","content":"Blueprints have some nice features: You can reference other entities by their name (e.g. cloudCredentialsSecretId: aws-credentials) before they are created. But always make sure that the referenced entity is listed before the entity that references it.You can use environment variables in the blueprint: secrets: - name: aws-credentials secretType: awsCredentials accessKey: &quot;${AWS_ACCESS_KEY}&quot; secretKey: &quot;${AWS_SECRET_KEY}&quot;  ","version":"Next","tagName":"h3"},{"title":"Apply a blueprint​","type":1,"pageTitle":"Console Blueprints","url":"/docs/console/reference/blueprints#apply-a-blueprint","content":"Applying a blueprint is as simple as running the blueprint apply command and providing the blueprint path: Command ash console blueprint apply ./blueprint.yml  The Ash CLI will display a summary of the changes that will be applied and ask for confirmation: Confirmation prompt Blueprint summary Secrets 2 to create: aws-credentials, local-node-id-01 0 to update: Projects 1 to create: - 'ash-devnet': Regions: aws/us-east-1 Resources: local-node-01 0 to update: ? Are you sure you want to apply this blueprint? (y/N) [This action is irreversible!]  Once you confirm, the CLI will create or update the entities in sequence and display the result: Output Creating entities... Creating secret: aws-credentials Secret created successfully! +-----------------+-------------+----------------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +=================+=============+================+==================+=========+ | aws-credentials | 9954...ac4b | AwsCredentials | 2023-12-21T14:34 | 0 | +-----------------+-------------+----------------+------------------+---------+ Creating secret: local-node-id-01 Secret created successfully! +------------------+-------------+--------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +==================+=============+========+==================+=========+ | local-node-id-01 | 5064...9550 | NodeId | 2023-12-21T14:34 | 0 | +------------------+-------------+--------+------------------+---------+ Creating project: ash-devnet Project created successfully! +--------------+-------------+---------+---------------+------------------+ | Project name | Project ID | Network | Cloud regions | Created at | +==============+=============+=========+===============+==================+ | ash-devnet | 519b...c103 | Local | | 2023-12-21T14:34 | +--------------+-------------+---------+---------------+------------------+ Switched to project 'ash-devnet' (519b5d03-6ab2-44db-9a01-61774650c103)! Adding region: ash-devnet:aws/us-east-1 Cloud region successfully added to project 'ash-devnet'! +---------------+-------------+-----------------------+------------------+-----------+ | Cloud region | Region ID | Cloud creds secret ID | Created at | Status | +===============+=============+=======================+==================+===========+ | aws/us-east-1 | 010b...5d55 | 9954...ac4b | 2023-12-21T14:34 | Available | +---------------+-------------+-----------------------+------------------+-----------+ Adding resource: ash-devnet:local-node-01 Resource successfully created in project 'ash-devnet'! +---------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===============+=============+===============+=================+=======+==================+=========+==========================+ | local-node-01 | 352e...ba20 | AvalancheNode | 010b...5d55 | Small | 2023-12-21T14:34 | Pending | IP address | None | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +---------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------+ Updating entities: Nothing to update  You can use the same command to update existing entities. For example, if you add a new region to the blueprint: --- # ... projects: - project: name: ash-devnet network: local regions: # ... # New region - cloudProvider: aws region: us-west-2 cloudCredentialsSecretId: aws-credentials # ...  Command ash console blueprint apply ./blueprint.yml  Confirmation prompt Blueprint summary Secrets 0 to create: 2 to update: aws-credentials, local-node-id-01 Projects 0 to create: 1 to update: - 'ash-devnet': Regions: aws/us-east-1, aws/us-east-2 Resources: local-node-01 ? Are you sure you want to apply this blueprint? (y/N) [This action is irreversible!]  ","version":"Next","tagName":"h2"},{"title":"ash.avalanche.subnet","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet","content":"","keywords":"","version":"Next"},{"title":"Role variables​","type":1,"pageTitle":"ash.avalanche.subnet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet#role-variables","content":"Variable\tComment\tDefault valuesubnet_avalanche_network_id\tThe Network ID in which to create the Subnet\tlocal subnet_txs_private_key\tThe private key used to sign all Subnet related transactions. The P-Chain address of the account will also be used as control key for the Subnet.\tPrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN subnet_txs_key_encoding\tEncoding of the private key. Can be cb58 or hex.\tcb58 subnet_blockchains_check_name\tWhether to fail if a blockchain with the same name already exists\ttrue subnet_blockchains_list\tList of blockchains to create in the Subnet. See Blockchain configuration for the list structure.\tNA subnet_validators_add\tWhether to add the validatores from subnet_validators_params to the Subnet\ttrue subnet_validators_params\tValidation parameters for each validator to add to the Subnet. See Validators parameters.\t[] subnet_validator_start_time_command\tCommand used to dynamically compute start_time_command_output\t2 minutes from now using date subnet_validator_end_time_command\tCommand used to dynamically compute end_time_command_output\t1 week and 2 minutes from now using date subnet_validator_start_time\tStart time of the validation either in RFC 3339 format (YYYY-MM-DDTHH:MM:SSZ) or start_time_command_output that will be resolved by executing subnet_validator_start_time_command\tstart_time_command_output subnet_validator_end_time\tEnd time of the validation either in RFC 3339 format (YYYY-MM-DDTHH:MM:SSZ) or end_time_command_output that will be resoved by executing subnet_validator_end_time_command\tend_time_command_output subnet_validator_stake_or_weight\tDefault stake (for elastic Subnets) or weight (for permissioned Subnets) of validators\t100 subnet_validator_delegation_fee\tDefault delegation fee in percentage.\t2 ","version":"Next","tagName":"h2"},{"title":"Inventory requirements​","type":1,"pageTitle":"ash.avalanche.subnet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet#inventory-requirements","content":"The node used to issue transactions has to be in the subnet_txs_host group.The nodes to be added as validators to the Subnet have to be in the subnet_validators group. The Ansible host has to be able to connect to those nodes via SSH. ","version":"Next","tagName":"h2"},{"title":"Blockchain configuration​","type":1,"pageTitle":"ash.avalanche.subnet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet#blockchain-configuration","content":"Each blockchain in subnet_blockchains_list is defined by a dictionary with the following keys: name: Name of the blockchainvm: Name of the VM in the collection to use for the blockchain. See Supported VMs and AvalancheGo compatibility for the list of supported VMs.genesis_data: Genesis data of the blockchain. The structure of the genesis data is different for each VM: For the subnet-evm: config: chainId: 66666 homesteadBlock: 0 eip150Block: 0 eip150Hash: &quot;0x2086799aeebeae135c246c65021c82b4e15a2c451340993aacfd2751886514f0&quot; eip155Block: 0 eip158Block: 0 byzantiumBlock: 0 constantinopleBlock: 0 petersburgBlock: 0 istanbulBlock: 0 muirGlacierBlock: 0 subnetEVMTimestamp: 0 feeConfig: gasLimit: 8000000 minBaseFee: 25000000000 targetGas: 15000000 baseFeeChangeDenominator: 36 minBlockGasCost: 0 maxBlockGasCost: 1000000 targetBlockRate: 2 blockGasCostStep: 200000 alloc: 8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC: balance: &quot;0x295BE96E64066972000000&quot; nonce: &quot;0x0&quot; timestamp: &quot;0x0&quot; extraData: &quot;0x00&quot; gasLimit: &quot;0x7A1200&quot; difficulty: &quot;0x0&quot; mixHash: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot; coinbase: &quot;0x0000000000000000000000000000000000000000&quot; number: &quot;0x0&quot; gasUsed: &quot;0x0&quot; parentHash: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;  tip To generate the genesis data for a new blockchain, you can use the Avalanche CLI wizard. See Create the Subnet EVM blockchain configuration. ","version":"Next","tagName":"h2"},{"title":"Validators parameters​","type":1,"pageTitle":"ash.avalanche.subnet","url":"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet#validators-parameters","content":"Each validator can have its own validation parameters. The parameters are defined by a dictionary with the following keys: node_id: ID of the node to add as validatorstart_time: Start time of the validation in RFC 3339 format: YYYY-MM-DDTHH:MM:SSZ formatend_time: End time of the validation in RFC 3339 format: YYYY-MM-DDTHH:MM:SSZ formatstake_or_weight: Stake (for elastic Subnets) or weight (for permissioned Subnets) of the validatordelegation_fee: Delegation fee in percentage Default values are available as variables, e.g. subnet_validator_start_time. subnet_validators_params: - node_id: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg start_time: &quot;{{ subnet_validator_start_time }}&quot; end_time: &quot;{{ subnet_validator_end_time }}&quot; stake_or_weight: 100 delegation_fee: 2  ","version":"Next","tagName":"h2"},{"title":"Smart Contract Deployement","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#requirements","content":"Foundry installed. (See Install foundry.) ","version":"Next","tagName":"h2"},{"title":"Configure the environement​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#configure-the-environement","content":"To compile the contract, we need to clone two dependencies into the ash_token/lib folder. Command cd ash_token git clone https://github.com/foundry-rs/forge-std lib/forge-std git clone https://github.com/OpenZeppelin/openzeppelin-contracts.git lib/openzeppelin-contracts  ","version":"Next","tagName":"h2"},{"title":"Deploy the contract​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#deploy-the-contract","content":"In order to deploy the ASH token we need to sign the transaction and to configure the RPC URL. To do so, we will use the private key of the pre-funded account (see configure-the-subnet-transactions-wallet). tip This key is CB58-encoded which is not handled by forge commands. See show-information-about-the-wallet to retrieve the Hex-encoded version. We also need the RPC URL (see connect-to-the-subnet-and-start-issuing-transactions) for each command. Command export RPC_URL=http://${VALIDATOR01_IP}:9650/ext/bc/${BLOCKCHAIN_ID}/rpc export EWOQ_PRIVATE_KEY=0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027  Now, we can deploy our ERC20 with an initial supply of 200 tokens: Command forge create --rpc-url $RPC_URL --private-key $EWOQ_PRIVATE_KEY src/ASHToken.sol:ASHToken --constructor-args 200000000000000000000  info The openzepplin's ERC20 template is implemented with 18 decimal places, that's why we multiply 200 by 1e18. Output Compiler run successful! Deployer: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC Deployed to: 0xa4DfF80B4a1D748BF28BC4A271eD834689Ea3407 Transaction hash: 0xfeb4b67875c1daaf92be3cf7ffbb01fdfdbffcf81e81d4c9fd329397f492af99  ","version":"Next","tagName":"h2"},{"title":"Interact with the contract​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#interact-with-the-contract","content":"","version":"Next","tagName":"h2"},{"title":"Using cast​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#using-cast","content":"First we define the followings variables for convenience (Replace the contract address with the one indicated after deployment!): command export EWOQ_ADDR=0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC export CONTRACT_ADDRESS=0xa4DfF80B4a1D748BF28BC4A271eD834689Ea3407  Like forge, cast is a part of the foundry suit which allows us to interact with the contract: command cast call $CONTRACT_ADDRESS &quot;totalSupply()(uint256)&quot; --rpc-url $RPC_URL  Output 200000000000000000000000000000000000000 [2e38]  command cast call $CONTRACT_ADDRESS &quot;balanceOf(address)(uint256)&quot; $EWOQ_ADDR --rpc-url $RPC_URL  Output 200000000000000000000000000000000000000 [2e38]  ","version":"Next","tagName":"h3"},{"title":"Using your wallet​","type":1,"pageTitle":"Smart Contract Deployement","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/contract_deployement#using-your-wallet","content":"tip To be connected on the correct blockchain, please refer to connect-to-the-subnet-and-start-issuing-transactions section. Like every EVM-based blockchains, we can register a new token in a wallet (Core in our case) to interact with it. To do so, open the wallet, add a custom token and fill the contract address:  ","version":"Next","tagName":"h3"},{"title":"Create a Fuji node on AWS","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#requirements","content":"Python &gt;=3.9 with venv module installedAWS account and access key (see AWS docs) with correct permissions to manage EC2 instances (e.g.: AmazonEC2FullAccess)Terraform installed (see Install Terraform) info Terraform is an infrastructure as code tool that lets you build, change, and version infrastructure safely and efficiently For filtering outputs: jq (see Installation) note We recommend installing the Ash CLI to easily get information about your nodes and Subnets. See Ash CLI - Installation. The tutorials still provide the snippets to query the Avalanche APIs with cURL. ","version":"Next","tagName":"h2"},{"title":"Setup the environment​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#setup-the-environment","content":"Clone the Getting Started repository: git clone https://github.com/AshAvalanche/ansible-avalanche-getting-started cd ansible-avalanche-collection-getting-started Setup and activate Python venv: bin/setup.sh source .venv/bin/activate Install the ash.avalanche collection: ansible-galaxy collection install git+https://github.com/AshAvalanche/ansible-avalanche-collection.git Initialize the Terraform modules: terraform -chdir=terraform/aws init  ","version":"Next","tagName":"h2"},{"title":"Create EC2 instance with Terraform​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#create-ec2-instance-with-terraform","content":"Setup AWS keys environment variables: export AWS_SECRET_ACCESS_KEY=&quot;XXXXXXXXXXXXXXXXXXXXXXXXXX&quot; export AWS_ACCESS_KEY_ID=&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot; Created the resources with Terraform: terraform -chdir=terraform/aws apply  note This command will create the resources defined in main.tf including a t2.2xlarge EC2 instance with 300GiB of storage, an associated key pair and a security group configured to allow SSH (port 22) and default AVAX ports (9650 for HTTP and 9651 for staking) as well as all outbound traffic. Save the IP of the newly created EC2 instance: terraform -chdir=terraform/aws output fuji_node_ip Update inventories/fuji-aws/hosts with the IP of your EC2 instance. E.g.: inventories/fuji-aws/hosts aws-fuji-node ansible_host=35.171.27.213 ansible_user=ubuntu ansible_ssh_private_key_file=files/ansible_key.pem [avalanche_nodes] aws-fuji-node  tip Creating the EC2 instance with Terraform is not the only way to go, you can also create it manually using the AWS console or CLI. Just make sure to update inventories/fuji-aws/hosts so that Ansible knows how to connect to your EC2 instance. ","version":"Next","tagName":"h2"},{"title":"Provision Fuji node​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#provision-fuji-node","content":"We will use the ash.avalanche.provision_nodes playbook to install and configure AvalancheGo on our EC2 instance. ansible-playbook ash.avalanche.provision_nodes -i inventories/fuji-aws  tip The inventories/fuji-aws/group_vars/avalanche_nodes.yml file holds the configuration for the ash.avalanche.node role. We only override the avalanchego_version and avalanchego_network_id variables, leaving the others as default. For a list of all available variables, see ash.avalanche.node reference. ","version":"Next","tagName":"h2"},{"title":"Monitor bootstrapping​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#monitor-bootstrapping","content":"We can SSH to our EC2 instance to follow the synchronization of the P, X and C chains. For example with the P-chain: Commands ssh -i ./files/ansible_key.pem &quot;ubuntu@$YOUR_EC2_INSTANCE_IP&quot; cd /var/log/avalanche/avalanchego tail C.log  Output [06-02|09:16:47.131] INFO &lt;P Chain&gt; platformvm/vm.go:205 initializing last accepted {&quot;blkID&quot;: &quot;99BWrAqUMvTp9nXKXyjPsCqjGwDqVFqssTRQbu58af57Cf9VG&quot;} [06-02|09:16:47.132] INFO &lt;P Chain&gt; snowman/transitive.go:90 initializing consensus engine [06-02|09:16:47.133] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:115 starting bootstrapper [06-02|09:16:53.011] INFO &lt;P Chain&gt; common/bootstrapper.go:244 bootstrapping started syncing {&quot;numVerticesInFrontier&quot;: 1} [06-02|09:16:58.208] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 5000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;1m44s&quot;} [06-02|09:17:07.713] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 10000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;2m20s&quot;} [06-02|09:17:10.766] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 15000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;1m47s&quot;} [06-02|09:17:14.385] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 20000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;1m31s&quot;} [06-02|09:17:18.286] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 25000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;1m21s&quot;} [06-02|09:17:21.936] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:495 fetching blocks {&quot;numFetchedBlocks&quot;: 30000, &quot;numTotalBlocks&quot;: 105347, &quot;eta&quot;: &quot;1m13s&quot;}  Logs should look like this once the chain is bootstrapped: [06-02|09:18:18.373] INFO &lt;P Chain&gt; bootstrap/bootstrapper.go:554 executing blocks {&quot;numPendingJobs&quot;: 105347} [06-02|09:18:48.374] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 36081, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;58s&quot;} [06-02|09:19:18.395] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 43933, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;1m24s&quot;} [06-02|09:19:48.398] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 44159, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;2m5s&quot;} [06-02|09:20:18.554] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 44364, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;2m45s&quot;} [06-02|09:20:48.555] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 47613, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;3m2s&quot;} [06-02|09:21:18.556] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 64999, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;1m52s&quot;} [06-02|09:21:48.557] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 81297, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;1m2s&quot;} [06-02|09:22:18.558] INFO &lt;P Chain&gt; queue/jobs.go:203 executing operations {&quot;numExecuted&quot;: 96176, &quot;numToExecute&quot;: 105347, &quot;eta&quot;: &quot;23s&quot;} [06-02|09:22:34.657] INFO &lt;P Chain&gt; queue/jobs.go:224 executed operations {&quot;numExecuted&quot;: 105347}  tip By default, AvalancheGo is configured to use State Sync for faster node bootstrapping. If you want to run an archival node, you need to disable State Sync on the C-chain. This is configurable through the Ansible Avalanche Collection by adding the following keys to avalanche_nodes.yml: inventories/fuji-aws/group_vars/avalanche_nodes.yml avalanchego_chains_configs: C: state-sync-enabled: false  ","version":"Next","tagName":"h2"},{"title":"Issue API calls​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#issue-api-calls","content":"The node aws-fuji-node exposes AvalancheGo APIs on it's public IP: you can query any Avalanche API from your terminal. For example, to check if the P-Chain is done bootstrapping: Using the Ash CLIUsing cURL Command ash avalanche node is-bootstrapped C --http-host &quot;$YOUR_EC2_INSTANCE_IP&quot; Output Chain 'C' on node '$YOUR_EC2_INSTANCE_IP:9650': Bootstrapped ✓  ","version":"Next","tagName":"h2"},{"title":"Stop or start AvalancheGo​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#stop-or-start-avalanchego","content":"The ash.avalanche collection creates a systemd service to manage AvalancheGo. It can be stopped or started using the following commands: ssh -i ./files/ansible_key.pem &quot;ubuntu@$YOUR_EC2_INSTANCE_IP&quot; # Stop AvalancheGo systemctl stop avalanchego # Start AvalancheGo systemctl start avalanchego  ","version":"Next","tagName":"h2"},{"title":"Customization​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#customization","content":"Different aspects of the installation can be customized: To customize the EC2 instance specs (e.g.: instance type, storage capacity, etc.): edit terraform/aws/main.tf.To customize AvalancheGo installation: edit the variables in inventories/fuji-aws/group_vars/avalanche_nodes.yml. ","version":"Next","tagName":"h2"},{"title":"Where to go next?​","type":1,"pageTitle":"Create a Fuji node on AWS","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/fuji-node-aws#where-to-go-next","content":"All of our tutorials can be run on the EC2 instance created in this tutorial! Go ahead and deploy a Monitoring stack or learn how to Install the Subnet EVM to your node. ","version":"Next","tagName":"h2"},{"title":"Local Test Network Creation","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#requirements","content":"Python &gt;=3.9 with venv module installedFor the local test network: 7+GiB of free RAMMultipass installed (see Install Multipass) info Multipass is a tool to generate cloud-style Ubuntu VMs quickly on Linux, macOS, and Windows Terraform installed (see Install Terraform) info Terraform is an infrastructure as code tool that lets you build, change, and version infrastructure safely and efficiently For filtering outputs: jq (see Download jq) note We recommend installing the Ash CLI to easily get information about your nodes and Subnets. See Ash CLI - Installation. The tutorials still provide the snippets to query the Avalanche APIs with cURL. ","version":"Next","tagName":"h2"},{"title":"Setup the environment​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#setup-the-environment","content":"Clone the Getting Started repository: git clone https://github.com/AshAvalanche/ansible-avalanche-getting-started cd ansible-avalanche-getting-started Setup and activate Python venv: bin/setup.sh source .venv/bin/activate Install the ash.avalanche collection: ansible-galaxy collection install git+https://github.com/AshAvalanche/ansible-avalanche-collection.git Initialize the Terraform modules: terraform -chdir=terraform/multipass init  ","version":"Next","tagName":"h2"},{"title":"Bootstrap the local test network​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#bootstrap-the-local-test-network","content":"note This section uses the local inventory which is pre-configured as a local Avalanche network (see avalanchego_network_id: local in avalanche_nodes.yml). Create the virtual machines that will host the validator nodes using Terraform (enter yes when prompted): terraform -chdir=terraform/multipass apply  We will use the ash.avalanche.bootstrap_local_network playbook to bootstrap the local network. This playbook starts a first validator (validator01) and then boostrap additional nodes (validator02-05) from the first node, thus creating a local network. Bootstrap the Avalanche nodes: ansible-playbook ash.avalanche.bootstrap_local_network -i inventories/local  It's done! We now have a ready-to-use 5-nodes Avalanche local test network. ","version":"Next","tagName":"h2"},{"title":"Issue API calls​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#issue-api-calls","content":"The validator nodes expose AvalancheGo APIs on their local and public interfaces. Because the public IP address is not known in advance, it is easier to leverage multipass exec to query the Avalanche APIs on the local interface. For example, to check if the P-Chain is done bootstrapping: Command multipass exec validator01 -- curl -X POST --data '{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot; : 1, &quot;method&quot; : &quot;info.isBootstrapped&quot;, &quot;params&quot;: { &quot;chain&quot;: &quot;P&quot; } }' -H 'content-type:application/json;' http://127.0.0.1:9650/ext/info  Output {&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:{&quot;isBootstrapped&quot;:true},&quot;id&quot;:1}  info You can still use the public interface to query the API. To retrieve a node public IP address using the terraform output command as shown above. E.g. for validator02: terraform -chdir=terraform/multipass output -json validators_ips | jq '.[1]'  ","version":"Next","tagName":"h2"},{"title":"Use the Ash CLI​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#use-the-ash-cli","content":"The Ash CLI is a powerful tool to interact with Avalanche networks. See Ash CLI - Introduction for more information. ","version":"Next","tagName":"h2"},{"title":"Use the Ash CLI installed in the VMs​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#use-the-ash-cli-installed-in-the-vms","content":"The Ash CLI is installed and automatically configured in the Avalanche nodes of the local test network, and can be used through multipass exec. For example, to check if the P-Chain is done bootstrapping: Command multipass exec validator01 -- ash avalanche node is-bootstrapped P  Output Chain 'P' on node '127.0.0.1:9650': Bootstrapped ✓  ","version":"Next","tagName":"h3"},{"title":"Use the Ash CLI installed locally​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#use-the-ash-cli-installed-locally","content":"note See Ash CLI - Installation for the installation instructions on your platform. To use the Ash CLI with the local network, we need to use a custom configuration file. Fortunately, the local-test-network.yml file is generated by Terraform in the terraform/multipass directory. Set it as default for the Ash CLI: export ASH_CONFIG=terraform/multipass/local-test-network.yml export AVALANCHE_NETWORK=local  You can now use your local Ash CLI, e.g. to list all the Subnets on the local network: ash avalanche subnet list  ","version":"Next","tagName":"h3"},{"title":"Pre-funded account​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#pre-funded-account","content":"On local Avalanche networks, a pre-funded account is available with the following private key: CB58 encoded: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNNHex encoded: 0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027 We will use this account in the next tutorials. ","version":"Next","tagName":"h2"},{"title":"Customize the installation​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#customize-the-installation","content":"Different aspects of the installation can be customized: To customize the VMs specs: edit terraform/multipass/main.tfTo customize AvalancheGo installation: edit the variables in inventories/local/group_vars/avalanche_nodes.yml. For a list of all available variables, see ash.avalanche.node reference. ","version":"Next","tagName":"h2"},{"title":"Use Multipass to manage the VMs​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#use-multipass-to-manage-the-vms","content":"","version":"Next","tagName":"h2"},{"title":"List the VMs​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#list-the-vms","content":"multipass list  ","version":"Next","tagName":"h3"},{"title":"Stop/restart the VMs​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#stoprestart-the-vms","content":"# Stop all VMs multipass stop validator0{1..5} frontend # Start all VMs multipass start validator0{1..5} frontend # Restart all VMs multipass restart validator0{1..5} frontend  ","version":"Next","tagName":"h3"},{"title":"Teardown the local test network​","type":1,"pageTitle":"Local Test Network Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/local-test-network#teardown-the-local-test-network","content":"Destroy the virtual machines: terraform -chdir=terraform/multipass destroy Deactivate the Python venv: deactivate  ","version":"Next","tagName":"h2"},{"title":"Monitoring","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Monitoring","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring#requirements","content":"The ash.avalanche.install_monitoring_stack playbook installs Prometheus and Grafana through the prometheus.prometheus collection and the cloudalchemy.grafana role. We can make these available locally with: ansible-galaxy install -r ansible_collections/ash/avalanche/requirements.yml  ","version":"Next","tagName":"h2"},{"title":"Install the monitoring stack​","type":1,"pageTitle":"Monitoring","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring#install-the-monitoring-stack","content":"Grafana will be installed on the nodes of the grafana Ansible group and Prometheus on the prometheus Ansible group. In Ansible Avalanche Getting Started, it is the frontend node by default. You can change this by editing the hosts file. Prometheus Node Exporter will be installed on all nodes in the avalanche_nodes Ansible group. ansible-playbook ash.avalanche.install_monitoring_stack -i inventories/local  ","version":"Next","tagName":"h2"},{"title":"Grafana​","type":1,"pageTitle":"Monitoring","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring#grafana","content":"Generate the Grafana URL and open it in your browser: Command echo &quot;http://$(terraform -chdir=terraform/multipass output -raw frontend_ip):3000&quot;  Sample output http://10.117.207.108:3000  Fig.1 - Grafana tip The default admin credentials to log in Grafana in the local inventory provided by Ansible Avalanche Getting Started are admin:admin123. You can change it in grafana.yml. Nodes dashboards​ In the local inventory, Grafana is configured to connect with the Prometheus instance and comes with pre-built dashboards (see grafana.yml). The list of available dashboards can be found in the dashboards directory. Subnet dashboard​ If you created Subnet EVM blockchains in the Subnet Creation tutorial, you can configure the Grafana role to install a pre-configured dashboard for them. To do so, define the grafana_subnets_dashboard_variables variable (in grafana.yml for the local inventory): grafana_subnets_dashboard_variables: - text: Subnet EVM value: 2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac selected: true  Then rerun the install_monitoring_stack playbook: ansible-playbook ash.avalanche.install_monitoring_stack -i inventories/local  Fig.2 - Subnets dashboard tip If you deployed multiple Subnet EVM blockchains, you can define them all in the grafana_subnets_dashboard_variables variable, Grafana will display a dropdown menu to select the blockchain to display. ","version":"Next","tagName":"h3"},{"title":"Prometheus​","type":1,"pageTitle":"Monitoring","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring#prometheus","content":"Generate the Prometheus URL and open it in your browser: Command echo &quot;http://$(terraform -chdir=terraform/multipass output -raw frontend_ip):9090&quot;  Sample output http://10.117.207.108:9090  Fig.3 - Prometheus Targets​ In the local inventory, Prometheus is configured (see prometheus.yml) to scrape metrics from the Avalanche nodes (endpoint /ext/metrics on port 9650 of AvalancheGo, see documentation for details) and the Prometheus Node Exporter (port 9100 by default). caution The ash.avalanche.faucet role is not yet compatible with secured HTTP API endpoints. ","version":"Next","tagName":"h3"},{"title":"Node Upgrade","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/node-upgrade","content":"","keywords":"","version":"Next"},{"title":"Check the current AvalancheGo version​","type":1,"pageTitle":"Node Upgrade","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/node-upgrade#check-the-current-avalanchego-version","content":"Using the Ash CLIUsing cURL Let's start by checking the current version of my node(s) with the Ash CLI: Command multipass exec validator01 -- ash avalanche node info Output Node '127.0.0.1:9650': ID: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg Network: local Public IP: 10.117.207.160 Staking port: 9651 Versions: AvalancheGo: avalanche/1.10.9 [...]  As we can see above, our node is currently running AvalancheGo version 1.10.9. This is what's expected because of the Ansible role variable avalanchego_version: 1.10.9 set at avalanche_nodes.yml in our inventory. ","version":"Next","tagName":"h2"},{"title":"Upgrade the AvalancheGo version​","type":1,"pageTitle":"Node Upgrade","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/node-upgrade#upgrade-the-avalanchego-version","content":"Let's upgrade our nodes by changing the avalanchego_version Ansible variable to 1.10.10 with the following command: sed -i 's/avalanchego_version: 1.10.9/avalanchego_version: 1.10.10/' inventories/local/group_vars/avalanche_nodes.yml  We can then upgrade all the nodes defined in our Ansible inventory by running the provision_nodes playbook again: ansible-playbook ash.avalanche.provision_nodes -i inventories/local  ","version":"Next","tagName":"h2"},{"title":"Verify the new AvalancheGo version​","type":1,"pageTitle":"Node Upgrade","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/node-upgrade#verify-the-new-avalanchego-version","content":"Using the Ash CLIUsing cURL By running the same command as previously: multipass exec validator01 -- ash avalanche node info We can confirm that our node is now running AvalancheGo 1.10.10: Node '127.0.0.1:9650': ID: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg Network: local Public IP: 10.117.207.160 Staking port: 9651 Versions: AvalancheGo: avalanche/1.10.10 [...]  ","version":"Next","tagName":"h2"},{"title":"2. Blueprint Configuration and Apply","type":0,"sectionRef":"#","url":"/docs/console/guides/blueprint/blueprint-configuration","content":"","keywords":"","version":"Next"},{"title":"Download the blueprints​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#download-the-blueprints","content":"If not already done, create a folder for this guide and navigate to it: mkdir -p ash-console-guides/one-command-devnet cd ash-console-guides/one-command-devnet Download the devnet.yml and devnet-evm-subnet.yml blueprints from the ash-rs GitHub repository. curl -sSL https://raw.githubusercontent.com/AshAvalanche/ash-rs/main/crates/ash_cli/examples/console/blueprint/devnet.yml -o devnet.yml curl -sSL https://raw.githubusercontent.com/AshAvalanche/ash-rs/main/crates/ash_cli/examples/console/blueprint/devnet-evm-subnet.yml -o devnet-evm-subnet.yml  ","version":"Next","tagName":"h2"},{"title":"Review the blueprints​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#review-the-blueprints","content":"Let's take a look at the first blueprint, devnet.yml. You will see that it defines: 5 nodeId secrets for the 5 nodes of our Avalanche devnet (the node IDs of a local Avalanche network are hard-coded in AvalancheGo). A nodeId secret contains the TLS keys, certificates and BLS keys for an Avalanche node: secrets: - name: local-node-id-01 secretType: nodeId nodeId: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg nodeCert: LS0tLS... nodeKey: LS0tLS... nodeBlsKey: U2fcxy... # ... 1 project named ash-devnet and tied to the local network. It is the logical set that will contain all the resources of our devnet: projects: - project: name: ash-devnet network: local sharedResourceConfig: avalancheNodeConfig: avalanchego_version: 1.10.17 tip The project also defines sharedResourceConfig.avalancheNodeConfig that will be used by all the avalancheNode resources of the project. 1 region in the ash-devnet project. We will deploy all our resources in this region. regions: - cloudProvider: &quot;${CLOUD_PROVIDER}}&quot; region: &quot;${CLOUD_REGION}&quot; cloudCredentialsSecretId: &quot;${CLOUD_CREDENTIALS_SECRET}&quot; tip Here we reference environment variables that we will define in the next section. 5 avalancheNode resources in the ash-devnet project. Each avalancheNode resource references a nodeId secret: resources: - name: local-node-01 resourceType: avalancheNode cloudRegionId: &quot;${CLOUD_PROVIDER}/${CLOUD_REGION}&quot; nodeIdSecretId: local-node-id-01 size: small # ... tip We reference environment variables to determine to which cloud region the resources will be deployed. We will define these variables in the next section. The second blueprint, devnet-evm-subnet.yml, defines: 1 wallet secret. This wallet will be use to sign the Subnet transactions (creation, validator management, etc.) and the P-Chain address will be used as the control key of the Subnet. secrets: # Local network pre-funded account wallet - name: ewoq-key secretType: wallet pChainAddress: P-fuji18jma8ppw3nhx5r4ap8clazz0dps7rv5u6wmu4t privateKey: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN privateKeyFormat: cb58 danger Do not use this wallet as control key in production! 1 avalancheSubnet resource in the ash-devnet project. It references the ewoq-key secret above and defines a Subnet EVM blockchain to be created with a standard genesis configuration: resources: - name: ash-subnet resourceType: avalancheSubnet cloudRegionId: &quot;${CLOUD_PROVIDER}/${CLOUD_REGION}&quot; subnetControlKeySecretId: ewoq-key subnetConfig: createSubnet: true avalancheSubnetConfig: subnet_blockchains_list: - name: AshSubnetEVM vm: subnet-evm # ... tip The avalancheSubnetConfig field is following the same structure as the Ansible Avalanche Collection's ash.avalanche_subnet role. See Blockchain configuration for more information on how to generate a custom genesis configuration. ","version":"Next","tagName":"h2"},{"title":"Define environment variables​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#define-environment-variables","content":"A blueprint is very flexible thanks to the use of environment variables. Here we can dynamically specify the cloud provider, region, and cloud credentials secret ID. Let's define them depending on your cloud provider you set up in step 1: Example for AWSExample for AzureExample for Google Cloud export CLOUD_PROVIDER=aws export CLOUD_REGION=us-east-1 export CLOUD_CREDENTIALS_SECRET=aws-credentials  Of course, pick the CLOUD_REGION of your choice. ","version":"Next","tagName":"h2"},{"title":"Apply the devnet blueprint​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#apply-the-devnet-blueprint","content":"Everything is ready to deploy our devnet! Let's apply the first blueprint: Command ash console blueprint apply ./devnet.yml  The CLI will ask you to confirm the action: Confirmation prompt Blueprint summary Secrets 5 to create: local-node-id-01, local-node-id-02, local-node-id-03, local-node-id-04, local-node-id-05 0 to update: Projects 1 to create: - 'ash-devnet': Regions: aws/us-east-1 Resources: local-node-01, local-node-02, local-node-03, local-node-04, local-node-05 0 to update: ? Are you sure you want to apply this blueprint? (y/N) [This action is irreversible!]  Enter y and watch the magic happen! Output &gt; Are you sure you want to apply this blueprint? Yes Creating entities... Creating secret: local-node-id-01 Secret created successfully! +------------------+-------------+--------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +==================+=============+========+==================+=========+ | local-node-id-01 | f906...0afc | NodeId | 2024-01-02T11:54 | 0 | +------------------+-------------+--------+------------------+---------+ # ... Creating resource: ash-devnet:local-node-05 Resource successfully created in project 'ash-devnet'! +---------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===============+=============+===============+=================+=======+==================+=========+==========================+ | local-node-05 | cd99...0342 | AvalancheNode | 8d01...b4fc | Small | 2024-01-02T11:56 | Pending | IP address | None | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +---------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------+  ","version":"Next","tagName":"h2"},{"title":"Health​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#health","content":"It will take a few minutes before the local network is Bootstrapped and Healthy. You can get its updated status with the console resource info command: Command ash console resource info local-node-01 Output Resource 'local-node-01' of project 'devnet-guide': +-------------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------------+ | Resource name | Resource ID | Type | Cloud region ID | Size | Created at | Status | Resource specific | +===================+=============+===============+=================+========+==================+=========+================================+ | local-node-01 | 9419...6722 | AvalancheNode | 634d...c9d9 | Small | 2024-01-02T11:54 | Running | IP address | 3.210.183.166 | | | | | | | | | Running | true | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +-------------------+-------------+---------------+-----------------+-------+------------------+---------+--------------------------------+ Once a node is Running, you can also query the node info endpoint with the avalanche node info command: Command ash avalanche node info -n 3.210.183.166 Output Node '3.210.183.166:9650': ID: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg Network: local Public IP: 3.210.183.166 Staking port: 9651 Versions: AvalancheGo: avalanche/1.10.17 Database: v1.4.5 RPC Protocol: 28 Git commit: 145dfb0dc179d688f45ad44067ef6f9821148b36 VMs: AvalancheVM: v1.10.17 Coreth: v0.12.5 PlatformVM: v1.10.17 Subnet VMs: [] Uptime: Rewarding stake: 100% Weighted average: 100% note Your node IP address will be different. Your local Avalanche network is now up and running! ","version":"Next","tagName":"h2"},{"title":"Apply the Subnet blueprint​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#apply-the-subnet-blueprint","content":"Now that we have a devnet ready to be used, we can apply the second blueprint, devnet-evm-subnet.yml: Command ash console blueprint apply ./devnet-evm-subnet.yml  The CLI will ask you to confirm the action: Confirmation prompt Blueprint summary Secrets 1 to create: ewoq-key 0 to update: Projects 0 to create: 1 to update: - 'ash-devnet': Resources: ash-subnet ? Are you sure you want to apply this blueprint? (y/N) [This action is irreversible!]  Enter y and watch the magic happen! Output &gt; Are you sure you want to apply this blueprint? Yes Creating entities... Creating secret: ewoq-key Secret created successfully! +-------------+-------------+--------+------------------+---------+ | Secret name | Secret ID | Type | Created at | Used by | +=============+=============+========+==================+=========+ | ewoq-key | e9b0...5e35 | Wallet | 2024-01-30T17:25 | 0 | +-------------+-------------+--------+------------------+---------+ Updating entities... Updating project: ash-devnet Project updated successfully! +--------------+-------------+---------+-----------------+--------------------+------------------+ | Project name | Project ID | Network | Cloud regions | Resources | Created at | +==============+=============+=========+=================+====================+==================+ | ash-devnet | 3443...5326 | Local | aws/us-east-1 | avalancheNode: 5 | 2024-01-30T13:21 | +--------------+-------------+---------+-----------------+--------------------+------------------+ Adding resource: ash-devnet:ash-subnet Resource successfully created in project 'ash-devnet'! +---------------+-------------+-----------------+---------------+-------+------------------+---------+-------------------+ | Resource name | Resource ID | Type | Cloud region | Size | Created at | Status | Resource specific | +===============+=============+=================+===============+=======+==================+=========+===================+ | ash-subnet | 396d...6cc8 | AvalancheSubnet | aws/us-east-1 | Small | 2024-01-30T17:26 | Pending | ID | | | | | | | | | | Validators | 0 | +---------------+-------------+-----------------+---------------+-------+------------------+---------+-------------------+  ","version":"Next","tagName":"h2"},{"title":"Subnet information​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#subnet-information","content":"After a few minutes, we can get the Subnet ID, control keys, blockchains, and validator nodes information from the subnetStatus field returned by the console resource info command: Command ash console resource info ash-subnet --json | jq '.subnetStatus'  tip We use the --json flag to get the extended information about the Subnet. All those information cannot be displayed in a table format. Output { &quot;blockchains&quot;: [ { &quot;id&quot;: &quot;RfX8YRUHePxFENBZFwaNt1tP6CR6RQ4hJJ5AqYv49LRoSKniK&quot;, &quot;name&quot;: &quot;AshLocalEVM&quot;, &quot;vm_id&quot;: &quot;srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy&quot;, &quot;vm_type&quot;: &quot;SubnetEVM&quot; } ], &quot;controlKeys&quot;: [ &quot;P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u&quot; ], &quot;id&quot;: &quot;29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL&quot;, &quot;pendingValidators&quot;: [], &quot;subnetType&quot;: &quot;Permissioned&quot;, &quot;threshold&quot;: 1, &quot;validators&quot;: [ { &quot;connected&quot;: true, &quot;end_time&quot;: 1707486609, &quot;node_id&quot;: &quot;NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ&quot;, &quot;stake_amount&quot;: 100, &quot;start_time&quot;: 1706881809, &quot;tx_id&quot;: &quot;DhEgYijBur6QDUDgUMpmDAyF5XGyq6JwG919B8bkryDLijvua&quot;, &quot;uptime&quot;: 100, &quot;weight&quot;: 100 }, # ... ] }  ","version":"Next","tagName":"h2"},{"title":"Blockchain RPC endpoint​","type":1,"pageTitle":"2. Blueprint Configuration and Apply","url":"/docs/console/guides/blueprint/blueprint-configuration#blockchain-rpc-endpoint","content":"The CLI provides a powerful helper to get the RPC endpoint that can be used to query the Subnet EVM blockchain (e.g. to connect a Web3 wallet). Provide the avalancheNode resource name to be used as RPC and the avalancheSubnet resource name: Command ash console helper rpc local-node-01 ash-subnet  Output AshLocalEVM RCP endpoint: http://44.223.28.33:9650/ext/bc/RfX8YRUHePxFENBZFwaNt1tP6CR6RQ4hJJ5AqYv49LRoSKniK/rpc  note See the reference for more information about resources lifecycle management. ","version":"Next","tagName":"h2"},{"title":"Nodes Rolling Restart","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart","content":"","keywords":"","version":"Next"},{"title":"Disable automatic restarts​","type":1,"pageTitle":"Nodes Rolling Restart","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart#disable-automatic-restarts","content":"By default, any change to the node/VMs versions or configurations will trigger a restart of AvalancheGo. This is fine for testing purposes but not recommended for Subnet validators, (especially for a small-size permissioned Subnet where each validator has a high weight). To disable automatic restarts, set avalanchego_auto_restart to false in the avalanche_nodes.yml group variables file: avalanchego_auto_restart: false  ","version":"Next","tagName":"h2"},{"title":"Trigger a rolling restart of the nodes​","type":1,"pageTitle":"Nodes Rolling Restart","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart#trigger-a-rolling-restart-of-the-nodes","content":"After an upgrade or configation change, use the rolling_restart playbook. This playbook will restart every node sequentially, waiting for the node to be bootstrapped on all chains and healthy on all tracked Subnets before moving to the next node. ansible-playbook ash.avalanche.rolling_restart -i inventories/local  info It can take a while for a node to be bootstrapped and healthy depending on the node hardware and the Subnet activity. ","version":"Next","tagName":"h2"},{"title":"Cloud Credentials","type":0,"sectionRef":"#","url":"/docs/console/reference/cloud-credentials","content":"","keywords":"","version":"Next"},{"title":"Create cloud credentials​","type":1,"pageTitle":"Cloud Credentials","url":"/docs/console/reference/cloud-credentials#create-cloud-credentials","content":"caution The Ash Console needs some high privileges to deploy resources into your cloud accounts/subscriptions/projects. We recommend you to create a dedicated account/subscription/project for the Console. Check with your internal security team if you have any doubt. On AWSOn AzureOn Google Cloud The Ash Console needs specific permissions to deploy resources into your AWS account. We will create a custom policy and assign it to a new user. Create a custom policy with limited permissions Navigate to AWS IAM/Policies and create a new policy: Switch the editor to JSON mode and replace the content with the following JSON: { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;AshConsoleEC2Actions&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;ec2:AssociateIamInstanceProfile&quot;, &quot;ec2:AttachVolume&quot;, &quot;ec2:AuthorizeSecurityGroupIngress&quot;, &quot;ec2:CreateSecurityGroup&quot;, &quot;ec2:CreateTags&quot;, &quot;ec2:CreateVolume&quot;, &quot;ec2:DeleteSecurityGroup&quot;, &quot;ec2:DeleteVolume&quot;, &quot;ec2:DescribeAccountAttributes&quot;, &quot;ec2:DescribeAvailabilityZones&quot;, &quot;ec2:DescribeIamInstanceProfileAssociations&quot;, &quot;ec2:DescribeInstances&quot;, &quot;ec2:DescribeInstanceTypeOfferings&quot;, &quot;ec2:DescribeInstanceTypes&quot;, &quot;ec2:DescribeInternetGateways&quot;, &quot;ec2:DescribeNetworkInterfaces&quot;, &quot;ec2:DescribeRouteTables&quot;, &quot;ec2:DescribeSecurityGroups&quot;, &quot;ec2:DescribeSpotPriceHistory&quot;, &quot;ec2:DescribeSubnets&quot;, &quot;ec2:DescribeVolumes&quot;, &quot;ec2:DescribeVpcs&quot;, &quot;ec2:DetachVolume&quot;, &quot;ec2:RevokeSecurityGroupIngress&quot;, &quot;ec2:RunInstances&quot;, &quot;ec2:TerminateInstances&quot; ], &quot;Resource&quot;: &quot;*&quot; }, { &quot;Sid&quot;: &quot;AshConsoleIAMActions&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;iam:AddRoleToInstanceProfile&quot;, &quot;iam:CreateInstanceProfile&quot;, &quot;iam:CreateRole&quot;, &quot;iam:DeleteInstanceProfile&quot;, &quot;iam:DeleteRole&quot;, &quot;iam:DeleteRolePolicy&quot;, &quot;iam:GetInstanceProfile&quot;, &quot;iam:GetRole&quot;, &quot;iam:ListInstanceProfiles&quot;, &quot;iam:ListRolePolicies&quot;, &quot;iam:ListRoles&quot;, &quot;iam:PassRole&quot;, &quot;iam:PutRolePolicy&quot;, &quot;iam:RemoveRoleFromInstanceProfile&quot; ], &quot;Resource&quot;: &quot;*&quot; }, { &quot;Sid&quot;: &quot;AshConsoleSSMActions&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;ssm:ListInstanceAssociations&quot;, &quot;ssm:UpdateInstanceInformation&quot; ], &quot;Resource&quot;: &quot;*&quot; } ] } Click on Next Review and create: Name: AshConsole Click on Create policy Create a user and assign the custom policy Navigate to AWS IAM/Users and create a new user: User details: User name: ash-console-creds-01 Click on NextSet permissions: Permissions options: Attach policies directlyPermissions policies: AshConsole Click on NextClick on Create user Go to the newly created user interface IAM/Users/ash-console-creds-01 Navigate to the Security credentials tabClick on Create access key under Access keysSelect the Other use caseSet description tag: ash-console-access-key-01 Save the Access key and Secret access key somewhere safe ","version":"Next","tagName":"h2"},{"title":"Add cloud credentials to the Console as a secret​","type":1,"pageTitle":"Cloud Credentials","url":"/docs/console/reference/cloud-credentials#add-cloud-credentials-to-the-console-as-a-secret","content":"AWS credentialsAzure credentialsGoogle credentials Using the Ash CLIUsing the Ash Console API To create a new awsCredentials secret, use the create secret command and provide the required secret properties as JSON: Command ash console secret create '{ name: my-aws-credentials, secretType: awsCredentials, accessKey: &quot;***&quot;, secretKey: &quot;***&quot; }' Output Secret created successfully! +--------------------------------------+-------------+--------------------+----------------+------------------+---------+ | Secret ID | Owner ID | Name | Type | Created at | Used by | +======================================+=============+====================+================+==================+=========+ | 36296030-7a2b-4df6-9b17-6a79c4214e59 | 2870...dc26 | my-aws-credentials | AwsCredentials | 2023-11-08T16:04 | 0 | +--------------------------------------+-------------+--------------------+----------------+------------------+---------+ You can now use the secret upon cloud region addition to a project! ","version":"Next","tagName":"h2"},{"title":"Subnet Blockchain Explorer","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Subnet Blockchain Explorer","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer#requirements","content":"The ash.avalanche.faucet role uses Docker and the ash.avalanche.install_blockscout_docker playbook installs Docker through the geerlingguy.docker. We can make this role available locally with: ansible-galaxy install -r ansible_collections/ash/avalanche/requirements.yml  ","version":"Next","tagName":"h2"},{"title":"Configure Blockscout​","type":1,"pageTitle":"Subnet Blockchain Explorer","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer#configure-blockscout","content":"The Blockscout instance will be installed as a Docker Compose service on the nodes of the blockscout Ansible group. In Ansible Avalanche Getting Started, it is the frontend node by default. You can change this by editing the hosts file. Set the blockchain ID in blockscout.yml (the group_vars file associated with our hosts' group): inventories/local/group_vars/blockscout.yml blockscout_blockchain_id: 2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac  The blockchain ID (2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac in our case) should be the one created in the Subnet Creation tutorial. tip If you went through all the tutorials with the local inventory and the default variables, you should be good to go! Otherwise, check out the other variables at ash.avalanche.evm.blockscout. ","version":"Next","tagName":"h2"},{"title":"Install Blockscout​","type":1,"pageTitle":"Subnet Blockchain Explorer","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer#install-blockscout","content":"Running the ash.avalanche.install_blockscout_docker will install Docker and the docker-compose service: ansible-playbook ash.avalanche.install_blockscout_docker -i inventories/local  Generate the Blockscout URL and open it in your browser: Command echo &quot;http://$(terraform -chdir=terraform/multipass output -raw frontend_ip)&quot;  Sample output http://10.117.207.108  Fig.1 - Ash Blockscout caution The ash.avalanche.evm.blockscout role is not yet compatible with secured HTTP API endpoints. ","version":"Next","tagName":"h2"},{"title":"Subnet Creation","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation","content":"","keywords":"","version":"Next"},{"title":"Configure the Subnet​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#configure-the-subnet","content":"All the transactions related to the Subnet creation will be issued from the subnet_txs_host node of the Ansible inventory. Thus, we configure the Subnet in inventories/local/group_vars/subnet_txs_host.yml. ","version":"Next","tagName":"h2"},{"title":"Configure the blockchains​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#configure-the-blockchains","content":"The ash.avalanche.subnet role allows to configure the blockchains that will be created in the Subnet with the subnet_blockchains_list variable. You can edit the blockchains parameters, e.g. its name: inventories/local/group_vars/subnet_txs_host.yml subnet_blockchains_list: - name: AshLocalEVM vm: subnet-evm genesis_data: config: chainId: 66666 homesteadBlock: 0 eip150Block: 0 [...]  ","version":"Next","tagName":"h3"},{"title":"Configure the validators list​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#configure-the-validators-list","content":"There are 2 ways to add validators to the Subnet: With the subnet_validators Ansible group​ info You need to have SSH access to the nodes to use this method. Add validators to the subnet_validators group in the inventory. This is the most convenient way because the validators' node IDs are automatically resolved on each host (in the ash.avalanche.node.add-validator playbook). In the local inventory, the subnet_validators group is already configured with all the nodes: inventories/local/hosts [subnet_validators] validator0[1:5]  With the subnet_validators_params variable​ Add validators to the subnet_validators_params variable. This is especially useful: To include third-party nodes to which you don't have SSH accessTo customize validations parameters for each validator (e.g. the start and end times, the weight, etc.) For this tutorial, we will not use this method but we configured the first validator as an example: inventories/local/group_vars/subnet_txs_host.yml subnet_validators_params: - node_id: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg start_time: &quot;{{ subnet_validator_start_time }}&quot; end_time: &quot;{{ subnet_validator_end_time }}&quot; stake_or_weight: 100 delegation_fee: 2  ","version":"Next","tagName":"h3"},{"title":"Configure the Subnet transactions wallet​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#configure-the-subnet-transactions-wallet","content":"info The wallet P-Chain address will be used as the Subnet control key. Creating Subnets, blockchains and adding validators requires using a wallet to pay for transaction fees. The private key of the wallet is configured with the subnet_txs_private_key variable: inventories/local/group_vars/subnet_txs_host.yml # Private key of the pre-funded account subnet_txs_private_key: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN subnet_txs_key_encoding: cb58  You can use another wallet by changing the subnet_txs_private_key variable. See Wallet funding for more information on how to create and fund a wallet using the Ash CLI. ","version":"Next","tagName":"h3"},{"title":"Extra configuration​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#extra-configuration","content":"Extra configuration is possible for the Subnet, e.g. the validation start and end times, the validator weight, etc. For a list of all available variables, see the ash.avalanche.subnet role reference. ","version":"Next","tagName":"h3"},{"title":"Create the Subnet​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#create-the-subnet","content":"Run the ash.avalanche.create_subnet playbook to create the Subnet, blockchains and add validators: ansible-playbook ash.avalanche.create_subnet -i inventories/local  At the end of the Subnet creation, information about the new Subnet is displayed: ok: [validator01] =&gt; msg: |- The Subnet has been created with its blockchains, and the validators added. Make sure to add the Subnet ID to the `avalanchego_track_subnets` list of each validator. Subnet ID = p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6  info This playbook calls The ash.avalanche.subnet role to create the Subnet, the blockchains and add the validators from the subnet_validators_list variableThe ash.avalanche.node.add-validator playbook to add the validators from the subnet_validators group ","version":"Next","tagName":"h2"},{"title":"Track the Subnet with the validators​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#track-the-subnet-with-the-validators","content":"The ash.avalanche.subnet role does not handle Subnet tracking on validator nodes. The list of tracked Subnets is handled by the avalanchego_track_subnets variable in the ash.avalanche.node role. To track the Subnet on our nodes: Add the Subnet ID to the avalanchego_track_subnets variable. For this tutorial, this variable is in avalanche_nodes.yml: inventories/local/group_vars/avalanche_nodes.yml avalanchego_track_subnets: - p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6 Run the ash.avalanche.provision_nodes to apply the new configuration and restart the : ansible-playbook ash.avalanche.provision_nodes -i inventories/local  ","version":"Next","tagName":"h2"},{"title":"Check the Subnet validators​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#check-the-subnet-validators","content":"After 2 minutes, we can check the validators list of the Subnet: Using the Ash CLIUsing cURL note If not already done, configure the Ash CLI for local Avalanche network by following Configure the Ash CLI for your network. Command multipass exec validator01 -- ash avalanche subnet info p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6 Output Subnet 'p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6': Type: Permissioned Control keys: [&quot;P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u&quot;] Threshold: 1 Blockchains list (1): - AshLocalEVM: ID: 2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac VM ID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy VM type: SubnetEVM Validators list (5): - NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg - NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ - NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN - NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu - NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5 tip You can use the --extended flag to get more information about the validators, notably their weight and the start/end time of their validation period. ","version":"Next","tagName":"h2"},{"title":"Connect to the Subnet and start issuing transactions​","type":1,"pageTitle":"Subnet Creation","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation#connect-to-the-subnet-and-start-issuing-transactions","content":"The Subnet is now ready to be used! You can connect any EVM-compatible wallet (e.g. MetaMask, Core, Frame, etc.) to it and start issuing transactions, deploying smart contracts, etc. Use the following settings to connect to the Subnet: Network name: AshLocalEVM New RPC URL: http://${VALIDATOR01_IP}:9650/ext/bc/${BLOCKCHAIN_ID}/rpc Chain ID: 66666 Symbol: ASH Explorer URL: http://${FRONTEND_IP}:4000 To get the public IP addresses of the nodes, you can use the following command: # For VALIDATOR01 terraform -chdir=terraform/multipass output -json validators_ips | jq '.[0]' # For FRONTEND terraform -chdir=terraform/multipass output frontend_ip  To get the blockchain ID, you can use the following command: multipass exec validator01 -- ash avalanche subnet info &quot;$SUBNET_ID&quot; -j | jq '.blockchains[0].id'  note See the Subnet Blockchain Explorer tutorial to install the block explorer! ","version":"Next","tagName":"h2"},{"title":"Subnet Faucet","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-faucet","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"Subnet Faucet","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-faucet#requirements","content":"The ash.avalanche.faucet role uses Docker and the ash.avalanche.install_faucet_docker playbook installs Docker through the geerlingguy.docker. We can make this role available locally with: ansible-galaxy install -r ansible_collections/ash/avalanche/requirements.yml  ","version":"Next","tagName":"h2"},{"title":"Configure the faucet​","type":1,"pageTitle":"Subnet Faucet","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-faucet#configure-the-faucet","content":"The Avalanche Faucet will be installed as a Docker Compose service on the nodes of the faucet Ansible group. In Ansible Avalanche Getting Started, it is the frontend node by default. You can change this by editing the hosts file. Set the blockchain ID in faucet.yml (the group_vars file associated with our hosts' group): inventories/local/group_vars/faucet.yml faucet_blockchain_id: 2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac  The blockchain ID (2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac in our case) should be the one created in the Subnet Creation tutorial. tip If you went through all the tutorials with the local inventory and the default variables, you should be good to go! Otherwise, check out the other variables at ash.avalanche.faucet. ","version":"Next","tagName":"h2"},{"title":"Install the faucet​","type":1,"pageTitle":"Subnet Faucet","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-faucet#install-the-faucet","content":"Running the ash.avalanche.install_faucet_docker will install Docker and the docker-compose service: ansible-playbook ash.avalanche.install_faucet_docker -i inventories/local  Generate the Faucet URL and open it in your browser: Command echo &quot;http://$(terraform -chdir=terraform/multipass output -raw frontend_ip):8000&quot;  Sample output http://10.117.207.108:8000  Fig.1 - Ash faucet caution The ash.avalanche.faucet role is not yet compatible with secured HTTP API endpoints. ","version":"Next","tagName":"h2"},{"title":"Blockchain VM Management","type":0,"sectionRef":"#","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management","content":"","keywords":"","version":"Next"},{"title":"Install a VM​","type":1,"pageTitle":"Blockchain VM Management","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management#install-a-vm","content":"note For now only the Subnet EVM is supported by the collection, see section Install a custom VM if you want to use the collection to install your own VM. The VMs are managed by the avalanchego_vms_install role variable which is empty by default (avalanchego_vms_install: {}). To add a new VM that will be installed on our validator nodes, we just have to update the avalanchego_vms_install variable. For the next example, we will install Ava Labs' Subnet EVM in version 0.5.5. The variable we are should be added to avalanche_nodes.yml: inventories/local/group_vars/avalanche_nodes.yml avalanchego_vms_install: subnet-evm: 0.5.5  We can then install this VM to all the nodes defined in our Ansible inventory by running the provision_nodes playbook again: ansible-playbook ash.avalanche.provision_nodes -i inventories/local  tip The Ash team maintains a AvalancheGo / Ava Labs' VMs compatibility matrix that keeps you from mistakenly add a VM that is not compatible with your current AvalancheGo version which could cause a critical node failure. The VM binary can then be found on the Avalanche node at /opt/avalanche/avalanchego/current/plugins/: Command # First SSH to the node multipass shell validator01 ll /opt/avalanche/avalanchego/current/plugins/  Output total 8 drwxr-xr-x 2 avalanche avalanche 4096 Jul 25 11:21 ./ drwxr-xr-x 3 avalanche avalanche 4096 Jul 25 11:05 ../ lrwxrwxrwx 1 root root 58 Jul 25 11:21 subnet-evm -&gt; /opt/avalanche/vms/subnet-evm/subnet-evm-v0.5.5/subnet-evm*  AvalancheGo has been automatically restarted and the VM is ready to be used. ","version":"Next","tagName":"h2"},{"title":"Upgrade a VM​","type":1,"pageTitle":"Blockchain VM Management","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management#upgrade-a-vm","content":"Upgrading a VM is as simple as updating the avalanchego_vms_install variable. For example, if we want to upgrade the subnet-evm from version 0.5.5 to 0.5.6: inventories/local/group_vars/avalanche_nodes.yml avalanchego_vms_install: subnet-evm: 0.5.6  Re-run the provision_nodes playbook: ansible-playbook ash.avalanche.provision_nodes -i inventories/local  /opt/avalanche/avalanchego/current/plugins/ has been updated accordingly: Command multipass shell validator01 ll /opt/avalanche/avalanchego/current/plugins/  Output total 8 drwxr-xr-x 2 avalanche avalanche 4096 Jul 25 11:22 ./ drwxr-xr-x 3 avalanche avalanche 4096 Jul 25 11:05 ../ lrwxrwxrwx 1 root root 58 Jul 25 11:22 subnet-evm -&gt; /opt/avalanche/vms/subnet-evm/subnet-evm-v0.5.6/subnet-evm*  ","version":"Next","tagName":"h2"},{"title":"Uninstall a VM​","type":1,"pageTitle":"Blockchain VM Management","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management#uninstall-a-vm","content":"Uninstalling a VM can be done by removing it from the avalanchego_vms_install variable and re-running the provision_nodes playbook. ","version":"Next","tagName":"h2"},{"title":"Install a custom VM​","type":1,"pageTitle":"Blockchain VM Management","url":"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management#install-a-custom-vm","content":"You can use the Ansible Avalanche Collection to install your own VMs by extending the compatibility matrix. In this example, we will add Movement Labs's M1, a VM bringing an Aptos-compatible blockchain to the Subnet ecosystem. The compatibility matrix is managed by the avalanchego_vms_list role variable. We can extend the list by adding the following to avalanche_nodes.yml. # List of VMs supported by the collection avalanchego_vms_list: m1: download_url: https://github.com/AshAvalanche/M1/releases/download id: qCP4kDnEWVorqyoUmcAtAmJybm8gXZzhHZ7pZibrJJEWECooU ash_vm_type: Custom binary_filename: m1 versions_comp: 0.1.0: ge: 1.10.9 le: 1.10.12  Here are some details about the variables: m1: The name of the VM.download_url: URL where the VM binary archive and checksum can be downloaded from.id: The VM ID (see Installing a VM).ash_vm_type: The VM type used by the Ash CLI. Custom for a custom VM.binary_filename: The name of the VM binary (will be used to generate the archive filename, the checksum filename and the extracted binary filename)versions_comp: AvalancheGo version boundaries for which the VM is compatible. le is for &quot;less or equal&quot; and ge for &quot;greater or equal&quot;. tip By defining the m1 VM with the variables above, the collection will download the VM binary archive from https://github.com/AshAvalanche/M1/releases/download/v0.1.0/m1_0.1.0_linux_amd64.tar.gz, validate its SHA-256 checksum with https://github.com/AshAvalanche/M1/releases/download/v0.1.0/m1_0.1.0_checksums.txt and extract the m1 VM binary. With the example above, we can now install the M1 VM to our nodes by adding the following to avalanche_nodes.yml: inventories/local/group_vars/avalanche_nodes.yml avalanchego_vms_install: m1: 0.1.0  We can then install this VM to all the nodes defined in our Ansible inventory by running the provision_nodes playbook again: ansible-playbook ash.avalanche.provision_nodes -i inventories/local  caution For security reasons, the collection will checksum test the downloaded VM. The checksum file must be available at the same location as the VM binary archive. The standard follows is the same as Ava Lab's Subnet EVM (see release v0.5.3 for an example.). ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/installation","content":"","keywords":"","version":"Next"},{"title":"Rust native method: cargo install​","type":1,"pageTitle":"Installation","url":"/docs/toolkit/ash-cli/installation#rust-native-method-cargo-install","content":"info The installation can take a few minutes as it will compile the CLI and all its dependencies. Prior to installing the CLI, you need to install Rust on your machine. Follow the official installation instructions to install Rust. cargo install ash_cli  This will make the ash command available in your terminal. ash help  ","version":"Next","tagName":"h2"},{"title":"Fastest method: binary release download​","type":1,"pageTitle":"Installation","url":"/docs/toolkit/ash-cli/installation#fastest-method-binary-release-download","content":"The binary releases are available on the GitHub releases page. Download the latest release (e.g. v0.4.0) and make it executable: export ASH_VERSION=v0.4.0 # Can be 'linux' or 'macos' export OS=linux # Can be 'amd64' or 'arm64' export ARCH=amd64 # Download the binary archive curl -sSfL &quot;https://github.com/AshAvalanche/ash-rs/releases/download/${ASH_VERSION}/ash-${OS}-${ARCH}-${ASH_VERSION}.tar.gz&quot; -o &quot;ash-${OS}-${ARCH}-${ASH_VERSION}.tar.gz&quot; # Verify binary checksum curl -sSfL &quot;https://github.com/AshAvalanche/ash-rs/releases/download/${ASH_VERSION}/ash-${OS}-${ARCH}-${ASH_VERSION}.tar.gz.sha512&quot; | sha512sum -c # Extract the binary tar -xzf &quot;ash-${OS}-${ARCH}-${ASH_VERSION}.tar.gz&quot; # Make the binary executable chmod +x ash  You are now ready to use the Ash CLI! ./ash help  tip On MacOS, you will probably need to allow the binary to run in your security settings. ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/introduction","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ash-cli/introduction#features","content":"The easiest way to explore 🔍 Avalanche networks from the command line See the Network Exploration tutorial ash avalanche help Interact with Avalanche Subnets, blockchains and nodes Usage: ash avalanche [OPTIONS] &lt;COMMAND&gt; Commands: network Interact with Avalanche networks node Interact with Avalanche nodes subnet Interact with Avalanche Subnets validator Interact with Avalanche validators x Interact with Avalanche X-Chain wallet Interact with Avalanche wallets help Print this message or the help of the given subcommand(s)  Support for any Avalanche network with custom configuration 📝 See the Custom Configuration tutorial. ~/.config/ash/my-custom-config.yml --- avalancheNetworks: - name: my-network subnets: - id: 11111111111111111111111111111111LpoYY subnetType: PrimaryNetwork blockchains: - id: 11111111111111111111111111111111LpoYY name: P-Chain vmType: PlatformVM rpcUrl: http://validator01.ash.local:9650/ext/bc/P [...]  Create Subnets and blockchains 🛠️, 100% compatible with Avalanche CLI wizard Use the Avalanche CLI wizard to configure the Subnet and Ash CLI to create it. See the Local Subnet Creation tutorial. ash avalanche blockchain create testSubnetEVM \\ --subnet-id GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk \\ --vm-type SubnetEVM \\ --genesis-file /tmp/encoded-genesis.json -w Waiting for transaction to be accepted... Blockchain created! (Tx ID: 'i2ZXw8NbVFxUK3kMjpwPtF2T3mtyoc6VWuH41rMfbc1NWE1Pb') Blockchain 'testSubnetEVM': ID: i2ZXw8NbVFxUK3kMjpwPtF2T3mtyoc6VWuH41rMfbc1NWE1Pb VM ID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy VM type: SubnetEVM  Lightweight (written in Rust 🦀) and perfect for scripting with JSON output export AVALANCHE_NETWORK=my-network export ASH_CONFIG=~/.config/ash/my-network.yml export ASH_JSON=true ash avalanche validator info NodeID-CskPetRMvtH5Xr6gLa5cwfY4hR34UgkM5 | jq '.uptime'  The command line companion 🧑‍💻 of all the other Ash tools Coming soon! Stay tuned by following @ash_avax 🐦! ","version":"Next","tagName":"h2"},{"title":"Motivation​","type":1,"pageTitle":"Introduction","url":"/docs/toolkit/ash-cli/introduction#motivation","content":"Several factors motivated us to create the Ash CLI: The need of an easy and scriptable way to explore Avalanche networks from the command line A network information is accessible through AvalancheGo JSON-RPC APIs, that are not made to be queried directly by developers. Extra development is required to reach an acceptable level of usability (don't tell us you like querying JSON-RPC endpoints with cURL 😬).The API layout is not optimal for all queries and sometimes requires multiple calls to get the desired information. The Ash CLI abstracts this complexity and provides a single command to get the information you need. Let's see how easy it is to list all the blockchains of the Vn3aX6hNRstj5VHHm63TCgPNaeGnRSqCYXQqemSqDd2TQH4qJ Subnet using Ash CLI vs cURL: Using cURLUsing the Ash CLI curl -s -X POST --data '{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;platform.getBlockchains&quot;, &quot;params&quot;: {}, &quot;id&quot;: 1 }' -H 'content-type:application/json;' https://api.avax.network/ext/bc/P | jq '.result.blockchains[] | select(.subnetID == &quot;Vn3aX6hNRstj5VHHm63TCgPNaeGnRSqCYXQqemSqDd2TQH4qJ&quot;)'   Limitations of the Avalanche CLI developped by Ava Labs The Avalanche CLI only support using the avalanche-network-runner for local/private networks. We needed a way to interact with any Avalanche network.The Avalanche CLI outputs were not made to be parsed, which makes it impossible to use it in scripts, CI/CD pipelines or other automation tools. The --json flag is available on all Ash CLI commands, making it super easy to filter the output with tools like jq: ash avalanche validator info NodeID-CskPetRMvtH5Xr6gLa5cwfY4hR34UgkM5 --json | jq '.uptime' 99.9911  ","version":"Next","tagName":"h2"},{"title":"Custom Configuration","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/tutorials/custom-configuration","content":"","keywords":"","version":"Next"},{"title":"Configuration file layout​","type":1,"pageTitle":"Custom Configuration","url":"/docs/toolkit/ash-cli/tutorials/custom-configuration#configuration-file-layout","content":"For each network, at least the P-Chain configuration has to be provided (in the Primary Network) with its ID and RPC endpoint. All the other Subnets/blockchains will be retrieved/enriched from the P-Chain. ~/.config/ash/my-custom-config.yml --- avalancheNetworks: - name: my-network subnets: - id: 11111111111111111111111111111111LpoYY subnetType: PrimaryNetwork blockchains: - id: 11111111111111111111111111111111LpoYY name: P-Chain vmType: PlatformVM rpcUrl: http://validator01.ash.local:9650/ext/bc/P [...]  tip A single configuration file can contain multiple networks. ","version":"Next","tagName":"h2"},{"title":"Initialize and use a custom configuration file​","type":1,"pageTitle":"Custom Configuration","url":"/docs/toolkit/ash-cli/tutorials/custom-configuration#initialize-and-use-a-custom-configuration-file","content":"The CLI comes with a convenient command to initialize a configuration file with the default networks: ash conf init --config ~/.config/ash/my-custom-config.yml  The generated file contains the default list of networks. You can then edit it to add your own networks. Once the configuration file is ready, you can use it with the --config argument or with the ASH_CONFIG environment variable: Using --config argUsing ASH_CONFIG ash avalanche subnet list --config ~/.config/ash/my-custom-config.yml --network my-network  ","version":"Next","tagName":"h2"},{"title":"Local Subnet Creation","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/tutorials/local-subnet","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#prerequisites","content":"A deployed local network. You can use: The Ansible Avalanche Collection. See Local Test Network Creation.Or the Avalanche Network Runner via Avalanche CLI: avalanche network start A wallet with some AVAX on the P-Chain. See Wallet Funding.Ash CLI installed and configured for your network. See Installation and Configure the Ash CLI for your network.Avalanche CLI installed. We use it to create the Subnet EVM genesis configuration using a nice wizard. See Install Avalanche CLI. ","version":"Next","tagName":"h2"},{"title":"Create the Subnet​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#create-the-subnet","content":"We use the subnet create command to create a new Subnet: Using AVALANCHE_PRIVATE_KEYPassing the private key as argument (unsafe) Command ash avalanche subnet create -w  Output Waiting for transaction to be accepted... Subnet created! (Tx ID: 'GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk') Subnet 'GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk': Type: Permissioned Control keys: [&quot;P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u&quot;] Threshold: 1 Blockchains list (0): [] Validators list (0): []  note We used the -w flag to wait for the transaction to be accepted. ","version":"Next","tagName":"h2"},{"title":"Create the Subnet EVM blockchain configuration​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#create-the-subnet-evm-blockchain-configuration","content":"Avalanche CLI provides an awesome wizard to create the Subnet EVM blockchain genesis configuration. Follow the official tutorial: Create Your Subnet Configuration. This will create a genesis.json file at ~/.avalanche-cli/subnets/$YOUR_SUBNET where $YOUR_SUBNET is the name you chose for your Subnet (e.g. testSubnetEVM): Command cat ~/.avalanche-cli/subnets/testSubnetEVM/genesis.json  Output { &quot;config&quot;: { &quot;chainId&quot;: 11111, &quot;feeConfig&quot;: { [...] } } }  ","version":"Next","tagName":"h2"},{"title":"Create the Subnet EVM blockchain​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#create-the-subnet-evm-blockchain","content":"","version":"Next","tagName":"h2"},{"title":"Encode the genesis data​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#encode-the-genesis-data","content":"At blockchain creation, we need to provide the byte-encoded genesis data. We use the vm encode-genesis command and store the output to a temporary JSON file: Commands # Encode the genesis data ash avalanche vm encode-genesis \\ ~/.avalanche-cli/subnets/testSubnetEVM/genesis.json --json &gt; /tmp/encoded-genesis.json # Display the encoded genesis data cat /tmp/encoded-genesis.json  Output { &quot;genesisBytes&quot;: &quot;0x7b22636f6e666967223a...&quot; }  ","version":"Next","tagName":"h3"},{"title":"Submit the blockchain creation transaction​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#submit-the-blockchain-creation-transaction","content":"Use the blockchain create command to create the Subnet EVM blockchain in the Subnet we created earlier: Using AVALANCHE_PRIVATE_KEYPassing the private key as argument (unsafe) Command ash avalanche blockchain create testSubnetEVM \\ --subnet-id GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk \\ --vm-type SubnetEVM \\ --vm-id srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy \\ --genesis-file /tmp/encoded-genesis.json -w  Output Waiting for transaction to be accepted... Blockchain created! (Tx ID: 'i2ZXw8NbVFxUK3kMjpwPtF2T3mtyoc6VWuH41rMfbc1NWE1Pb') Blockchain 'testSubnetEVM': ID: i2ZXw8NbVFxUK3kMjpwPtF2T3mtyoc6VWuH41rMfbc1NWE1Pb VM ID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy VM type: SubnetEVM  ","version":"Next","tagName":"h3"},{"title":"Add validators to the Subnet​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#add-validators-to-the-subnet","content":"Our Subnet has been created but we still need to add some validators to it. ","version":"Next","tagName":"h2"},{"title":"Get validator IDs​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#get-validator-ids","content":"First, we need to get the validator IDs of the validators we want to add to the Subnet. We can use the subnet info command to get the list of validators on the Primary Network: Command ash avalanche subnet info 11111111111111111111111111111111LpoYY  Output Subnet '11111111111111111111111111111111LpoYY': Type: PrimaryNetwork Blockchains list (3): [...] Validators list (5): - NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5 - NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu - NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN - NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ - NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg  ","version":"Next","tagName":"h3"},{"title":"Submit the validator add transactions​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#submit-the-validator-add-transactions","content":"Let's add a first validator with a weight of 100 to the Subnet using the validator add command. It takes a lot of arguments: Command # | Node ID of the validator to add | Validator weight ash avalanche validator add NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5 100 \\ --subnet-id GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk \\ --start-time &quot;$(date -d '2 minutes' --rfc-3339=seconds | sed 's/ /T/')&quot; \\ --end-time &quot;$(date -d '2 days' --rfc-3339=seconds | sed 's/ /T/')&quot;  Output Initiated validator addition to Subnet! (Tx ID: 'NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5') Validator 'NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5' on Subnet 'GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk': Tx ID: UcreXaaf5nt9Chy3nXSvJEAKHW9eqCQSjWB21KLxFBiUzuQvM Start time: 2023-05-29 16:29:12 End time: 2023-05-31 16:27:12 Weight: 100  tip The start-time and end-time arguments should follow the RFC 3339 format: YYYY-MM-DDTHH:MM:SSZ. You can use the date command as above to generate them. In this example validation period will start 2 minutes after the transaction is accepted and will end 2 days after. info See platform.addSubnetValidator for more information about the weight parameter. We can now repeat the process for the 4 other validators. ","version":"Next","tagName":"h3"},{"title":"Check the Subnet validators​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#check-the-subnet-validators","content":"After 2 minutes, we can check the validators list of the Subnet: Command ash avalanche subnet info GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk  Output Subnet 'GQE4XUWgCR8ZryvhNdaCoyqVi25YNyh2nxyAjyCB3jXFL6gbk': Type: Subnet Blockchains list (1): - testSubnetEVM: ID: i2ZXw8NbVFxUK3kMjpwPtF2T3mtyoc6VWuH41rMfbc1NWE1Pb VM ID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy VM type: SubnetEVM Validators list (5): - NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5 - NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu - NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN - NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ - NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg  tip You can use the --extended flag to get more information about the validators, notably their weight and the start/end time of their validation period. caution Don't forget that the validator nodes should be configured to track the Subnet, otherwise you will not be able to issue transactions. See Track the Subnet with the validators. ","version":"Next","tagName":"h2"},{"title":"Connect to the Subnet and start issuing transactions​","type":1,"pageTitle":"Local Subnet Creation","url":"/docs/toolkit/ash-cli/tutorials/local-subnet#connect-to-the-subnet-and-start-issuing-transactions","content":"The Subnet is now ready to be used! You can connect any EVM-compatible wallet (e.g. MetaMask, Core, Frame, etc.) to it and start issuing transactions, deploying smart contracts, etc. Use the following settings to connect to the Subnet: Local Ash networkAvalanche Network Runner Network name: testSubnetEVM New RPC URL: https://192.168.60.11:9650/ext/bc/${YOUR_BLOCKCHAIN_ID}/rpc Chain ID: The one entered during avalanche subnet create. Can be found via avalanche subnet describe testSubnetEVM Symbol: Whatever you want to name your token Explorer URL: NA ","version":"Next","tagName":"h2"},{"title":"Avalanche Networks Exploration","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/tutorials/network-exploration","content":"","keywords":"","version":"Next"},{"title":"List available networks​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#list-available-networks","content":"The CLI comes with a list of networks that you can use out of the box. You can list them with the network list command: Command ash avalanche network list  Output Available Avalanche networks: - 'mainnet' - 'fuji' - 'mainnet-ankr' - 'fuji-ankr' - 'mainnet-blast' - 'fuji-blast'  tip The mainnet and fuji networks use Avalanche public API servers that tend to reach their rate limit quickly. If this happens you can use the *-ankr and *-blast networks instead (they use Ankr and Blast public API servers). ","version":"Next","tagName":"h2"},{"title":"Get information about Subnets and their blockchains and validators​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#get-information-about-subnets-and-their-blockchains-and-validators","content":"","version":"Next","tagName":"h2"},{"title":"List Subnets​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#list-subnets","content":"You can get the list of Subnets and their blockchains with the subnet list command: Command ash avalanche subnet list --network fuji  Output Found 2011 Subnet(s) on 'fuji': ------------------------------------------------------ - XHLRR9cvMtCR8KZsjU8nLxg1JbV7aS23AcLVeBMVHLKkSBriS: Type: Permissioned Control keys: [&quot;P-fuji1apckely9e4ue26gds6mdmyf7ys7e4tv4l2cr9j&quot;] Threshold: 1 Blockchains list (1): - DFK Chain: ID: 32sexHqc3tBQsik8h7WP5F2ruL5svqhX5opeTgXCRVX8HpbKF [...]  ","version":"Next","tagName":"h3"},{"title":"Get detailed information about a Subnet​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#get-detailed-information-about-a-subnet","content":"To get detailed information about a Subnet, including its list of validators, you can use the subnet info command: Command ash avalanche subnet info -n fuji \\ 9m6a3Qte8FaRbLZixLhh8Ptdkemm4csNaLwQeKkENx5wskbWP  Output Subnet '9m6a3Qte8FaRbLZixLhh8Ptdkemm4csNaLwQeKkENx5wskbWP': Type: Permissioned Control keys: [&quot;P-fuji1n3f5zmv6md96glq9sevnzmmtur5ugvfaghj3jh&quot;] Threshold: 1 Blockchains list (1): - main: ID: XuEPnCE59rtutASDPCDeYw8geQaGWwteWjkDXYLWvssfuirde VM ID: srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy VM type: SubnetEVM Validators list (4): - NodeID-54RagM4VF5VNeKWoVV5UNHJfM6ccHtBob [...]  ","version":"Next","tagName":"h3"},{"title":"Get detailed information about a Subnet validator​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#get-detailed-information-about-a-subnet-validator","content":"To get detailed information about one Subnet validator, you can use the validator info command: Command # On a permissioned Subnet ash avalanche validator info -n fuji \\ NodeID-54RagM4VF5VNeKWoVV5UNHJfM6ccHtBob \\ --subnet-id 9m6a3Qte8FaRbLZixLhh8Ptdkemm4csNaLwQeKkENx5wskbWP  Output Validator 'NodeID-54RagM4VF5VNeKWoVV5UNHJfM6ccHtBob' on Subnet '9m6a3Qte8FaRbLZixLhh8Ptdkemm4csNaLwQeKkENx5wskbWP': Tx ID: 6qQdasWo9xyQ1kctTd1AGzdbrrL1HkSriSR7aCap51qivH1GU Start time: 1672859120 End time: 1688481650 Weight: 1000  Some properties are only returned for validators on elastic (or PoS) Subnets like the Primary Network (e.g. Potential reward, Connected, Uptime. See platform.getCurrentValidators): Command # On an elastic Subnet ash avalanche validator info -n fuji \\ NodeID-54RagM4VF5VNeKWoVV5UNHJfM6ccHtBob \\ --subnet-id 11111111111111111111111111111111LpoYY  Output Validator 'NodeID-54RagM4VF5VNeKWoVV5UNHJfM6ccHtBob' on Subnet '11111111111111111111111111111111LpoYY': Tx ID: sWWFFk64LAVEHWzyW3LZEHVqcrA84Djv1qYSCMwrwCXTxLiEr Start time: 1672842965 End time: 1688481650 Connected: true Uptime: 99.9951 Stake amount: 1000000000 Potential reward: 50570835 Validation reward owner: [...] Delegator count: 0 Delegator weight: 0 Delegation fee: 2% Delegation reward owner: [...]  ","version":"Next","tagName":"h3"},{"title":"Filter the CLI output using jq​","type":1,"pageTitle":"Avalanche Networks Exploration","url":"/docs/toolkit/ash-cli/tutorials/network-exploration#filter-the-cli-output-using-jq","content":"All commands of the Ash CLI can output JSON data. Combined with jq, this makes a very powerful tool to get any information you need about Avalanche networks. For example, get the IDs of all the Subnets that have at least one blockchain on the mainnet: Command ash avalanche subnet list --json | jq -r '.[] | select((.blockchains | length) &gt; 0) | .id'  Output yDxaSh2hoVxQKRHmacV1xFpuSgHf6Q6cCMu4v3GoLQnqQWk6L D3YwWGVE7MxBkiHq6s9Qkd978QyCBDxAMcJeBqsEyVRZf4XGh [...] 2ibTg9ruyJRQf4NpRbkd1Utcfayo3gRRpkoWGCWNC3oXTZoYCe 11111111111111111111111111111111LpoYY  ","version":"Next","tagName":"h2"},{"title":"Resource Management","type":0,"sectionRef":"#","url":"/docs/console/reference/resource-management","content":"","keywords":"","version":"Next"},{"title":"Types of resources​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#types-of-resources","content":"There are several types of resources. See Resource for more information. ","version":"Next","tagName":"h2"},{"title":"List resources​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#list-resources","content":"Using the Ash CLIUsing the Ash Console API tip The Ash CLI displays information in a table format by default. To get a more detailed output (or for scripting), use the --json flag. To list resources you have access to, run: Command ash console resource list Output Resources of project '399b6f5b-eed2-4713-8b68-993643babfd0': +-------------+------+------+-----------------+------+------------+--------+-------------------+ | Resource ID | Name | Type | Cloud region ID | Size | Created at | Status | Resource specific | +=============+======+======+=================+======+============+========+===================+ +-------------+------+------+-----------------+------+------------+--------+-------------------+  ","version":"Next","tagName":"h2"},{"title":"Create a resource​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#create-a-resource","content":"Each resource type has specific requirements, e.g. a nodeId secret is required to create an AvalancheNode resource. Resource specific requirements AvalancheNode { &quot;name&quot;: &quot;my-avalanche-node&quot;, &quot;resourceType&quot;: &quot;avalancheNode&quot;, &quot;cloudRegionId&quot;: &quot;ff69b281-917e-4ebb-b1e0-f5dc1da297fa&quot;, &quot;nodeIdSecretId&quot;: &quot;4cc8f792-83af-475d-8be0-20c35efc1bd4&quot;, &quot;size&quot;: &quot;small&quot;, &quot;nodeConfig&quot;: { &quot;isBootstrapNode&quot;: true, &quot;avalancheNodeConfig&quot;: { &quot;avalanchego_version&quot;: &quot;1.10.10&quot; } } } You can pass any variable available in the ash.avalanche.node role under nodeConfig.avalancheNodeConfig. tip You can provide the secrets' or cloud regions' names instead of their IDs. Using the Ash CLIUsing the Ash Console API To create a new resource, use the create resource command and provide the required resource properties as JSON. Command ash console resource create '{ name: my-avalanche-node, resourceType: avalancheNode, cloudRegionId: ff69b281-917e-4ebb-b1e0-f5dc1da297fa, nodeIdSecretId: my-node-id, size: small, nodeConfig: { isBootstrapNode: true, avalancheNodeConfig: { avalanchego_version: 1.10.10 } } }' Output Resource successfully created in project '399b6f5b-eed2-4713-8b68-993643babfd0'! +--------------------------------------+-------------------+---------------+--------------------------------------+-------+------------------+---------+--------------------------+ | Resource ID | Name | Type | Cloud region ID | Size | Created at | Status | Resource specific | +======================================+===================+===============+======================================+=======+==================+=========+==========================+ | 70877036-e8df-4ad3-af95-c0f085a094a6 | my-avalanche-node | AvalancheNode | ff69b281-917e-4ebb-b1e0-f5dc1da297fa | Small | 2023-11-10T16:41 | Pending | IP address | pending | | | | | | | | | Running | false | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +--------------------------------------+-------------------+---------------+--------------------------------------+-------+------------------+---------+--------------------------+  Note: See Resource sizes for a list of available resource sizes. ","version":"Next","tagName":"h2"},{"title":"Get a resource and its status​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#get-a-resource-and-its-status","content":"A resource can be in one of the following statuses: pending: the resource is pending for a machine to be allocated in the cloud regionconfiguring: the resource is being configuredrunning: the resource is runningstopped: the resource is stoppederror: the resource is in an error statedestroying: the resource is being destroyed tip You can also provide the resource name instead of its ID. Using the Ash CLIUsing the Ash Console API To get information about a resource, including its status, use the resource info command and provide the resource ID. Command ash console resource info 70877036-e8df-4ad3-af95-c0f085a094a6 Output Resource '70877036-e8df-4ad3-af95-c0f085a094a6' of project '399b6f5b-eed2-4713-8b68-993643babfd0': +--------------------------------------+-------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+ | Resource ID | Name | Type | Cloud region ID | Size | Created at | Status | Resource specific | +======================================+===================+===============+======================================+=======+==================+=========+==============================+ | 70877036-e8df-4ad3-af95-c0f085a094a6 | my-avalanche-node | AvalancheNode | ff69b281-917e-4ebb-b1e0-f5dc1da297fa | Small | 2023-11-10T16:41 | Running | IP address | 20.74.16.34 | | | | | | | | | Running | true | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +--------------------------------------+-------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+  ","version":"Next","tagName":"h2"},{"title":"Update a resource​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#update-a-resource","content":"info For some resource types, updates will not take effect until the resource is restarted. See Restart a resource. Using the Ash CLIUsing the Ash Console API The properties that can be updated depend on the resource type. For example, you can update an avalancheNode resource's name and nodeConfig: Command ash console resource update my-avalanche-node '{name: my-avalanche-node-v2}' Output Resource updated successfully! +--------------------------------------+----------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+ | Resource ID | Name | Type | Cloud region ID | Size | Created at | Status | Resource specific | +======================================+======================+===============+======================================+=======+==================+=========+==============================+ | 70877036-e8df-4ad3-af95-c0f085a094a6 | my-avalanche-node-v2 | AvalancheNode | ff69b281-917e-4ebb-b1e0-f5dc1da297fa | Small | 2023-11-10T16:41 | Running | IP address | 20.74.16.34 | | | | | | | | | Running | true | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +--------------------------------------+----------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+  ","version":"Next","tagName":"h2"},{"title":"Restart a resource​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#restart-a-resource","content":"Restarting a resource will apply any pending configuration changes and is required if the resource has &quot;restartRequired&quot;: true in its status. caution Restarting a resource will interrupt its service for a few seconds/minutes. Using the Ash CLIUsing the Ash Console API The CLI will ask for confirmation before restarting the resource. To skip the confirmation, use the --yes flag. Command ash console resource restart 70877036-e8df-4ad3-af95-c0f085a094a6 Output Resource updated successfully! +--------------------------------------+----------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+ | Resource ID | Name | Type | Cloud region ID | Size | Created at | Status | Resource specific | +======================================+======================+===============+======================================+=======+==================+=========+==============================+ | 70877036-e8df-4ad3-af95-c0f085a094a6 | my-avalanche-node-v2 | AvalancheNode | ff69b281-917e-4ebb-b1e0-f5dc1da297fa | Small | 2023-11-10T16:41 | Running | IP address | 20.74.16.34 | | | | | | | | | Running | true | | | | | | | | | Bootstrapped | [false] | | | | | | | | | Healthy | [false] | | | | | | | | | Restart req. | false | +--------------------------------------+----------------------+---------------+--------------------------------------+-------+------------------+---------+------------------------------+  ","version":"Next","tagName":"h2"},{"title":"Delete a resource​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#delete-a-resource","content":"info Removing a resource is not instantaneous. The resource will be in status destroying for a few seconds/minutes before it is completely removed. Using the Ash CLIUsing the Ash Console API The CLI will ask for confirmation before deleting the resource. To skip the confirmation, use the --yes flag. Command ash console resource delete 70877036-e8df-4ad3-af95-c0f085a094a6 Output &gt; Are you sure you want to delete this resource? Yes Resource deleted successfully!  ","version":"Next","tagName":"h2"},{"title":"Resource sizes​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#resource-sizes","content":"The size property of a resource is used to determine the machine type to use. The available sizes depend on the cloud provider. Here are the available sizes per resource type and their corresponding machine types in each cloud provider: ","version":"Next","tagName":"h2"},{"title":"AvalancheNode​","type":1,"pageTitle":"Resource Management","url":"/docs/console/reference/resource-management#avalanchenode","content":"Size\tRAM\tCPU\tDisk\tAzure VM type\tAWS EC2 instance type\tGCP machine typesmall\t1-2GB\t1-2\t8-32 (OS) + 50 GiB (resource storage)\tStandard_B1ms\tt2.small\te2-small medium\t8GB\t4\t8-32 (OS) + 200 GiB (resource storage)\tStandard_F4s\tc5.xlarge\tc2d-highcpu-4 large\t16GB\t8\t8-32 (OS) + 1000 GiB (resource storage)\tStandard_F8s\tc5.2xlarge\tc2d-highcpu-8 ","version":"Next","tagName":"h3"},{"title":"Wallet Funding","type":0,"sectionRef":"#","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding","content":"","keywords":"","version":"Next"},{"title":"Configure the Ash CLI for your network​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#configure-the-ash-cli-for-your-network","content":"Prior to using the CLI, we will use a configuration file and environment variables to configure it for our target Avalanche network (see Custom Configuration for more information). Local test networkFuji testnet The file terraform/multipass/local-test-network.yml is templated by Terraform. Set the ASH_CONFIG and the AVALANCHE_NETWORK environment variables to use this configuration: export ASH_CONFIG=terraform/multipass/local-test-network.yml export AVALANCHE_NETWORK=local  ","version":"Next","tagName":"h2"},{"title":"Create a new wallet​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#create-a-new-wallet","content":"Creating a wallet is actually generating a new private key. We can do it with the wallet generate command: Command ash avalanche wallet generate  Output Private key (CB58): PrivateKey-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Private key (hex): 0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Store your private key in a safe place! You will need it to sign transactions. info Wallets generated with the Ash CLI only give access to one account (one address per blockchain). ","version":"Next","tagName":"h2"},{"title":"Store and reuse the private key​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#store-and-reuse-the-private-key","content":"An acceptable solution for test environments is to generate a JSON file with the wallet generate --json command: # Generate a JSON file with the private key ash avalanche wallet generate --json &gt; ~/.config/ash/test-wallet.json # Secure the file so that only you can read it chmod 600 ~/.config/ash/test-wallet.json  You can then easily retrieve the private key with jq and leverage the AVALANCHE_PRIVATE_KEY environment variable: export AVALANCHE_PRIVATE_KEY=$(jq -r '.cb58' ~/.config/ash/test-wallet.json)  tip Using the AVALANCHE_PRIVATE_KEY environment variable is the safest way to interact with wallets (as long as you keep the private key out of your shell history!). ","version":"Next","tagName":"h2"},{"title":"Show information about the wallet​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#show-information-about-the-wallet","content":"You can get the list of the wallet's addresses with the wallet info command: Using AVALANCHE_PRIVATE_KEYPassing the private key as argument (unsafe) Command ash avalanche wallet info  Output Wallet information: Hex private key: 0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027 CB58 private key: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN X-Chain address: X-fuji18jma8ppw3nhx5r4ap8clazz0dps7rv5u6wmu4t P-Chain address: P-fuji18jma8ppw3nhx5r4ap8clazz0dps7rv5u6wmu4t EVM address: 0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC  info The addresses will be different for you as the private key is randomly generated. Also, the X-Chain and P-Chain addresses are different depending on the network (Fuji, local, etc.)! ","version":"Next","tagName":"h2"},{"title":"Fund the wallet​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#fund-the-wallet","content":"Now that we have a wallet and its addresses, we can transfer some AVAX to it: On local Avalanche networks, we will transfer AVAX on the X-Chain from the pre-funded account (see Pre-funded account for more information).On the Fuji testnet, we will use the official Fuji Faucet to request a 2-AVAX airdrop on the C-Chain. Local test networkFuji testnet Check the wallet balance before the transfer​ Let's use the x balance command to check the wallet's balance on our local network: Command ash avalanche x balance X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk Output Balance of 'X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk' on X-Chain (asset 'AVAX'): 0 Transfer AVAX to the wallet​ Let's use the x transfer command to transfer 2 AVAX to our new wallet (from the pre-funded account): Command ash avalanche x transfer 2 X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk \\ -p PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN -w Output Waiting for transaction to be accepted... Transfered 2 of asset 'AVAX' to 'X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk'! Transaction ID: BoLhWiiwfA7b2rq7WUyNTQrZ54nRqCYVSLt6oYWKc2AX5Lmpu note We used the -w flag to wait for the transaction to be accepted. Check the wallet balance after the transfer​ Command ash avalanche x balance X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk Output Balance of 'X-local1aszv6y7ugcnhgfvd7lzv8v3fk9hytlpstcazfk' on X-Chain (asset 'AVAX'): 2  Great! We can now use this wallet to interact with blockchains on the network. ","version":"Next","tagName":"h2"},{"title":"Transfer AVAX to the P-Chain​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#transfer-avax-to-the-p-chain","content":"In order to perform Subnet-related operations (e.g. create Subnets/blockchains, add validators), we need to transfer some AVAX to the P-Chain. We will use Avalanche Wallet to do so. ","version":"Next","tagName":"h2"},{"title":"Connect to the wallet with Avalanche Wallet​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#connect-to-the-wallet-with-avalanche-wallet","content":"Open a new tab in your browser and open: https://wallet.avax.network/ Local test networkFuji testnet Forward the Avalanche HTTP API port using socat​ Modern browsers don't allow to connect to other addresses than 127.0.0.1 from the Avalanche Wallet. We will use socat to forward the Avalanche HTTP API port of validator01 to the host: Install socat # On Ubuntu sudo apt install socat # On macOS brew install socat Forward the port sudo socat TCP-LISTEN:9650,fork &quot;TCP:$(terraform -chdir=terraform/multipass output -json validators_ips | jq -r '.[0]'):9650&quot; Keep the terminal open and go back to the browser tab. Add a custom network​ On the top right corner, click on the 🟢 Mainnet and then Add Custom. Use the following values: Network Name: Ash Local Network URL: http://127.0.0.1:9650 Explorer API: N/A Explorer Site: N/A Then click Add Network and select it. Access the wallet​ Click on Access Wallet and select Private Key. Paste the private key of the wallet and click Access Wallet. ","version":"Next","tagName":"h3"},{"title":"Transfer AVAX to the P-Chain​","type":1,"pageTitle":"Wallet Funding","url":"/docs/toolkit/ash-cli/tutorials/wallet-funding#transfer-avax-to-the-p-chain-1","content":"Follow the Avalanche Wallet FAQ to transfer AVAX to the P-Chain from the X-Chain or C-Chain. ","version":"Next","tagName":"h3"}],"options":{"languages":["en"],"id":"default"}}
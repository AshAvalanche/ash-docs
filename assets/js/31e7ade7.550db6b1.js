"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[396],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||l;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:4},o="Filters",i={unversionedId:"tools/ansible-avalanche-collection/reference/filters",id:"tools/ansible-avalanche-collection/reference/filters",title:"Filters",description:"The collection provides the following filters:",source:"@site/docs/tools/ansible-avalanche-collection/reference/filters.md",sourceDirName:"tools/ansible-avalanche-collection/reference",slug:"/tools/ansible-avalanche-collection/reference/filters",permalink:"/docs/tools/ansible-avalanche-collection/reference/filters",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/tools/ansible-avalanche-collection/reference/filters.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"toolsSidebar",previous:{title:"Modules",permalink:"/docs/tools/ansible-avalanche-collection/reference/modules"},next:{title:"Changelog",permalink:"/docs/tools/ansible-avalanche-collection/changelog"}},s={},c=[{value:"ash.avalanche.convert",id:"ashavalancheconvert",level:2},{value:"Usage",id:"usage",level:3},{value:"Supported units",id:"supported-units",level:3},{value:"ash.avalanche.XXX_to_XXX",id:"ashavalanchexxx_to_xxx",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Supported conversions",id:"supported-conversions",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"filters"},"Filters"),(0,r.kt)("p",null,"The collection provides the following filters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ashavalancheconvert"},"ash.avalanche.convert"),": convert an amount between AVAX units"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#ashavalanchexxx_to_xxx"},"ash.avalanche.XXX_to_XXX"),": convert a string between encodings")),(0,r.kt)("h2",{id:"ashavalancheconvert"},"ash.avalanche.convert"),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("p",null,"This filter is useful to submit transactions without errors in the number of zeros:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ash.avalanche.tx:\n  ...\n  params:\n    ...\n    amount: \"{{ 25 | ash.avalanche.convert('AVAX', 'nAVAX') | int }}\"\n")),(0,r.kt)("h3",{id:"supported-units"},"Supported units"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Unit"),(0,r.kt)("th",{parentName:"tr",align:null},"Amount in wei"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"wei")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"gwei")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"navax")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1e9")," (",(0,r.kt)("inlineCode",{parentName:"td"},"1000000000"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"avax")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"eth")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"1e18")," (",(0,r.kt)("inlineCode",{parentName:"td"},"1000000000000000000"),")")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," The filter is not case sensitive: ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.convert('AVAX', 'nAVAX')")," is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.convert('avax', 'navax')")),(0,r.kt)("h2",{id:"ashavalanchexxx_to_xxx"},"ash.avalanche.XXX_to_XXX"),(0,r.kt)("h3",{id:"usage-1"},"Usage"),(0,r.kt)("p",null,"This is useful to convert string between different encodings, e.g. from hexadecimal to ",(0,r.kt)("a",{parentName:"p",href:"https://support.avax.network/en/articles/4587395-what-is-cb58"},"CB58"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# Example of cb58_to_hex conversion\n- name: Convert NodeID to hexadecimal\n  set_fact:\n    node_id_hex: |-\n      {{ (get_node_id_res.json.result.nodeID | split('-'))[1]\n         | ash.avalanche.cb58_to_hex }}\n")),(0,r.kt)("h3",{id:"supported-conversions"},"Supported conversions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cb58_to_hex")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cb58_to_bytes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hex_to_cb58")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"hex_to_bytes"))))}d.isMDXComponent=!0}}]);
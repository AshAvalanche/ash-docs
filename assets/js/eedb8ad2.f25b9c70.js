"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[6909],{9613:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,m=c["".concat(s,".").concat(d)]||c[d]||h[d]||o;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},238:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(9496),r=a(5924);const o={tabItem:"tabItem_qcoa"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:a},t)}},5414:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(7605),r=a(9496),o=a(5924),i=a(4976),l=a(3442),s=a(9250),p=a(9160),u=a(5535);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function h(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function k(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=h(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,p]=m({queryString:a,groupId:n}),[c,k]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,u.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),b=(()=>{const e=s??c;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),k(e)}),[p,k,o]),tabValues:o}}var b=a(9915);const v={tabList:"tabList_nOpa",tabItem:"tabItem_jOOI"};function f(e){let{className:t,block:a,selectedValue:l,selectValue:s,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),h=e=>{const t=e.currentTarget,a=u.indexOf(t),n=p[a].value;n!==l&&(c(t),s(n))},d=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;t=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;t=u[a]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},p.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:h},i,{className:(0,o.Z)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":l===t})}),a??t)})))}function g(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=k(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",v.tabList)},r.createElement(f,(0,n.Z)({},e,t)),r.createElement(g,(0,n.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},2313:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(7605),r=(a(9496),a(9613)),o=a(5414),i=a(238);const l={sidebar_position:12},s="HyperSDK devnet on AWS",p={unversionedId:"toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws",id:"toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws",title:"HyperSDK devnet on AWS",description:"In this section, we will learn how to use the ash.avalanche Ansible collection to provision an Avalanche test network on AWS EC2 instances using Terraform, create an HyperSDK Subnet and interact with it.",source:"@site/docs/toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws.md",sourceDirName:"toolkit/ansible-avalanche-collection/tutorials",slug:"/toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"toolkitSidebar",previous:{title:"Smart Contract Deployment",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/contract-deployment"},next:{title:"Reference",permalink:"/docs/category/reference"}},u={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Setup the environment",id:"setup-the-environment",level:2},{value:"Create EC2 instances with Terraform",id:"create-ec2-instances-with-terraform",level:2},{value:"Bootstrap the devnet",id:"bootstrap-the-devnet",level:2},{value:"Create the Subnet",id:"create-the-subnet",level:2},{value:"Track the Subnet with the validators",id:"track-the-subnet-with-the-validators",level:2},{value:"Check the Subnet validators",id:"check-the-subnet-validators",level:2},{value:"Configure <code>morpheus-cli</code>",id:"configure-morpheus-cli",level:2},{value:"Customization",id:"customization",level:2},{value:"Use a custom HyperSDK VM",id:"use-a-custom-hypersdk-vm",level:3},{value:"Configure the chain genesis",id:"configure-the-chain-genesis",level:3},{value:"Configure the Subnet and chain",id:"configure-the-subnet-and-chain",level:3}],h={toc:c},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hypersdk-devnet-on-aws"},"HyperSDK devnet on AWS"),(0,r.kt)("p",null,"In this section, we will learn how to use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-collection"},"ash.avalanche")," Ansible collection to provision an Avalanche test network on AWS EC2 instances using Terraform, create an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ava-labs/hypersdk"},"HyperSDK")," Subnet and interact with it."),(0,r.kt)("p",null,"We will be using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ava-labs/hypersdk/tree/main/examples/morpheusvm"},(0,r.kt)("inlineCode",{parentName:"a"},"morpheusvm"))," example but this tutorial can be adapted to any other HyperSDK-based VM."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Python >=3.9 with ",(0,r.kt)("inlineCode",{parentName:"li"},"venv")," module installed"),(0,r.kt)("li",{parentName:"ul"},"AWS account and access key (see ",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/powershell/latest/userguide/pstools-appendix-sign-up.html"},"AWS docs"),") with correct permissions to manage EC2 instances (e.g.: ",(0,r.kt)("inlineCode",{parentName:"li"},"AmazonEC2FullAccess"),")"),(0,r.kt)("li",{parentName:"ul"},"Terraform installed (see ",(0,r.kt)("a",{parentName:"li",href:"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli"},"Install Terraform"),")",(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://terraform.io"},"Terraform")," is an infrastructure as code tool that lets you build, change, and version infrastructure safely and efficiently"))),(0,r.kt)("li",{parentName:"ul"},"For filtering outputs:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/"},"jq")," (see ",(0,r.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/download/"},"Installation"),")")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We recommend installing the Ash CLI to easily get information about your nodes and Subnets. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ash-cli/installation"},"Ash CLI - Installation"),".",(0,r.kt)("br",{parentName:"p"}),"\n","The tutorials still provide the snippets to query the Avalanche APIs with cURL.")),(0,r.kt)("h2",{id:"setup-the-environment"},"Setup the environment"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone the Getting Started repository:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/AshAvalanche/ansible-avalanche-getting-started\ncd ansible-avalanche-collection-getting-started\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Setup and activate Python venv:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"bin/setup.sh\nsource .venv/bin/activate\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche")," collection:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-galaxy collection install git+https://github.com/AshAvalanche/ansible-avalanche-collection.git\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Initialize the Terraform modules:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"terraform -chdir=terraform/hypersdk-devnet init\n")))),(0,r.kt)("h2",{id:"create-ec2-instances-with-terraform"},"Create EC2 instances with Terraform"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Setup AWS keys environment variables:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export AWS_SECRET_ACCESS_KEY="XXXXXXXXXXXXXXXXXXXXXXXXXX"\nexport AWS_ACCESS_KEY_ID="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Created the resources with Terraform:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"terraform -chdir=terraform/hypersdk-devnet apply\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This command will create the resources defined in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/blob/main/terraform/hypersdk-devnet/main.tf"},(0,r.kt)("inlineCode",{parentName:"a"},"main.tf"))," including:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"5 a ",(0,r.kt)("inlineCode",{parentName:"li"},"t2.medium")," EC2 instance with ",(0,r.kt)("inlineCode",{parentName:"li"},"8GiB")," of storage"),(0,r.kt)("li",{parentName:"ul"},"An associated ",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html"},"key pair")),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html"},"security group")," configured to allow SSH (port 22) and default AVAX ports (9650 for HTTP and 9651 for staking) as well as all outbound traffic.")),(0,r.kt)("p",{parentName:"admonition"},"If you want more instances, storage or different instance types, you can modify the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/blob/main/terraform/hypersdk-devnet/variables.tf"},(0,r.kt)("inlineCode",{parentName:"a"},"variables.tf"))," file accordingly.")),(0,r.kt)("h2",{id:"bootstrap-the-devnet"},"Bootstrap the devnet"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This section uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"hypersdk-devnet")," inventory which is pre-configured as a local Avalanche network (see ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_network_id: local")," in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml#L5"},"avalanche_nodes.yml"),").")),(0,r.kt)("p",null,"We will use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-collection/blob/main/playbooks/bootstrap_local_network.yml"},"ash.avalanche.bootstrap_local_network")," playbook to bootstrap the devnet. This playbook starts a first validator (",(0,r.kt)("inlineCode",{parentName:"p"},"validator01"),") and then bootstraps additional nodes (",(0,r.kt)("inlineCode",{parentName:"p"},"validator02-05"),") from the first node, thus creating a local network."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Bootstrap the Avalanche nodes:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook ash.avalanche.bootstrap_local_network -i inventories/hypersdk-devnet\n")))),(0,r.kt)("p",null,"It's done! We now have a ready-to-use 5-nodes Avalanche devnet."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Ansible will connect to the EC2 instances defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/hosts")," file that was generated by Terraform.\nIf you want to use a custom inventory (i.e. you created VMs without Terraform or want to use a different cloud provider), you can create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"hosts")," file manually using this format:"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Ansible hosts file"),(0,r.kt)("p",{parentName:"admonition"},"File content:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-ini"}," validator01 ansible_host=3.95.172.85 ansible_user=ubuntu ansible_ssh_private_key_file=./files/ansible_key.pem\n validator02 ansible_host=52.73.132.144 ansible_user=ubuntu ansible_ssh_private_key_file=./files/ansible_key.pem\n validator03 ansible_host=3.80.125.149 ansible_user=ubuntu ansible_ssh_private_key_file=./files/ansible_key.pem\n validator04 ansible_host=34.235.117.99 ansible_user=ubuntu ansible_ssh_private_key_file=./files/ansible_key.pem\n validator05 ansible_host=54.196.41.121 ansible_user=ubuntu ansible_ssh_private_key_file=./files/ansible_key.pem\n\n [avalanche_nodes]\n validator0[1:5]\n\n [avalanche_nodes:children]\n bootstrap_nodes\n subnet_txs_host\n subnet_validators\n api_node\n\n [bootstrap_nodes]\n validator01\n\n [api_node]\n validator01\n\n [subnet_txs_host]\n validator01\n\n [subnet_validators]\n validator0[1:5]\n")))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check the status of the network using the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ash-cli/introduction"},"Ash CLI"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"ash avalanche node is-bootstrapped -n 54.227.38.150 C\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"Chain 'C' on node '54.227.38.150:9650': Bootstrapped \u2713\n")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Replace the IP address in the command above with one of your nodes. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/hosts")," to get the IPs of the EC2 instances created by Terraform.")),(0,r.kt)("h2",{id:"create-the-subnet"},"Create the Subnet"),(0,r.kt)("p",null,"Run the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-collection/tree/main/playbooks/create_subnet.yml"},"ash.avalanche.create_subnet")," playbook to create the Subnet, blockchains and add validators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook ash.avalanche.create_subnet -i inventories/hypersdk-devnet\n")),(0,r.kt)("p",null,"At the end of the Subnet creation, information about the new Subnet is displayed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ok: [validator01] =>\n  msg: |-\n    The Subnet has been created with its blockchains, and the validators added.\n    Make sure to add the Subnet ID to the `avalanchego_track_subnets` list of each validator.\n    Subnet ID = 29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This playbook calls"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ash.avalanche.subnet")," role to create the Subnet, the blockchains and add the validators from the ",(0,r.kt)("inlineCode",{parentName:"li"},"subnet_validators_list")," variable"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ash.avalanche.node.add-validator")," playbook to add the validators from the ",(0,r.kt)("inlineCode",{parentName:"li"},"subnet_validators")," group"))),(0,r.kt)("h2",{id:"track-the-subnet-with-the-validators"},"Track the Subnet with the validators"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.subnet")," role does not handle Subnet tracking on validator nodes. The list of tracked Subnets is handled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_track_subnets")," variable in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.node")," role."),(0,r.kt)("p",null,"To track the Subnet on our nodes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the Subnet ID to the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_track_subnets")," variable. For this tutorial, this variable is in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"avalanche_nodes.yml")),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml"',title:'"inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml"'},"avalanchego_track_subnets:\n  - 29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.provision_nodes")," to apply the new configuration and restart the :"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ansible-playbook ash.avalanche.provision_nodes -i inventories/hypersdk-devnet\n")))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Make sure than the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_subnets_configs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_chains_configs")," variables are configured with the proper Subnet and chain IDs (see bellow to get the chain ID) in the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanche_nodes.yml")," file.")),(0,r.kt)("h2",{id:"check-the-subnet-validators"},"Check the Subnet validators"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After 2 minutes"),", we can check the validators list of the Subnet:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"curl",label:"Using cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},'curl -X POST --data \'{\n    "jsonrpc": "2.0",\n    "method": "platform.getCurrentValidators",\n    "params": {\n      "subnetID": "29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL"\n    },\n    "id": 1\n}\' -H \'content-type:application/json;\' 54.226.148.124:9650/ext/bc/P | jq \'.result.validators\'\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},'[\n  {\n    "txID": "2RWJL12Uh26aE1i5hcUfs19NvZ4NgGtDVX35SvQeRZKWpxPs4M",\n    "startTime": "1686149361",\n    "endTime": "1686754041",\n    "weight": "1",\n    "nodeID": "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg",\n    "stakeAmount": "1",\n    "connected": true,\n    "uptime": "100.0000"\n  },\n  [...]\n]\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Replace the IP address with the one of your node. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/hosts")," to get it."))),(0,r.kt)(i.Z,{value:"ash-cli",label:"Using the Ash CLI",default:!0,mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If not already done, configure the Ash CLI for local Avalanche network by following ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ash-cli/tutorials/wallet-funding#configure-the-ash-cli-for-your-network"},"Configure the Ash CLI for your network"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"ash avalanche subnet info 29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"Subnet '29uVeLPJB1eQJkzRemU8g8wZDw5uJRqpab5U2mX9euieVwiEbL':\n  Type: Permissioned\n  Control keys: [\"P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u\"]\n  Threshold:    1\n  Blockchains list (1):\n  - AshLocalEVM:\n    ID:      26iZJxV79s2vvTJQM2NebfW7tDqyzCr2SfzgyVXtoURQh5VFoM\n    VM ID:   srEXiWaHuhNyGwPUi444Tu47ZEDwxTWrbQiuD7FmgSAQ6X7Dy\n    VM type: SubnetEVM\n  Validators list (5):\n  - NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\n  - NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ\n  - NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN\n  - NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu\n  - NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You will need to SSH to the node to run the command above using the Ash CLI. See the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/hosts")," file generated by Terraform to get the IP address. You can get then connect to the node with ",(0,r.kt)("inlineCode",{parentName:"p"},"ssh -i files/ansible_key.pem ubuntu@<node-ip>"),".")))),(0,r.kt)("h2",{id:"configure-morpheus-cli"},"Configure ",(0,r.kt)("inlineCode",{parentName:"h2"},"morpheus-cli")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Check out the official ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ava-labs/hypersdk/tree/main/examples/morpheusvm"},(0,r.kt)("inlineCode",{parentName:"a"},"hypersk/morpheusvm"))," repository for more details on the ",(0,r.kt)("inlineCode",{parentName:"p"},"morpheus-cli")," installation process and usage.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import the default key:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"./build/morpheus-cli key import ed25519 demo.pk\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"database: .morpheus-cli\nimported address: morpheus1qrzvk4zlwj9zsacqgtufx7zvapd3quufqpxk5rsdd4633m4wz2fdjk97rwu%\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import the chain:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"./build/morpheus-cli chain import\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"\u2714 chainID: 26iZJxV79s2vvTJQM2NebfW7tDqyzCr2SfzgyVXtoURQh5VFoM\nuri: http://54.226.148.124:9650/ext/bc/26iZJxV79s2vvTJQM2NebfW7tDqyzCr2SfzgyVXtoURQh5VFoM\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check balance of the key:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"./build/morpheus-cli key balance\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"database: .morpheus-cli\naddress: morpheus1qrzvk4zlwj9zsacqgtufx7zvapd3quufqpxk5rsdd4633m4wz2fdjk97rwu\nchainID: 26iZJxV79s2vvTJQM2NebfW7tDqyzCr2SfzgyVXtoURQh5VFoM\nuri: http://54.226.148.124:9650/ext/bc/26iZJxV79s2vvTJQM2NebfW7tDqyzCr2SfzgyVXtoURQh5VFoM\nbalance: 10000000000.000000000 RED\n")))),(0,r.kt)("h2",{id:"customization"},"Customization"),(0,r.kt)("h3",{id:"use-a-custom-hypersdk-vm"},"Use a custom HyperSDK VM"),(0,r.kt)("p",null,"This tutorial uses the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ava-labs/hypersdk/tree/main/examples/morpheusvm"},(0,r.kt)("inlineCode",{parentName:"a"},"morpheusvm"))," example for simplicity but it can be adapted to any other HyperSDK-based VM.\nTo use a different HyperSDK VM, you can modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml")," file. You will need to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_vms_list")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_vms_install")," variables. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management"},"Blockchain VM Management")," tutorial for more information."),(0,r.kt)("h3",{id:"configure-the-chain-genesis"},"Configure the chain genesis"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.create_subnet")," playbook uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_blockchains_list")," variable to configure the chain genesis. You can customize the chain genesis by modifying this variable in the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/group_vars/subnet_txs_host.yml")," file."),(0,r.kt)("h3",{id:"configure-the-subnet-and-chain"},"Configure the Subnet and chain"),(0,r.kt)("p",null,"You can customize the Subnet and chain configuration by modifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_subnets_configs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_chains_configs")," variables in the ",(0,r.kt)("inlineCode",{parentName:"p"},"inventories/hypersdk-devnet/group_vars/avalanche_nodes.yml")," file. See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-node"},"ash.avalanche.node reference")," for more information."))}m.isMDXComponent=!0}}]);
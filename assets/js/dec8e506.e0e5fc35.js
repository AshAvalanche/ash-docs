"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[9956],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return a?n.createElement(m,l(l({ref:t},p),{},{components:a})):n.createElement(m,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5992:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:9},l="Nodes Rolling Restart",i={unversionedId:"toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart",id:"toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart",title:"Nodes Rolling Restart",description:'In this section, we will learn how to restart Avalanche nodes sequentially (a.k.a. perform a "rolling restart") to avoid Subnet downtime.',source:"@site/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart.md",sourceDirName:"toolkit/ansible-avalanche-collection/tutorials",slug:"/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/toolkit/ansible-avalanche-collection/tutorials/nodes-rolling-restart.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"toolkitSidebar",previous:{title:"Subnet Faucet",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-faucet"},next:{title:"Monitoring",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/monitoring"}},s={},c=[{value:"Disable automatic restarts",id:"disable-automatic-restarts",level:2},{value:"Trigger a rolling restart of the nodes",id:"trigger-a-rolling-restart-of-the-nodes",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nodes-rolling-restart"},"Nodes Rolling Restart"),(0,r.kt)("p",null,"In this section, we will learn how to ",(0,r.kt)("strong",{parentName:"p"},"restart Avalanche nodes sequentially"),' (a.k.a. perform a "rolling restart") to avoid Subnet downtime.'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For this tutorial, we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local"},(0,r.kt)("inlineCode",{parentName:"a"},"local"))," inventory provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started"},"Ansible Avalanche Getting Started")," repository. See ",(0,r.kt)("a",{parentName:"p",href:"./local-test-network"},"Create a Local Test Network")," for details.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Always make sure you have the latest version of the collection installed. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/installation"},"Installation and upgrade"),".")),(0,r.kt)("h2",{id:"disable-automatic-restarts"},"Disable automatic restarts"),(0,r.kt)("p",null,"By default, ",(0,r.kt)("strong",{parentName:"p"},"any change to the node/VMs versions or configurations")," will trigger a restart of AvalancheGo. This is fine for testing purposes but ",(0,r.kt)("strong",{parentName:"p"},"not recommended for Subnet validators"),", (especially for a small-size permissioned Subnet where each validator has a high weight)."),(0,r.kt)("p",null,"To disable automatic restarts, set ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_auto_restart")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local/group_vars/avalanche_nodes.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"avalanche_nodes.yml"))," group variables file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"avalanchego_auto_restart: false\n")),(0,r.kt)("h2",{id:"trigger-a-rolling-restart-of-the-nodes"},"Trigger a rolling restart of the nodes"),(0,r.kt)("p",null,"After an upgrade or configation change, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rolling_restart")," playbook. This playbook will restart every node sequentially, waiting for the node to be ",(0,r.kt)("strong",{parentName:"p"},"bootstrapped on all chains")," and ",(0,r.kt)("strong",{parentName:"p"},"healthy on all tracked Subnets")," before moving to the next node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook ash.avalanche.rolling_restart -i inventories/local\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It can take a while for a node to be bootstrapped and healthy depending on the node hardware and the Subnet activity.")))}u.isMDXComponent=!0}}]);
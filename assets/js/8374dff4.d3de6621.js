"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[1877],{9613:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},h="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),h=u(a),p=r,m=h["".concat(s,".").concat(p)]||h[p]||d[p]||o;return a?n.createElement(m,l(l({ref:t},c),{},{components:a})):n.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[h]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5498:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(9496),r=a(5924);const o={tabItem:"tabItem_IfE0"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},725:(e,t,a)=>{a.d(t,{Z:()=>N});var n=a(2564),r=a(9496),o=a(5924),l=a(3819),i=a(3442),s=a(1233),u=a(6491),c=a(9182);function h(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function d(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??h(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=d(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,u]=m({queryString:a,groupId:n}),[h,b]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,c.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),v=(()=>{const e=s??h;return p({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{v&&i(v)}),[v]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var v=a(6363);const k={tabList:"tabList_qavC",tabItem:"tabItem_f8Aq"};function g(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:h}=(0,l.o5)(),d=e=>{const t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==i&&(h(t),s(n))},p=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:d},l,{className:(0,o.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function f(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(g,(0,n.Z)({},e,t)),r.createElement(f,(0,n.Z)({},e,t)))}function N(e){const t=(0,v.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},8997:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>h});var n=a(2564),r=(a(9496),a(9613)),o=a(725),l=a(5498);const i={sidebar_position:5},s="Subnet Creation",u={unversionedId:"toolkit/ansible-avalanche-collection/tutorials/subnet-creation",id:"toolkit/ansible-avalanche-collection/tutorials/subnet-creation",title:"Subnet Creation",description:"In this section, we will learn how to use the ash.avalanche.subnet role to create a Subnet with an EVM Subnet, and add validator nodes to the Subnet.",source:"@site/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation.md",sourceDirName:"toolkit/ansible-avalanche-collection/tutorials",slug:"/toolkit/ansible-avalanche-collection/tutorials/subnet-creation",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"toolkitSidebar",previous:{title:"Blockchain VM Management",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/vm-management"},next:{title:"Subnet Blockchain Explorer",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer"}},c={},h=[{value:"Configure the Subnet",id:"configure-the-subnet",level:2},{value:"Configure the blockchains",id:"configure-the-blockchains",level:3},{value:"Configure the validators list",id:"configure-the-validators-list",level:3},{value:"With the <code>subnet_validators</code> Ansible group",id:"with-the-subnet_validators-ansible-group",level:4},{value:"With the <code>subnet_validators_params</code> variable",id:"with-the-subnet_validators_params-variable",level:4},{value:"Configure the Subnet transactions wallet",id:"configure-the-subnet-transactions-wallet",level:3},{value:"Extra configuration",id:"extra-configuration",level:3},{value:"Create the Subnet",id:"create-the-subnet",level:2},{value:"Track the Subnet with the validators",id:"track-the-subnet-with-the-validators",level:2},{value:"Check the Subnet validators",id:"check-the-subnet-validators",level:2},{value:"Connect to the Subnet and start issuing transactions",id:"connect-to-the-subnet-and-start-issuing-transactions",level:2}],d={toc:h},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"subnet-creation"},"Subnet Creation"),(0,r.kt)("p",null,"In this section, we will learn how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.subnet")," role to create a Subnet with an EVM Subnet, and add validator nodes to the Subnet."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For this tutorial, we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local"},(0,r.kt)("inlineCode",{parentName:"a"},"local"))," inventory provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started"},"Ansible Avalanche Getting Started")," repository. See ",(0,r.kt)("a",{parentName:"p",href:"./local-test-network"},"Create a Local Test Network")," for details.")),(0,r.kt)("h2",{id:"configure-the-subnet"},"Configure the Subnet"),(0,r.kt)("p",null,"All the transactions related to the Subnet creation will be ",(0,r.kt)("strong",{parentName:"p"},"issued from the ",(0,r.kt)("inlineCode",{parentName:"strong"},"subnet_txs_host")," node")," of the Ansible inventory. Thus, we configure the Subnet in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local/group_vars/subnet_txs_host.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"inventories/local/group_vars/subnet_txs_host.yml")),"."),(0,r.kt)("h3",{id:"configure-the-blockchains"},"Configure the blockchains"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.subnet")," role allows to configure the blockchains that will be created in the Subnet with the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_blockchains_list")," variable. You can edit the blockchains parameters, e.g. its name:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/local/group_vars/subnet_txs_host.yml"',title:'"inventories/local/group_vars/subnet_txs_host.yml"'},"subnet_blockchains_list:\n  - name: AshLocalEVM\n    vm: subnet-evm\n    genesis_data:\n      config:\n        chainId: 66666\n        homesteadBlock: 0\n        eip150Block: 0\n        [...]\n")),(0,r.kt)("h3",{id:"configure-the-validators-list"},"Configure the validators list"),(0,r.kt)("p",null,"There are 2 ways to add validators to the Subnet:"),(0,r.kt)("h4",{id:"with-the-subnet_validators-ansible-group"},"With the ",(0,r.kt)("inlineCode",{parentName:"h4"},"subnet_validators")," Ansible group"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You need to have SSH access to the nodes to use this method.")),(0,r.kt)("p",null,"Add validators to the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_validators")," group in the inventory. This is the ",(0,r.kt)("strong",{parentName:"p"},"most convenient way")," because the validators' node IDs are automatically resolved on each host (in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-collection/tree/main/roles/node/tasks/add-validator.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"ash.avalanche.node.add-validator"))," playbook)."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," inventory, the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_validators")," group is already configured with all the nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="inventories/local/hosts"',title:'"inventories/local/hosts"'},"[subnet_validators]\nvalidator0[1:5]\n")),(0,r.kt)("h4",{id:"with-the-subnet_validators_params-variable"},"With the ",(0,r.kt)("inlineCode",{parentName:"h4"},"subnet_validators_params")," variable"),(0,r.kt)("p",null,"Add validators to the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_validators_params")," variable. This is especially useful:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"include third-party nodes")," to which you don't have SSH access"),(0,r.kt)("li",{parentName:"ul"},"To ",(0,r.kt)("strong",{parentName:"li"},"customize validations parameters")," for each validator (e.g. the start and end times, the weight, etc.)")),(0,r.kt)("p",null,"For this tutorial, we will not use this method but we configured the ",(0,r.kt)("strong",{parentName:"p"},"first validator as an example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/local/group_vars/subnet_txs_host.yml"',title:'"inventories/local/group_vars/subnet_txs_host.yml"'},'subnet_validators_params:\n  - node_id: NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\n    start_time: "{{ subnet_validator_start_time }}"\n    end_time: "{{ subnet_validator_end_time }}"\n    stake_or_weight: 100\n    delegation_fee: 2\n')),(0,r.kt)("h3",{id:"configure-the-subnet-transactions-wallet"},"Configure the Subnet transactions wallet"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The wallet P-Chain address will be used as the Subnet control key.")),(0,r.kt)("p",null,"Creating Subnets, blockchains and adding validators requires using a wallet to ",(0,r.kt)("strong",{parentName:"p"},"pay for transaction fees"),". The private key of the wallet is configured with the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_txs_private_key")," variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/local/group_vars/subnet_txs_host.yml"',title:'"inventories/local/group_vars/subnet_txs_host.yml"'},"# Private key of the pre-funded account\nsubnet_txs_private_key: PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN\nsubnet_txs_key_encoding: cb58\n")),(0,r.kt)("p",null,"You can use another wallet by changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"subnet_txs_private_key")," variable. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ash-cli/tutorials/wallet-funding"},"Wallet funding")," for more information on how to create and fund a wallet using the Ash CLI."),(0,r.kt)("h3",{id:"extra-configuration"},"Extra configuration"),(0,r.kt)("p",null,"Extra configuration is possible for the Subnet, e.g. the validation start and end times, the validator weight, etc. For a list of all available variables, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-subnet"},"ash.avalanche.subnet role reference"),"."),(0,r.kt)("h2",{id:"create-the-subnet"},"Create the Subnet"),(0,r.kt)("p",null,"Run the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-collection/tree/main/playbooks/create_subnet.yml"},"ash.avalanche.create_subnet")," playbook to create the Subnet, blockchains and add validators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook ash.avalanche.create_subnet -i inventories/local\n")),(0,r.kt)("p",null,"At the end of the Subnet creation, information about the new Subnet is displayed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ok: [validator01] =>\n  msg: |-\n    The Subnet has been created with its blockchains, and the validators added.\n    Make sure to add the Subnet ID to the `avalanchego_track_subnets` list of each validator.\n    Subnet ID = p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This playbook calls"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ash.avalanche.subnet")," role to create the Subnet, the blockchains and add the validators from the ",(0,r.kt)("inlineCode",{parentName:"li"},"subnet_validators_list")," variable"),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ash.avalanche.node.add-validator")," playbook to add the validators from the ",(0,r.kt)("inlineCode",{parentName:"li"},"subnet_validators")," group"))),(0,r.kt)("h2",{id:"track-the-subnet-with-the-validators"},"Track the Subnet with the validators"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.subnet")," role does not handle Subnet tracking on validator nodes. The list of tracked Subnets is handled by the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_track_subnets")," variable in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.node")," role."),(0,r.kt)("p",null,"To track the Subnet on our nodes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the Subnet ID to the ",(0,r.kt)("inlineCode",{parentName:"p"},"avalanchego_track_subnets")," variable. For this tutorial, this variable is in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local/group_vars/avalanche_nodes.yml"},(0,r.kt)("inlineCode",{parentName:"a"},"avalanche_nodes.yml")),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/local/group_vars/avalanche_nodes.yml"',title:'"inventories/local/group_vars/avalanche_nodes.yml"'},"avalanchego_track_subnets:\n  - p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.provision_nodes")," to apply the new configuration and restart the :"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ansible-playbook ash.avalanche.provision_nodes -i inventories/local\n")))),(0,r.kt)("h2",{id:"check-the-subnet-validators"},"Check the Subnet validators"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"After 2 minutes"),", we can check the validators list of the Subnet:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"ash-cli",label:"Using Ash CLI",default:!0,mdxType:"TabItem"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If not already done, configure the Ash CLI for local Avalanche network by following ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ash-cli/tutorials/wallet-funding#configure-the-ash-cli-for-your-network"},"Configure the Ash CLI for your network"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},"multipass exec validator01 -- ash avalanche subnet info p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"Subnet 'p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6':\n  Type: Permissioned\n  Control keys: [\"P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u\"]\n  Threshold:    1\n  Blockchains list (1):\n  - AshLocalEVM:\n    ID:      2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac\n    VM ID:   spePNvBxaWSYL2tB5e2xMmMNBQkXMN8z2XEbz1ML2Aahatwoc\n    VM type: SubnetEVM\n  Validators list (5):\n  - NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg\n  - NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ\n  - NodeID-NFBbbJ4qCmNaCzeW7sxErhvWqvEQMnYcN\n  - NodeID-GWPcbFJZFfZreETSoWjPimr846mXEKCtu\n  - NodeID-P7oB2McjBGgW2NXXWVYjV8JEDFoW9xDE5\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"--extended")," flag to get more information about the validators, notably their weight and the start/end time of their validation period."))),(0,r.kt)(l.Z,{value:"curl",label:"Using cURL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Command"',title:'"Command"'},'curl -X POST --data \'{\n    "jsonrpc": "2.0",\n    "method": "platform.getCurrentValidators",\n    "params": {\n      "subnetID": "p4jUwqZsA2LuSftroCd3zb4ytH8W99oXKuKVZdsty7eQ3rXD6"\n    },\n    "id": 1\n}\' -H \'content-type:application/json;\' 192.168.60.11:9650/ext/bc/P | jq \'.result.validators\'\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},'[\n  {\n    "txID": "2RWJL12Uh26aE1i5hcUfs19NvZ4NgGtDVX35SvQeRZKWpxPs4M",\n    "startTime": "1686149361",\n    "endTime": "1686754041",\n    "weight": "1",\n    "nodeID": "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg",\n    "stakeAmount": "1",\n    "connected": true,\n    "uptime": "100.0000"\n  },\n  [...]\n]\n')))),(0,r.kt)("h2",{id:"connect-to-the-subnet-and-start-issuing-transactions"},"Connect to the Subnet and start issuing transactions"),(0,r.kt)("p",null,"The Subnet is now ready to be used! You can connect any EVM-compatible wallet (e.g. ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io/"},"MetaMask"),", ",(0,r.kt)("a",{parentName:"p",href:"https://core.app"},"Core"),", ",(0,r.kt)("a",{parentName:"p",href:"https://frame.sh"},"Frame"),", etc.) to it and start issuing transactions, deploying smart contracts, etc."),(0,r.kt)("p",null,"Use the following settings to connect to the Subnet:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Network name"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"AshLocalEVM"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"New RPC URL"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"http://${VALIDATOR01_IP}:9650/ext/bc/${BLOCKCHAIN_ID}/rpc"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Chain ID"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"66666"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Symbol"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"ASH"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Explorer URL"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"http://${FRONTEND_IP}:4000")),(0,r.kt)("p",null,"To get the public IP addresses of the nodes, you can use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# For VALIDATOR01\nterraform -chdir=terraform/multipass output -json validators_ips | jq '.[0]'\n# For FRONTEND\nterraform -chdir=terraform/multipass output frontend_ip\n")),(0,r.kt)("p",null,"To get the blockchain ID, you can use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"multipass exec validator01 -- ash avalanche subnet info \"$SUBNET_ID\" -j | jq '.blockchains[0].id'\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-blockchain-explorer"},"Subnet Blockchain Explorer")," tutorial to install the block explorer!")))}m.isMDXComponent=!0}}]);
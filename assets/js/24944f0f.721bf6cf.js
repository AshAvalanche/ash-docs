"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[631],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=s(a),u=r,m=h["".concat(p,".").concat(u)]||h[u]||c[u]||o;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[h]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9316:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:12},i="Graph Node",l={unversionedId:"toolkit/ansible-avalanche-collection/tutorials/graph-node",id:"toolkit/ansible-avalanche-collection/tutorials/graph-node",title:"Graph Node",description:"The Graph is a decentralized protocol designed for indexing and querying blockchain data, including Avalanche. It enables developers to efficiently access and organize blockchain data using a GraphQL API. A key component of this protocol is the Graph Node, which processes and indexes data from the blockchain based on predefined subgraph configurations. For detailed guidance on setting up and using a Graph Node, refer to the Graph Node Documentation.",source:"@site/docs/toolkit/ansible-avalanche-collection/tutorials/graph-node.md",sourceDirName:"toolkit/ansible-avalanche-collection/tutorials",slug:"/toolkit/ansible-avalanche-collection/tutorials/graph-node",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/graph-node",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/toolkit/ansible-avalanche-collection/tutorials/graph-node.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"toolkitSidebar",previous:{title:"Smart Contract Deployment",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/contract-deployment"},next:{title:"HyperSDK devnet on AWS",permalink:"/docs/toolkit/ansible-avalanche-collection/tutorials/hypersdk-devnet-aws"}},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Configure Graph Node",id:"configure-graph-node",level:2},{value:"Install Graph Node",id:"install-graph-node",level:2},{value:"Create a Graph Node Subgraph",id:"create-a-graph-node-subgraph",level:2},{value:"Step 1: Set the <code>GRAPH_NODE_IP</code> Environment Variable",id:"step-1-set-the-graph_node_ip-environment-variable",level:3},{value:"Step 2: Create a Subgraph Directory",id:"step-2-create-a-subgraph-directory",level:3},{value:"Step 3: Define the Subgraph Configuration",id:"step-3-define-the-subgraph-configuration",level:3},{value:"Step 4: Define the GraphQL Schema",id:"step-4-define-the-graphql-schema",level:3},{value:"Step 5: Add ABI Files",id:"step-5-add-abi-files",level:3},{value:"Step 6: Add Mapping Functions",id:"step-6-add-mapping-functions",level:3},{value:"Step 7: Install Dependencies",id:"step-7-install-dependencies",level:3},{value:"Step 8: Generate TypeScript Types",id:"step-8-generate-typescript-types",level:3},{value:"Step 9: Build the Subgraph",id:"step-9-build-the-subgraph",level:3},{value:"Step 10: Create the Subgraph on the Graph Node",id:"step-10-create-the-subgraph-on-the-graph-node",level:3},{value:"Step 11: Deploy the Subgraph",id:"step-11-deploy-the-subgraph",level:3},{value:"Step 12: Query the Subgraph",id:"step-12-query-the-subgraph",level:3}],d={toc:s},h="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(h,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graph-node"},"Graph Node"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/"},"The Graph")," is a decentralized protocol designed for indexing and querying blockchain data, including Avalanche. It enables developers to efficiently access and organize blockchain data using a GraphQL API. A key component of this protocol is the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphprotocol/graph-node"},(0,r.kt)("strong",{parentName:"a"},"Graph Node")),", which processes and indexes data from the blockchain based on predefined subgraph configurations. For detailed guidance on setting up and using a Graph Node, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/indexing/tooling/graph-node/"},"Graph Node Documentation"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For this tutorial, we will use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/tree/main/inventories/local"},(0,r.kt)("inlineCode",{parentName:"a"},"local"))," inventory from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started"},"Ansible Avalanche Getting Started")," repository. Also ensure you have already created a Subnet and a blockchain with a smart contract to index; see ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation"},"Subnet Creation")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/contract-deployment"},"Smart Contract Deployment")," for details.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Always make sure you have the latest version of the collection installed. See ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/installation"},"Installation and Upgrade"),".")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Before starting, ensure you have the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A local or remote environment with Ansible installed."),(0,r.kt)("li",{parentName:"ul"},"Node.js and npm installed (use ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/nvm-sh/nvm"},"nvm")," if needed)."),(0,r.kt)("li",{parentName:"ul"},"Access to the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started"},"Ansible Avalanche Getting Started")," repository.")),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.graph_node")," role relies on Docker, and the playbook ",(0,r.kt)("inlineCode",{parentName:"p"},"ash.avalanche.install_graph_node")," installs Docker via the ",(0,r.kt)("a",{parentName:"p",href:"https://galaxy.ansible.com/geerlingguy/docker"},"geerlingguy.docker")," role."),(0,r.kt)("p",null,"Install the required role locally with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-galaxy install -r ansible_collections/ash/avalanche/requirements.yml\n")),(0,r.kt)("p",null,"To create and deploy a subgraph, you will also need to install the ",(0,r.kt)("inlineCode",{parentName:"p"},"graph-cli")," tool. You can do this using ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @graphprotocol/graph-cli\n")),(0,r.kt)("p",null,"or"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn global add @graphprotocol/graph-cli\n")),(0,r.kt)("p",null,"If you don't have Node.js installed, follow the instructions on the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/"},"Node.js website")," to install it."),(0,r.kt)("h2",{id:"configure-graph-node"},"Configure Graph Node"),(0,r.kt)("p",null,"The Graph Node will be installed as a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/"},"Docker Compose")," service on the nodes of the ",(0,r.kt)("inlineCode",{parentName:"p"},"graph_node")," Ansible group. In ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started"},"Ansible Avalanche Getting Started"),", it is the ",(0,r.kt)("inlineCode",{parentName:"p"},"frontend")," node by default. You can change this by editing the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AshAvalanche/ansible-avalanche-getting-started/blob/main/inventories/local/hosts"},(0,r.kt)("inlineCode",{parentName:"a"},"hosts"))," file."),(0,r.kt)("p",null,"Set the blockchain ID in ",(0,r.kt)("inlineCode",{parentName:"p"},"graph_node.yml")," (the ",(0,r.kt)("inlineCode",{parentName:"p"},"group_vars")," file associated with our hosts' group):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="inventories/local/group_vars/graph_node.yml"',title:'"inventories/local/group_vars/graph_node.yml"'},"graph_node_blockchain_id: 2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac\n")),(0,r.kt)("p",null,"The blockchain ID (",(0,r.kt)("inlineCode",{parentName:"p"},"2dEmExGjJT6MouJRr1PqV4PSQEbScDAjKuPtT6pgqYR5xdUuac")," in our case) should be the one created in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/subnet-creation"},"Subnet Creation")," tutorial."),(0,r.kt)("h2",{id:"install-graph-node"},"Install Graph Node"),(0,r.kt)("p",null,"Run the following command to install Docker and the Docker Compose service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ansible-playbook ash.avalanche.install_graph_node -i inventories/local\n")),(0,r.kt)("h2",{id:"create-a-graph-node-subgraph"},"Create a Graph Node Subgraph"),(0,r.kt)("p",null,"A subgraph is a GraphQL schema that defines the data you want to index and how to query it. Follow these steps to create and deploy a subgraph:"),(0,r.kt)("h3",{id:"step-1-set-the-graph_node_ip-environment-variable"},"Step 1: Set the ",(0,r.kt)("inlineCode",{parentName:"h3"},"GRAPH_NODE_IP")," Environment Variable"),(0,r.kt)("p",null,"Since we are using a local network, set the ",(0,r.kt)("inlineCode",{parentName:"p"},"GRAPH_NODE_IP")," environment variable to the IP address of the Graph Node (which is the same as the frontend node):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export GRAPH_NODE_IP=$(terraform -chdir=terraform/multipass output -raw frontend_ip)\n")),(0,r.kt)("h3",{id:"step-2-create-a-subgraph-directory"},"Step 2: Create a Subgraph Directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir my-subgraph\ncd my-subgraph\n")),(0,r.kt)("h3",{id:"step-3-define-the-subgraph-configuration"},"Step 3: Define the Subgraph Configuration"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"subgraph.yaml")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-subgraph")," directory (don't forget to replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," field with the address of your deployed smart contract):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="subgraph.yaml"',title:'"subgraph.yaml"'},'specVersion: 0.0.4\ndescription: ASH Token on Subnet\nrepository: https://example.com\nschema:\n  file: ./schema.graphql\n\ndataSources:\n  - kind: ethereum/contract\n    name: ASHToken\n    network: subnet\n    source:\n      address: "0x11Fa7d827e18f28F4e3B2F4D4D8C5a62bCC8C5b3"\n      abi: ASHToken\n      startBlock: 0\n    mapping:\n      kind: ethereum/events\n      apiVersion: 0.0.7\n      language: wasm/assemblyscript\n      entities:\n        - Transfer\n        - Approval\n      abis:\n        - name: ASHToken\n          file: ./abis/ASH.json\n      eventHandlers:\n        - event: Transfer(indexed address,indexed address,uint256)\n          handler: handleTransfer\n        - event: Approval(indexed address,indexed address,uint256)\n          handler: handleApproval\n      file: ./src/mapping.ts\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"network")," field should be set to ",(0,r.kt)("inlineCode",{parentName:"li"},"subnet")," to indicate that you are indexing a Subnet."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"kind")," field should be set to ",(0,r.kt)("inlineCode",{parentName:"li"},"ethereum/contract")," to indicate that you are indexing an Ethereum-compatible contract."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," field should be set to a unique name for your subgraph. In this case, we are using ",(0,r.kt)("inlineCode",{parentName:"li"},"ASHToken"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"description")," field should be a brief description of your subgraph."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"repository")," field should be a link to your subgraph's repository (optional)."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"address")," field in the ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," section should be the address of your deployed smart contract. You can find this address in the output of the ",(0,r.kt)("a",{parentName:"li",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/contract-deployment"},"Smart Contract Deployment")," tutorial."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"startBlock")," field should be set to the block number where you want to start indexing. You can set it to ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," to index from the beginning."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"abi")," field should match the name of the ABI file you will create in the next step."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"entities")," field should include all the entities you want to index. In this case, we are indexing ",(0,r.kt)("inlineCode",{parentName:"li"},"Transfer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Approval")," events."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"eventHandlers")," field should include all the events you want to handle. In this case, we are handling ",(0,r.kt)("inlineCode",{parentName:"li"},"Transfer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Approval")," events."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"file")," field should point to the mapping file you will create in the next step."))),(0,r.kt)("h3",{id:"step-4-define-the-graphql-schema"},"Step 4: Define the GraphQL Schema"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.graphql")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-subgraph")," directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="schema.graphql"',title:'"schema.graphql"'},"type Transfer @entity(immutable: false) {\n  id: ID!\n  from: Bytes!\n  to: Bytes!\n  value: BigInt!\n  blockNumber: BigInt!\n  timestamp: BigInt!\n}\n\ntype Approval @entity(immutable: false) {\n  id: ID!\n  owner: Bytes!\n  spender: Bytes!\n  value: BigInt!\n  blockNumber: BigInt!\n  timestamp: BigInt!\n}\n")),(0,r.kt)("h3",{id:"step-5-add-abi-files"},"Step 5: Add ABI Files"),(0,r.kt)("p",null,"The ABI (Application Binary Interface) is a JSON file that describes the smart contract's functions and events. It is used by the Graph Node to decode the data from the blockchain.\nCreate an ",(0,r.kt)("inlineCode",{parentName:"p"},"abis")," directory and add the ABI file for the smart contract you want to index."),(0,r.kt)("p",null,"Add the ABI content to ",(0,r.kt)("inlineCode",{parentName:"p"},"ASH.json"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir abis\nln ../ash_token/out/ASHToken.sol/ASHToken.json abis/ASH.json\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In the example above, we are using the ",(0,r.kt)("inlineCode",{parentName:"p"},"ASHToken")," contract from the ",(0,r.kt)("a",{parentName:"p",href:"/docs/toolkit/ansible-avalanche-collection/tutorials/contract-deployment"},"Smart Contract Deployment")," tutorial. You can replace it with your own contract's ABI file.")),(0,r.kt)("h3",{id:"step-6-add-mapping-functions"},"Step 6: Add Mapping Functions"),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," directory and add a ",(0,r.kt)("inlineCode",{parentName:"p"},"mapping.ts")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="my-subgraph/src/mapping.ts"',title:'"my-subgraph/src/mapping.ts"'},'import {\n    Transfer as TransferEvent,\n    Approval as ApprovalEvent\n  } from "../generated/ASHToken/ASHToken"\n  import { Transfer, Approval } from "../generated/schema"\n\n  export function handleTransfer(event: TransferEvent): void {\n    let id = event.transaction.hash.concatI32(event.logIndex.toI32()).toHex()\n    let entity = new Transfer(id)\n    entity.from = event.params.from\n    entity.to = event.params.to\n    entity.value = event.params.value\n    entity.blockNumber = event.block.number\n    entity.timestamp = event.block.timestamp\n    entity.save()\n  }\n\n  export function handleApproval(event: ApprovalEvent): void {\n    let id = event.transaction.hash.concatI32(event.logIndex.toI32()).toHex()\n    let entity = new Approval(id)\n    entity.owner = event.params.owner\n    entity.spender = event.params.spender\n    entity.value = event.params.value\n    entity.blockNumber = event.block.number\n    entity.timestamp = event.block.timestamp\n    entity.save()\n  }\n')),(0,r.kt)("h3",{id:"step-7-install-dependencies"},"Step 7: Install Dependencies"),(0,r.kt)("p",null,"Run the following command to install dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @graphprotocol/graph-cli @graphprotocol/graph-ts\n")),(0,r.kt)("h3",{id:"step-8-generate-typescript-types"},"Step 8: Generate TypeScript Types"),(0,r.kt)("p",null,"This command generates the necessary TypeScript types based on your GraphQL schema and smart contract ABIs. These types are later used in the mapping file for strong typing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"graph codegen\n")),(0,r.kt)("h3",{id:"step-9-build-the-subgraph"},"Step 9: Build the Subgraph"),(0,r.kt)("p",null,"Build your subgraph to ensure that all configurations, generated types, and mappings are correctly bundled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"graph build\n")),(0,r.kt)("h3",{id:"step-10-create-the-subgraph-on-the-graph-node"},"Step 10: Create the Subgraph on the Graph Node"),(0,r.kt)("p",null,"This command creates the subgraph on your Graph Node instance. Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"subgraph-name")," with your desired name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"graph create --node http://$GRAPH_NODE_IP:8020/ subgraph-name\n")),(0,r.kt)("h3",{id:"step-11-deploy-the-subgraph"},"Step 11: Deploy the Subgraph"),(0,r.kt)("p",null,"Deploy your subgraph to the Graph Node using this command. This makes your subgraph available for indexing and querying. don't forget to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"subgraph-name")," with the name you used in the previous step."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"graph deploy --node http://$GRAPH_NODE_IP:8020/ --ipfs http://$GRAPH_NODE_IP:5001/ subgraph-name -l v0.0.1\n")),(0,r.kt)("h3",{id:"step-12-query-the-subgraph"},"Step 12: Query the Subgraph"),(0,r.kt)("p",null,"Use the GraphQL API at ",(0,r.kt)("inlineCode",{parentName:"p"},"http://$GRAPH_NODE_IP:8000/subgraphs/name/subgraph-name")," to query your subgraph."),(0,r.kt)("p",null,"Example query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  transfers(first: 1) {\n    id\n    from\n    to\n    value\n    blockNumber\n    timestamp\n  }\n}\n")),(0,r.kt)("p",null,"output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "transfers": [\n      {\n        "id": "0xea6dc0b9e51e12753b069ec14256ba425ecdb2fd8bf1528acdd18e622bb444d700000000",\n        "from": "0x0000000000000000000000000000000000000000",\n        "to": "0x8db97c7cece249c2b98bdc0226cc4c2a57bf52fc",\n        "value": "200000000000000000000",\n        "blockNumber": "1",\n        "timestamp": "1745577540"\n      }\n    ]\n  }\n}\n')))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkash_docs=self.webpackChunkash_docs||[]).push([[3518],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(a),h=r,m=c["".concat(p,".").concat(h)]||c[h]||u[h]||l;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3852:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={sidbar_position:5},o="ash.avalanche.graph_node",i={unversionedId:"toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node",id:"toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node",title:"ash.avalanche.graph_node",description:"This Ansible role installs and configures a Graph Node for indexing and querying Avalanche blockchain data.",source:"@site/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node.md",sourceDirName:"toolkit/ansible-avalanche-collection/reference/roles",slug:"/toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node",permalink:"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node",draft:!1,editUrl:"https://github.com/AshAvalanche/ash-docs/tree/main/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-graph-node.md",tags:[],version:"current",frontMatter:{sidbar_position:5},sidebar:"toolkitSidebar",previous:{title:"ash.avalanche.ash_cli",permalink:"/docs/toolkit/ansible-avalanche-collection/reference/roles/avalanche-ash-cli"},next:{title:"Modules",permalink:"/docs/category/modules"}},p={},s=[{value:"Role Variables",id:"role-variables",level:2},{value:"Default Values",id:"default-values",level:3},{value:"Ports",id:"ports",level:4},{value:"PostgreSQL",id:"postgresql",level:4},{value:"IPFS",id:"ipfs",level:4},{value:"rpc",id:"rpc",level:4},{value:"Paths",id:"paths",level:4},{value:"Metrics",id:"metrics",level:4},{value:"Auto Restart",id:"auto-restart",level:4},{value:"Inventory Requirements",id:"inventory-requirements",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Playbook Example",id:"playbook-example",level:3},{value:"Additional Notes",id:"additional-notes",level:2}],d={toc:s},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ashavalanchegraph_node"},"ash.avalanche.graph_node"),(0,r.kt)("p",null,"This Ansible role installs and configures a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphprotocol/graph-node"},"Graph Node")," for indexing and querying Avalanche blockchain data."),(0,r.kt)("h2",{id:"role-variables"},"Role Variables"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.version")),(0,r.kt)("td",{parentName:"tr",align:null},"Version of the Graph Node to install."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"v0.38.0"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.user")),(0,r.kt)("td",{parentName:"tr",align:null},"User under which the Graph Node service will run."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"root"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.ports")),(0,r.kt)("td",{parentName:"tr",align:null},"Ports for GraphQL and admin services."),(0,r.kt)("td",{parentName:"tr",align:null},"See below")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.postgres")),(0,r.kt)("td",{parentName:"tr",align:null},"PostgreSQL configuration, including internal and external options."),(0,r.kt)("td",{parentName:"tr",align:null},"See below")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.ipfs")),(0,r.kt)("td",{parentName:"tr",align:null},"IPFS configuration (host, port, gateway port)."),(0,r.kt)("td",{parentName:"tr",align:null},"See below")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.rpc")),(0,r.kt)("td",{parentName:"tr",align:null},"The network configuration (network, rpc URL)."),(0,r.kt)("td",{parentName:"tr",align:null},"See below")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.paths")),(0,r.kt)("td",{parentName:"tr",align:null},"Paths for configuration, custom files, assets, and logs."),(0,r.kt)("td",{parentName:"tr",align:null},"See below")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node.metrics.port")),(0,r.kt)("td",{parentName:"tr",align:null},"Port for metrics service."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"8040"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graph_node_auto_restart")),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable auto-restart for the Graph Node service."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))))),(0,r.kt)("h3",{id:"default-values"},"Default Values"),(0,r.kt)("h4",{id:"ports"},"Ports"),(0,r.kt)("p",null,"The default ports for the Graph Node services are as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ports:\n  graphql: 8000\n  admin: 8020\n")),(0,r.kt)("h4",{id:"postgresql"},"PostgreSQL"),(0,r.kt)("p",null,"The PostgreSQL configuration includes options for both internal and external databases. The internal database is created by default, while the external database can be configured if needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'postgres:\n  create: true\n  user: graph\n  password: "yqopFTn6n7MG0*FcG0*v"\n  db: graph\n  port: 5432\n  host: localhost\n')),(0,r.kt)("h4",{id:"ipfs"},"IPFS"),(0,r.kt)("p",null,"The IPFS configuration includes the host, port, and gateway port."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"ipfs:\n  host: ipfs\n  port: 5001\n  gateway_port: 8082\n")),(0,r.kt)("h4",{id:"rpc"},"rpc"),(0,r.kt)("p",null,"The rpc configuration specifies the network and the URL for the rpc endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'rpc:\n  network: subnet\n  rpc_url: "http://127.0.0.1:9650/ext/bc/{{ graph_node_blockchain_id }}/rpc"\n')),(0,r.kt)("h4",{id:"paths"},"Paths"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"paths:\n  conf:   /etc/graph-node\n  custom: /etc/graph-node/conf/custom\n  assets: /etc/graph-node/conf/custom/shared\n  logs:   /var/log/graph_node\n")),(0,r.kt)("h4",{id:"metrics"},"Metrics"),(0,r.kt)("p",null,"The metrics service is configured to run on port ",(0,r.kt)("inlineCode",{parentName:"p"},"8040")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"metrics:\n  port: 8040\n")),(0,r.kt)("h4",{id:"auto-restart"},"Auto Restart"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"graph_node_auto_restart")," variable controls whether the Graph Node service should automatically restart if it fails. Set this to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to enable auto-restart."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"graph_node_auto_restart: true\n")),(0,r.kt)("h2",{id:"inventory-requirements"},"Inventory Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The node used to run the Graph Node service")," must be in the ",(0,r.kt)("inlineCode",{parentName:"li"},"graph_node")," group."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"The blockchain ID")," must be set in the ",(0,r.kt)("inlineCode",{parentName:"li"},"graph_node.yml")," group variables file.")),(0,r.kt)("h2",{id:"usage-example"},"Usage Example"),(0,r.kt)("h3",{id:"playbook-example"},"Playbook Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: Install and configure Graph Node\n  hosts: graph_node\n  roles:\n    - role: ash.avalanche.graph_node\n      vars:\n        graph_node:\n          version: v0.38.0\n          user: root\n          ports:\n            graphql: 8000\n            admin: 8020\n          postgres:\n            create: true\n            user: graph\n            password: yqopFTn6n7MG0*FcG0*v\n            db: graph\n            port: 5432\n            host: localhost\n          ipfs:\n            host: ipfs\n            port: 5001\n            gateway_port: 8082\n          rpc:\n            network: subnet\n            rpc_url: "http://127.0.0.1:9650/ext/bc/{{ graph_node_blockchain_id }}/rpc"\n          paths:\n            conf: /etc/graph-node\n            custom: /etc/graph-node/conf/custom\n            assets: /etc/graph-node/conf/custom/shared\n            logs:   /var/log/graph_node\n          metrics:\n            port: 8040\n\n        graph_node_auto_restart: true\n')),(0,r.kt)("h2",{id:"additional-notes"},"Additional Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"graph_node_blockchain_id")," must match the blockchain ID of the Subnet you want to index."),(0,r.kt)("li",{parentName:"ul"},"Use the GraphQL API at ",(0,r.kt)("inlineCode",{parentName:"li"},"http://<node-ip>:8000")," to query indexed data.")))}u.isMDXComponent=!0}}]);